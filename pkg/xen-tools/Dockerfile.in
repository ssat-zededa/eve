# hadolint ignore=DL3006
FROM UEFI_TAG as uefi-build

FROM lfedge/eve-alpine:3e3111a703366e9ac607d9c33d5fded006fa1df3 as runx-build
RUN apk add --no-cache mkinitfs=3.4.1-r1

COPY initrd/base.files /etc/mkinitfs/features.d/base.files
COPY initrd/* /
RUN mkinitfs -n -F base -i /init-initrd -o /runx-initrd

FROM alpine:3.8 as kernel-build
ENV GIT_HTTP=y
# hadolint ignore=DL3018
RUN apk add --no-cache \
    gcc make libc-dev dev86 xz-dev perl bash python-dev \
    gettext iasl util-linux-dev ncurses-dev glib-dev \
    pixman-dev libaio-dev yajl-dev argp-standalone \
    linux-headers git patch texinfo curl tar libcap-dev \
    attr-dev flex bison cmake

# FIXME: this is really ugly -- we need to figure out xen tools dependencies
RUN [ "$(uname -m)" = "aarch64" ] && apk add --no-cache dtc-dev || :

# Alpine linux defines all 64bit integer types as long. Patch
# /usr/include/bits/alltypes.h to fix compilation with -m32
WORKDIR /
COPY alpine.patch /
RUN patch -p1 < alpine.patch

ENV XEN_VERSION 4.13.0
ENV XEN_SOURCE=https://downloads.xenproject.org/release/xen/${XEN_VERSION}/xen-${XEN_VERSION}.tar.gz

# Download and verify xen
#TODO: verify Xen
RUN \
    [ -f "$(basename ${XEN_SOURCE})" ] || curl -fsSLO "${XEN_SOURCE}" && \
    tar --absolute-names -xz < "$(basename ${XEN_SOURCE})" && mv "/xen-${XEN_VERSION}" /xen

# Apply local patches
COPY patches-${XEN_VERSION} /patches
WORKDIR /xen
RUN set -e && for patch in /patches/*.patch; do \
        echo "Applying $patch"; \
        patch -p1 < "$patch"; \
    done

RUN mkdir -p /out

# FEATURES="--enable-stubdom --enable-vtpm-stubdom --enable-vtpmmgr-stubdom"
COPY gmp.patch /xen/stubdom
WORKDIR /xen
RUN ./configure --prefix=/usr --disable-xen --disable-qemu-traditional --disable-docs --enable-9pfs \
                --with-system-ovmf=/usr/lib/xen/boot/ovmf.bin --disable-stubdom
RUN make && make dist
RUN dist/install.sh /out

# Filter out a few things that we don't currently need
RUN rm -rf /out/usr/share/qemu-xen/qemu/edk2-* /out/var/run

FROM alpine:3.8
RUN apk add --no-cache \
    bash=4.4.19-r1     \
    libaio=0.3.111-r0  \
    libbz2=1.0.6-r7    \
    glib=2.56.1-r1     \
    pixman=0.34.0-r5   \
    yajl=2.1.0-r0      \
    keyutils=1.5.10-r0 \
    xz-libs=5.2.4-r0
RUN if [ "$(uname -m)" = "aarch64" ]; then apk add --no-cache libfdt=1.4.4-r0 ;fi
COPY --from=kernel-build /out/ /
COPY --from=uefi-build /OVMF.fd /usr/lib/xen/boot/ovmf.bin
COPY --from=uefi-build /OVMF_PVH.fd /usr/lib/xen/boot/ovmf-pvh.bin
COPY --from=runx-build /runx-initrd /usr/lib/xen/boot/runx-initrd
COPY init.sh /

# We need to keep a slim profile, which means removing things we don't need
RUN rm -rf /usr/lib/libxen*.a /usr/lib/libxl*.a /usr/lib/debug

# Adjust /var/run to be shared
RUN rm -rf /var/run && ln -s /run /var/run

# FIXME: this needs to go away with rkt
RUN ln -s /persist/rkt /var/lib/rkt && ln -s /persist/rkt-cni /var/lib/cni

ENTRYPOINT []
CMD ["/init.sh"]
