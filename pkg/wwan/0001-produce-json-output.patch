--- a/src/mbimcli/mbimcli-helpers.c
+++ b/src/mbimcli/mbimcli-helpers.c
@@ -90,21 +90,33 @@
             error))
         return FALSE;
 
-    /* IPv4 info */
+    g_print ("{\n");
 
+    /* IPv4 info */
     ipv4configurationavailable_str = mbim_ip_configuration_available_flag_build_string_from_mask (ipv4configurationavailable);
-    g_print ("\n[%s] IPv4 configuration available: '%s'\n", mbim_device_get_path_display (device), ipv4configurationavailable_str);
+    if (ipv4addresscount == 0 && ipv6addresscount > 0) {
+        g_print ("\t\"pdp-type\": \"ipv6\",\n\t\"ip-family\": \"ipv6\",\n\t\"mtu\": %d,\n", ipv6mtu);
+    } else {
+        g_print ("\t\"pdp-type\": \"ipv4\",\n\t\"ip-family\": \"ipv4\",\n\t\"mtu\": %d,\n", ipv4mtu);
+    }
 
+    g_print ("\t\"ipv4\": {\n");
     if (ipv4configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_ADDRESS) {
-        guint i;
+        guint i, mask;
 
-        for (i = 0; i < ipv4addresscount; i++) {
+        for (i = 0; i < !!ipv4addresscount; i++) {
             g_autoptr(GInetAddress)  addr = NULL;
             g_autofree gchar        *addr_str = NULL;
 
             addr = g_inet_address_new_from_bytes ((guint8 *)&ipv4address[i]->ipv4_address, G_SOCKET_FAMILY_IPV4);
             addr_str = g_inet_address_to_string (addr);
-            g_print ("     IP [%u]: '%s/%u'\n", i, addr_str, ipv4address[i]->on_link_prefix_length);
+	    mask = 0xffffffff << (32 - ipv4address[i]->on_link_prefix_length);
+
+            g_print ("\t\t\"ip\": \"%s\",\n", addr_str);
+            g_print ("\t\t\"subnet\": \"%hhu.%hhu.%hhu.%hhu\",\n", (char)(mask >> 24),
+			                                           (char)(mask >> 16 & 0xff),
+						      	           (char)(mask >>  8 & 0xff),
+			                                           (char)(mask & 0xff));
         }
     }
 
@@ -114,7 +126,7 @@
 
         addr = g_inet_address_new_from_bytes ((guint8 *)ipv4gateway, G_SOCKET_FAMILY_IPV4);
         addr_str = g_inet_address_to_string (addr);
-        g_print ("    Gateway: '%s'\n", addr_str);
+        g_print ("\t\t\"gateway\": \"%s\",\n", addr_str);
     }
 
     if (ipv4configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_DNS) {
@@ -128,20 +140,17 @@
                 g_autofree gchar *addr_str = NULL;
 
                 addr_str = g_inet_address_to_string (addr);
-                g_print ("    DNS [%u]: '%s'\n", i, addr_str);
+                g_print ("\t\t\"dns%u\": \"%s\",\n", i, addr_str);
             }
         }
     }
+    g_print ("\t\t\"dummy\": 0\n\t},\n\t\"ipv6\": {\n");
 
-    if (ipv4configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_MTU)
-        g_print ("        MTU: '%u'\n", ipv4mtu);
-
     /* IPv6 info */
     ipv6configurationavailable_str = mbim_ip_configuration_available_flag_build_string_from_mask (ipv6configurationavailable);
-    g_print ("\n[%s] IPv6 configuration available: '%s'\n", mbim_device_get_path_display (device), ipv6configurationavailable_str);
-
     if (ipv6configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_ADDRESS) {
         guint i;
+	__uint128_t mask;
 
         for (i = 0; i < ipv6addresscount; i++) {
             g_autoptr(GInetAddress)  addr = NULL;
@@ -149,7 +158,18 @@
 
             addr = g_inet_address_new_from_bytes ((guint8 *)&ipv6address[i]->ipv6_address, G_SOCKET_FAMILY_IPV6);
             addr_str = g_inet_address_to_string (addr);
-            g_print ("     IP [%u]: '%s/%u'\n", i, addr_str, ipv6address[i]->on_link_prefix_length);
+	    mask = 0xffffffff << (128 - ipv6address[i]->on_link_prefix_length);
+
+            g_print ("\t\t\"ip\": \"%s\",\n", addr_str);
+            g_print ("\t\t\"subnet\": \"%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu\",\n",
+			                                       (guint16)(mask >> 112),
+			                                       (guint16)(mask >>  96 & 0xffff),
+					 		       (guint16)(mask >>  80 & 0xffff),
+			                                       (guint16)(mask >>  64 & 0xffff),
+					    		       (guint16)(mask >>  48 & 0xffff),
+			                                       (guint16)(mask >>  32 & 0xffff),
+					    		       (guint16)(mask >>  16 & 0xffff),
+			                                       (guint16)(mask        & 0xffff));
         }
     }
 
@@ -159,7 +179,8 @@
 
         addr = g_inet_address_new_from_bytes ((guint8 *)ipv6gateway, G_SOCKET_FAMILY_IPV6);
         addr_str = g_inet_address_to_string (addr);
-        g_print ("    Gateway: '%s'\n", addr_str);
+
+        g_print ("\t\t\"gateway\": \"%s\",\n", addr_str);
     }
 
     if (ipv6configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_DNS) {
@@ -173,13 +194,11 @@
                 g_autofree gchar *addr_str = NULL;
 
                 addr_str = g_inet_address_to_string (addr);
-                g_print ("    DNS [%u]: '%s'\n", i, addr_str);
+                g_print ("\t\t\"dns%u\": \"%s\",\n", i, addr_str);
             }
         }
     }
-
-    if (ipv6configurationavailable & MBIM_IP_CONFIGURATION_AVAILABLE_FLAG_MTU)
-        g_print ("        MTU: '%u'\n", ipv6mtu);
+    g_print ("\t\t\"dummy\": 0\n\t}\n}\n");
 
     return TRUE;
 }
