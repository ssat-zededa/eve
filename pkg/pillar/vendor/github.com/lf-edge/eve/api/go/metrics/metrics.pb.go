// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: metrics/metrics.proto

package metrics

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ZmetricTypes int32

const (
	ZmetricTypes_ZmNop    ZmetricTypes = 0
	ZmetricTypes_ZmDevice ZmetricTypes = 1
	ZmetricTypes_ZmApp    ZmetricTypes = 3
)

// Enum value maps for ZmetricTypes.
var (
	ZmetricTypes_name = map[int32]string{
		0: "ZmNop",
		1: "ZmDevice",
		3: "ZmApp",
	}
	ZmetricTypes_value = map[string]int32{
		"ZmNop":    0,
		"ZmDevice": 1,
		"ZmApp":    3,
	}
)

func (x ZmetricTypes) Enum() *ZmetricTypes {
	p := new(ZmetricTypes)
	*p = x
	return p
}

func (x ZmetricTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZmetricTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_metrics_proto_enumTypes[0].Descriptor()
}

func (ZmetricTypes) Type() protoreflect.EnumType {
	return &file_metrics_metrics_proto_enumTypes[0]
}

func (x ZmetricTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZmetricTypes.Descriptor instead.
func (ZmetricTypes) EnumDescriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{0}
}

type MetricItemType int32

const (
	MetricItemType_MetricItemOther   MetricItemType = 0 // E.g., a string like an ESSID
	MetricItemType_MetricItemGauge   MetricItemType = 1 // Goes up and down over time
	MetricItemType_MetricItemCounter MetricItemType = 2 // Monotonically increasing (until reboot)
	MetricItemType_MetricItemState   MetricItemType = 3 // Toggles on and off; count transitions
)

// Enum value maps for MetricItemType.
var (
	MetricItemType_name = map[int32]string{
		0: "MetricItemOther",
		1: "MetricItemGauge",
		2: "MetricItemCounter",
		3: "MetricItemState",
	}
	MetricItemType_value = map[string]int32{
		"MetricItemOther":   0,
		"MetricItemGauge":   1,
		"MetricItemCounter": 2,
		"MetricItemState":   3,
	}
)

func (x MetricItemType) Enum() *MetricItemType {
	p := new(MetricItemType)
	*p = x
	return p
}

func (x MetricItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricItemType) Type() protoreflect.EnumType {
	return &file_metrics_metrics_proto_enumTypes[1]
}

func (x MetricItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricItemType.Descriptor instead.
func (MetricItemType) EnumDescriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{1}
}

type MemoryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedMem         uint32  `protobuf:"varint,2,opt,name=usedMem,proto3" json:"usedMem,omitempty"`   //in MBytes
	AvailMem        uint32  `protobuf:"varint,3,opt,name=availMem,proto3" json:"availMem,omitempty"` //in MBytes
	UsedPercentage  float64 `protobuf:"fixed64,4,opt,name=usedPercentage,proto3" json:"usedPercentage,omitempty"`
	AvailPercentage float64 `protobuf:"fixed64,5,opt,name=availPercentage,proto3" json:"availPercentage,omitempty"`
}

func (x *MemoryMetric) Reset() {
	*x = MemoryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryMetric) ProtoMessage() {}

func (x *MemoryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryMetric.ProtoReflect.Descriptor instead.
func (*MemoryMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MemoryMetric) GetUsedMem() uint32 {
	if x != nil {
		return x.UsedMem
	}
	return 0
}

func (x *MemoryMetric) GetAvailMem() uint32 {
	if x != nil {
		return x.AvailMem
	}
	return 0
}

func (x *MemoryMetric) GetUsedPercentage() float64 {
	if x != nil {
		return x.UsedPercentage
	}
	return 0
}

func (x *MemoryMetric) GetAvailPercentage() float64 {
	if x != nil {
		return x.AvailPercentage
	}
	return 0
}

type NetworkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iName - Set to SystemAdapter.Name which is the Logicallabel in phyio
	IName string `protobuf:"bytes,1,opt,name=iName,proto3" json:"iName,omitempty"` // name from config; displayName for network instance
	// alias - Set to SystemAdapter.alias
	Alias   string `protobuf:"bytes,20,opt,name=alias,proto3" json:"alias,omitempty"`
	TxBytes uint64 `protobuf:"varint,2,opt,name=txBytes,proto3" json:"txBytes,omitempty"` // in bytes
	RxBytes uint64 `protobuf:"varint,3,opt,name=rxBytes,proto3" json:"rxBytes,omitempty"` // in bytes
	TxDrops uint64 `protobuf:"varint,4,opt,name=txDrops,proto3" json:"txDrops,omitempty"`
	RxDrops uint64 `protobuf:"varint,5,opt,name=rxDrops,proto3" json:"rxDrops,omitempty"`
	// deprecated = 6;
	// deprecated = 7;
	TxPkts              uint64 `protobuf:"varint,8,opt,name=txPkts,proto3" json:"txPkts,omitempty"`
	RxPkts              uint64 `protobuf:"varint,9,opt,name=rxPkts,proto3" json:"rxPkts,omitempty"`
	TxErrors            uint64 `protobuf:"varint,10,opt,name=txErrors,proto3" json:"txErrors,omitempty"`
	RxErrors            uint64 `protobuf:"varint,11,opt,name=rxErrors,proto3" json:"rxErrors,omitempty"`
	TxAclDrops          uint64 `protobuf:"varint,12,opt,name=txAclDrops,proto3" json:"txAclDrops,omitempty"`
	RxAclDrops          uint64 `protobuf:"varint,13,opt,name=rxAclDrops,proto3" json:"rxAclDrops,omitempty"`
	TxAclRateLimitDrops uint64 `protobuf:"varint,14,opt,name=txAclRateLimitDrops,proto3" json:"txAclRateLimitDrops,omitempty"`
	RxAclRateLimitDrops uint64 `protobuf:"varint,15,opt,name=rxAclRateLimitDrops,proto3" json:"rxAclRateLimitDrops,omitempty"`
	// localName - Set to IfName of the Adapter
	LocalName string `protobuf:"bytes,16,opt,name=localName,proto3" json:"localName,omitempty"` // local vif name e.g., nbu*
}

func (x *NetworkMetric) Reset() {
	*x = NetworkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetric) ProtoMessage() {}

func (x *NetworkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetric.ProtoReflect.Descriptor instead.
func (*NetworkMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkMetric) GetIName() string {
	if x != nil {
		return x.IName
	}
	return ""
}

func (x *NetworkMetric) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *NetworkMetric) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *NetworkMetric) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *NetworkMetric) GetTxDrops() uint64 {
	if x != nil {
		return x.TxDrops
	}
	return 0
}

func (x *NetworkMetric) GetRxDrops() uint64 {
	if x != nil {
		return x.RxDrops
	}
	return 0
}

func (x *NetworkMetric) GetTxPkts() uint64 {
	if x != nil {
		return x.TxPkts
	}
	return 0
}

func (x *NetworkMetric) GetRxPkts() uint64 {
	if x != nil {
		return x.RxPkts
	}
	return 0
}

func (x *NetworkMetric) GetTxErrors() uint64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *NetworkMetric) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *NetworkMetric) GetTxAclDrops() uint64 {
	if x != nil {
		return x.TxAclDrops
	}
	return 0
}

func (x *NetworkMetric) GetRxAclDrops() uint64 {
	if x != nil {
		return x.RxAclDrops
	}
	return 0
}

func (x *NetworkMetric) GetTxAclRateLimitDrops() uint64 {
	if x != nil {
		return x.TxAclRateLimitDrops
	}
	return 0
}

func (x *NetworkMetric) GetRxAclRateLimitDrops() uint64 {
	if x != nil {
		return x.RxAclRateLimitDrops
	}
	return 0
}

func (x *NetworkMetric) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

// Failures and successes for commuication to zedcloud
// for each management port
type ZedcloudMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName            string               `protobuf:"bytes,1,opt,name=ifName,proto3" json:"ifName,omitempty"` // interface name for management port
	Failures          uint64               `protobuf:"varint,2,opt,name=failures,proto3" json:"failures,omitempty"`
	Success           uint64               `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	LastFailure       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=lastFailure,proto3" json:"lastFailure,omitempty"`
	LastSuccess       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastSuccess,proto3" json:"lastSuccess,omitempty"`
	UrlMetrics        []*UrlcloudMetric    `protobuf:"bytes,6,rep,name=urlMetrics,proto3" json:"urlMetrics,omitempty"`
	AuthVerifyFailure uint64               `protobuf:"varint,7,opt,name=authVerifyFailure,proto3" json:"authVerifyFailure,omitempty"` // networking success, authen verify fail count for V2 API
}

func (x *ZedcloudMetric) Reset() {
	*x = ZedcloudMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZedcloudMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZedcloudMetric) ProtoMessage() {}

func (x *ZedcloudMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZedcloudMetric.ProtoReflect.Descriptor instead.
func (*ZedcloudMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *ZedcloudMetric) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *ZedcloudMetric) GetFailures() uint64 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *ZedcloudMetric) GetSuccess() uint64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *ZedcloudMetric) GetLastFailure() *timestamp.Timestamp {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

func (x *ZedcloudMetric) GetLastSuccess() *timestamp.Timestamp {
	if x != nil {
		return x.LastSuccess
	}
	return nil
}

func (x *ZedcloudMetric) GetUrlMetrics() []*UrlcloudMetric {
	if x != nil {
		return x.UrlMetrics
	}
	return nil
}

func (x *ZedcloudMetric) GetAuthVerifyFailure() uint64 {
	if x != nil {
		return x.AuthVerifyFailure
	}
	return 0
}

// Information for each API URL
type UrlcloudMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TryMsgCount   int64  `protobuf:"varint,2,opt,name=tryMsgCount,proto3" json:"tryMsgCount,omitempty"`   // Things we might have tried to send
	TryByteCount  int64  `protobuf:"varint,3,opt,name=tryByteCount,proto3" json:"tryByteCount,omitempty"` // or it failed before we could send them.
	SentMsgCount  int64  `protobuf:"varint,4,opt,name=sentMsgCount,proto3" json:"sentMsgCount,omitempty"`
	SentByteCount int64  `protobuf:"varint,5,opt,name=sentByteCount,proto3" json:"sentByteCount,omitempty"`
	RecvMsgCount  int64  `protobuf:"varint,6,opt,name=recvMsgCount,proto3" json:"recvMsgCount,omitempty"`
	RecvByteCount int64  `protobuf:"varint,7,opt,name=recvByteCount,proto3" json:"recvByteCount,omitempty"`
}

func (x *UrlcloudMetric) Reset() {
	*x = UrlcloudMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlcloudMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlcloudMetric) ProtoMessage() {}

func (x *UrlcloudMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlcloudMetric.ProtoReflect.Descriptor instead.
func (*UrlcloudMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *UrlcloudMetric) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UrlcloudMetric) GetTryMsgCount() int64 {
	if x != nil {
		return x.TryMsgCount
	}
	return 0
}

func (x *UrlcloudMetric) GetTryByteCount() int64 {
	if x != nil {
		return x.TryByteCount
	}
	return 0
}

func (x *UrlcloudMetric) GetSentMsgCount() int64 {
	if x != nil {
		return x.SentMsgCount
	}
	return 0
}

func (x *UrlcloudMetric) GetSentByteCount() int64 {
	if x != nil {
		return x.SentByteCount
	}
	return 0
}

func (x *UrlcloudMetric) GetRecvMsgCount() int64 {
	if x != nil {
		return x.RecvMsgCount
	}
	return 0
}

func (x *UrlcloudMetric) GetRecvByteCount() int64 {
	if x != nil {
		return x.RecvByteCount
	}
	return 0
}

type AppCpuMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated = 2;
	// deprecated = 3;
	UpTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=upTime,proto3" json:"upTime,omitempty"`
	Total  uint64               `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"` // cpu total in secs.
}

func (x *AppCpuMetric) Reset() {
	*x = AppCpuMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCpuMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCpuMetric) ProtoMessage() {}

func (x *AppCpuMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCpuMetric.ProtoReflect.Descriptor instead.
func (*AppCpuMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *AppCpuMetric) GetUpTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpTime
	}
	return nil
}

func (x *AppCpuMetric) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated = 1;
	Memory   *MemoryMetric     `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Network  []*NetworkMetric  `protobuf:"bytes,3,rep,name=network,proto3" json:"network,omitempty"`
	Zedcloud []*ZedcloudMetric `protobuf:"bytes,4,rep,name=zedcloud,proto3" json:"zedcloud,omitempty"`
	// deprecated = 5;
	Disk                     []*DiskMetric `protobuf:"bytes,6,rep,name=disk,proto3" json:"disk,omitempty"`
	CpuMetric                *AppCpuMetric `protobuf:"bytes,7,opt,name=cpuMetric,proto3" json:"cpuMetric,omitempty"`
	MetricItems              []*MetricItem `protobuf:"bytes,8,rep,name=metricItems,proto3" json:"metricItems,omitempty"`
	RuntimeStorageOverheadMB uint64        `protobuf:"varint,9,opt,name=runtimeStorageOverheadMB,proto3" json:"runtimeStorageOverheadMB,omitempty"` // In MB
	AppRunTimeStorageMB      uint64        `protobuf:"varint,10,opt,name=appRunTimeStorageMB,proto3" json:"appRunTimeStorageMB,omitempty"`          // In MB
	SystemServicesMemoryMB   *MemoryMetric `protobuf:"bytes,11,opt,name=systemServicesMemoryMB,proto3" json:"systemServicesMemoryMB,omitempty"`     // In MB
	Log                      *LogMetric    `protobuf:"bytes,12,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *DeviceMetric) Reset() {
	*x = DeviceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetric) ProtoMessage() {}

func (x *DeviceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceMetric) GetMemory() *MemoryMetric {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *DeviceMetric) GetNetwork() []*NetworkMetric {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *DeviceMetric) GetZedcloud() []*ZedcloudMetric {
	if x != nil {
		return x.Zedcloud
	}
	return nil
}

func (x *DeviceMetric) GetDisk() []*DiskMetric {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *DeviceMetric) GetCpuMetric() *AppCpuMetric {
	if x != nil {
		return x.CpuMetric
	}
	return nil
}

func (x *DeviceMetric) GetMetricItems() []*MetricItem {
	if x != nil {
		return x.MetricItems
	}
	return nil
}

func (x *DeviceMetric) GetRuntimeStorageOverheadMB() uint64 {
	if x != nil {
		return x.RuntimeStorageOverheadMB
	}
	return 0
}

func (x *DeviceMetric) GetAppRunTimeStorageMB() uint64 {
	if x != nil {
		return x.AppRunTimeStorageMB
	}
	return 0
}

func (x *DeviceMetric) GetSystemServicesMemoryMB() *MemoryMetric {
	if x != nil {
		return x.SystemServicesMemoryMB
	}
	return nil
}

func (x *DeviceMetric) GetLog() *LogMetric {
	if x != nil {
		return x.Log
	}
	return nil
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
type MetricItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // E.g., "lte-signal-strength"
	Type MetricItemType `protobuf:"varint,2,opt,name=type,proto3,enum=MetricItemType" json:"type,omitempty"`
	// Types that are assignable to MetricItemValue:
	//	*MetricItem_BoolValue
	//	*MetricItem_Uint32Value
	//	*MetricItem_Uint64Value
	//	*MetricItem_FloatValue
	//	*MetricItem_StringValue
	MetricItemValue isMetricItem_MetricItemValue `protobuf_oneof:"metricItemValue"`
}

func (x *MetricItem) Reset() {
	*x = MetricItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricItem) ProtoMessage() {}

func (x *MetricItem) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricItem.ProtoReflect.Descriptor instead.
func (*MetricItem) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *MetricItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetricItem) GetType() MetricItemType {
	if x != nil {
		return x.Type
	}
	return MetricItemType_MetricItemOther
}

func (m *MetricItem) GetMetricItemValue() isMetricItem_MetricItemValue {
	if m != nil {
		return m.MetricItemValue
	}
	return nil
}

func (x *MetricItem) GetBoolValue() bool {
	if x, ok := x.GetMetricItemValue().(*MetricItem_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *MetricItem) GetUint32Value() uint32 {
	if x, ok := x.GetMetricItemValue().(*MetricItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *MetricItem) GetUint64Value() uint64 {
	if x, ok := x.GetMetricItemValue().(*MetricItem_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *MetricItem) GetFloatValue() float32 {
	if x, ok := x.GetMetricItemValue().(*MetricItem_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *MetricItem) GetStringValue() string {
	if x, ok := x.GetMetricItemValue().(*MetricItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isMetricItem_MetricItemValue interface {
	isMetricItem_MetricItemValue()
}

type MetricItem_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=boolValue,proto3,oneof"`
}

type MetricItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32Value,proto3,oneof"` // If timer this is in seconds
}

type MetricItem_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,5,opt,name=uint64Value,proto3,oneof"`
}

type MetricItem_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=floatValue,proto3,oneof"`
}

type MetricItem_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=stringValue,proto3,oneof"` // Use with care
}

func (*MetricItem_BoolValue) isMetricItem_MetricItemValue() {}

func (*MetricItem_Uint32Value) isMetricItem_MetricItemValue() {}

func (*MetricItem_Uint64Value) isMetricItem_MetricItemValue() {}

func (*MetricItem_FloatValue) isMetricItem_MetricItemValue() {}

func (*MetricItem_StringValue) isMetricItem_MetricItemValue() {}

// For each partition; counts since boot
type DiskMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk       string `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`              // E.g., "mmcblk0p2"
	MountPath  string `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`    // E.g., "/config"
	ReadBytes  uint64 `protobuf:"varint,3,opt,name=readBytes,proto3" json:"readBytes,omitempty"`   // In MB
	WriteBytes uint64 `protobuf:"varint,4,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"` // In MB
	ReadCount  uint64 `protobuf:"varint,5,opt,name=readCount,proto3" json:"readCount,omitempty"`   // Number of ops
	WriteCount uint64 `protobuf:"varint,6,opt,name=writeCount,proto3" json:"writeCount,omitempty"` // Number of ops
	Total      uint64 `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`           // in MBytes; if we know the mountpath
	Used       uint64 `protobuf:"varint,8,opt,name=used,proto3" json:"used,omitempty"`             // in MBytes; if we know the mountpath
	Free       uint64 `protobuf:"varint,9,opt,name=free,proto3" json:"free,omitempty"`             // in MBytes; if we know the mountpath
}

func (x *DiskMetric) Reset() {
	*x = DiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMetric) ProtoMessage() {}

func (x *DiskMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMetric.ProtoReflect.Descriptor instead.
func (*DiskMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *DiskMetric) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *DiskMetric) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *DiskMetric) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *DiskMetric) GetWriteBytes() uint64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *DiskMetric) GetReadCount() uint64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *DiskMetric) GetWriteCount() uint64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *DiskMetric) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskMetric) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskMetric) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

type AppDiskMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk        string `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`                // E.g., "mmcblk0p2"
	Provisioned uint64 `protobuf:"varint,2,opt,name=provisioned,proto3" json:"provisioned,omitempty"` // in MBytes
	Used        uint64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`               // in MBytes
	DiskType    string `protobuf:"bytes,4,opt,name=diskType,proto3" json:"diskType,omitempty"`        // Type of disk, e.g., QCOW2, RAW etc.
	Dirty       bool   `protobuf:"varint,5,opt,name=dirty,proto3" json:"dirty,omitempty"`             // Dirty flag
}

func (x *AppDiskMetric) Reset() {
	*x = AppDiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDiskMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDiskMetric) ProtoMessage() {}

func (x *AppDiskMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDiskMetric.ProtoReflect.Descriptor instead.
func (*AppDiskMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{8}
}

func (x *AppDiskMetric) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *AppDiskMetric) GetProvisioned() uint64 {
	if x != nil {
		return x.Provisioned
	}
	return 0
}

func (x *AppDiskMetric) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *AppDiskMetric) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *AppDiskMetric) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

type AppMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string           `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppVersion string           `protobuf:"bytes,10,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	AppName    string           `protobuf:"bytes,2,opt,name=AppName,proto3" json:"AppName,omitempty"`
	Cpu        *AppCpuMetric    `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory     *MemoryMetric    `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Network    []*NetworkMetric `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	Disk       []*AppDiskMetric `protobuf:"bytes,6,rep,name=disk,proto3" json:"disk,omitempty"`
}

func (x *AppMetric) Reset() {
	*x = AppMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppMetric) ProtoMessage() {}

func (x *AppMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppMetric.ProtoReflect.Descriptor instead.
func (*AppMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{9}
}

func (x *AppMetric) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppMetric) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *AppMetric) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppMetric) GetCpu() *AppCpuMetric {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *AppMetric) GetMemory() *MemoryMetric {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *AppMetric) GetNetwork() []*NetworkMetric {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AppMetric) GetDisk() []*AppDiskMetric {
	if x != nil {
		return x.Disk
	}
	return nil
}

// We track device and app logs separately with these counters.
// An event is counted as a log input that can be sent onwards (to cloud) or
// dropped for a few reason.
// Thus:
// totalAppLogInput = numAppEventsSent + numAppEventErrors + num4xxResponses
// totalDeviceLogInput = numDeviceEventsSent + numDeviceEventErrors
type LogMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sent events count also includes events that the device tried to send but got deferred.
	// Because deferred logs will eventually reach cloud after network is restored.
	NumDeviceEventsSent  uint64 `protobuf:"varint,1,opt,name=numDeviceEventsSent,proto3" json:"numDeviceEventsSent,omitempty"`
	NumDeviceBundlesSent uint64 `protobuf:"varint,2,opt,name=numDeviceBundlesSent,proto3" json:"numDeviceBundlesSent,omitempty"`
	NumAppEventsSent     uint64 `protobuf:"varint,3,opt,name=numAppEventsSent,proto3" json:"numAppEventsSent,omitempty"`
	NumAppBundlesSent    uint64 `protobuf:"varint,4,opt,name=numAppBundlesSent,proto3" json:"numAppBundlesSent,omitempty"`
	// num4xxResponses: This counter is akin to event errors/drops.
	//
	// 4xx response for a device event bundle does not make sense, unless
	// there is a programming error in EVE code that sends device event bundles to cloud.
	// But, app instances can disappear from cloud and any futher logs sent by EVE to cloud
	// will result in a 4xx response back.
	// Any time an app log bundle gets rejected with 4xx response from cloud, num4xxResponses
	// should be incremented by the number of events present in that rejected bundle.
	Num4XxResponses          uint64               `protobuf:"varint,5,opt,name=num4xxResponses,proto3" json:"num4xxResponses,omitempty"`
	LastDeviceBundleSendTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=lastDeviceBundleSendTime,proto3" json:"lastDeviceBundleSendTime,omitempty"`
	LastAppBundleSendTime    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=lastAppBundleSendTime,proto3" json:"lastAppBundleSendTime,omitempty"`
	IsLogProcessingDeferred  bool                 `protobuf:"varint,8,opt,name=isLogProcessingDeferred,proto3" json:"isLogProcessingDeferred,omitempty"`
	NumTimesDeferred         uint64               `protobuf:"varint,9,opt,name=numTimesDeferred,proto3" json:"numTimesDeferred,omitempty"`
	LastLogDeferTime         *timestamp.Timestamp `protobuf:"bytes,10,opt,name=lastLogDeferTime,proto3" json:"lastLogDeferTime,omitempty"`
	TotalDeviceLogInput      uint64               `protobuf:"varint,13,opt,name=totalDeviceLogInput,proto3" json:"totalDeviceLogInput,omitempty"`
	TotalAppLogInput         uint64               `protobuf:"varint,14,opt,name=totalAppLogInput,proto3" json:"totalAppLogInput,omitempty"`
	// eg:- Size of individual event is larger than the max proto buf size limit.
	NumDeviceEventErrors          uint64 `protobuf:"varint,15,opt,name=numDeviceEventErrors,proto3" json:"numDeviceEventErrors,omitempty"`
	NumAppEventErrors             uint64 `protobuf:"varint,16,opt,name=numAppEventErrors,proto3" json:"numAppEventErrors,omitempty"`
	NumDeviceBundleProtoBytesSent uint64 `protobuf:"varint,17,opt,name=numDeviceBundleProtoBytesSent,proto3" json:"numDeviceBundleProtoBytesSent,omitempty"`
	NumAppBundleProtoBytesSent    uint64 `protobuf:"varint,18,opt,name=numAppBundleProtoBytesSent,proto3" json:"numAppBundleProtoBytesSent,omitempty"`
}

func (x *LogMetric) Reset() {
	*x = LogMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetric) ProtoMessage() {}

func (x *LogMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetric.ProtoReflect.Descriptor instead.
func (*LogMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{10}
}

func (x *LogMetric) GetNumDeviceEventsSent() uint64 {
	if x != nil {
		return x.NumDeviceEventsSent
	}
	return 0
}

func (x *LogMetric) GetNumDeviceBundlesSent() uint64 {
	if x != nil {
		return x.NumDeviceBundlesSent
	}
	return 0
}

func (x *LogMetric) GetNumAppEventsSent() uint64 {
	if x != nil {
		return x.NumAppEventsSent
	}
	return 0
}

func (x *LogMetric) GetNumAppBundlesSent() uint64 {
	if x != nil {
		return x.NumAppBundlesSent
	}
	return 0
}

func (x *LogMetric) GetNum4XxResponses() uint64 {
	if x != nil {
		return x.Num4XxResponses
	}
	return 0
}

func (x *LogMetric) GetLastDeviceBundleSendTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastDeviceBundleSendTime
	}
	return nil
}

func (x *LogMetric) GetLastAppBundleSendTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastAppBundleSendTime
	}
	return nil
}

func (x *LogMetric) GetIsLogProcessingDeferred() bool {
	if x != nil {
		return x.IsLogProcessingDeferred
	}
	return false
}

func (x *LogMetric) GetNumTimesDeferred() uint64 {
	if x != nil {
		return x.NumTimesDeferred
	}
	return 0
}

func (x *LogMetric) GetLastLogDeferTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastLogDeferTime
	}
	return nil
}

func (x *LogMetric) GetTotalDeviceLogInput() uint64 {
	if x != nil {
		return x.TotalDeviceLogInput
	}
	return 0
}

func (x *LogMetric) GetTotalAppLogInput() uint64 {
	if x != nil {
		return x.TotalAppLogInput
	}
	return 0
}

func (x *LogMetric) GetNumDeviceEventErrors() uint64 {
	if x != nil {
		return x.NumDeviceEventErrors
	}
	return 0
}

func (x *LogMetric) GetNumAppEventErrors() uint64 {
	if x != nil {
		return x.NumAppEventErrors
	}
	return 0
}

func (x *LogMetric) GetNumDeviceBundleProtoBytesSent() uint64 {
	if x != nil {
		return x.NumDeviceBundleProtoBytesSent
	}
	return 0
}

func (x *LogMetric) GetNumAppBundleProtoBytesSent() uint64 {
	if x != nil {
		return x.NumAppBundleProtoBytesSent
	}
	return 0
}

// Lisp stats
type PktStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets uint64 `protobuf:"varint,1,opt,name=Packets,proto3" json:"Packets,omitempty"`
	Bytes   uint64 `protobuf:"varint,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *PktStat) Reset() {
	*x = PktStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PktStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PktStat) ProtoMessage() {}

func (x *PktStat) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PktStat.ProtoReflect.Descriptor instead.
func (*PktStat) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{11}
}

func (x *PktStat) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *PktStat) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type RlocStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rloc                   string   `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Stats                  *PktStat `protobuf:"bytes,2,opt,name=Stats,proto3" json:"Stats,omitempty"`
	SecondsSinceLastPacket uint64   `protobuf:"varint,3,opt,name=SecondsSinceLastPacket,proto3" json:"SecondsSinceLastPacket,omitempty"`
}

func (x *RlocStats) Reset() {
	*x = RlocStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlocStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlocStats) ProtoMessage() {}

func (x *RlocStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlocStats.ProtoReflect.Descriptor instead.
func (*RlocStats) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{12}
}

func (x *RlocStats) GetRloc() string {
	if x != nil {
		return x.Rloc
	}
	return ""
}

func (x *RlocStats) GetStats() *PktStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *RlocStats) GetSecondsSinceLastPacket() uint64 {
	if x != nil {
		return x.SecondsSinceLastPacket
	}
	return 0
}

type EidStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IID              uint64       `protobuf:"varint,1,opt,name=IID,proto3" json:"IID,omitempty"`
	EID              string       `protobuf:"bytes,2,opt,name=EID,proto3" json:"EID,omitempty"`
	RlocStatsEntries []*RlocStats `protobuf:"bytes,3,rep,name=RlocStatsEntries,proto3" json:"RlocStatsEntries,omitempty"`
}

func (x *EidStats) Reset() {
	*x = EidStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EidStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EidStats) ProtoMessage() {}

func (x *EidStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EidStats.ProtoReflect.Descriptor instead.
func (*EidStats) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{13}
}

func (x *EidStats) GetIID() uint64 {
	if x != nil {
		return x.IID
	}
	return 0
}

func (x *EidStats) GetEID() string {
	if x != nil {
		return x.EID
	}
	return ""
}

func (x *EidStats) GetRlocStatsEntries() []*RlocStats {
	if x != nil {
		return x.RlocStatsEntries
	}
	return nil
}

type ZMetricLisp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encap Statistics
	EidStatsEntries    []*EidStats `protobuf:"bytes,1,rep,name=EidStatsEntries,proto3" json:"EidStatsEntries,omitempty"` // ITR Statistics
	ItrPacketSendError *PktStat    `protobuf:"bytes,2,opt,name=ItrPacketSendError,proto3" json:"ItrPacketSendError,omitempty"`
	InvalidEidError    *PktStat    `protobuf:"bytes,3,opt,name=InvalidEidError,proto3" json:"InvalidEidError,omitempty"`
	// Decap Statistics
	NoDecryptKey       *PktStat `protobuf:"bytes,4,opt,name=NoDecryptKey,proto3" json:"NoDecryptKey,omitempty"`
	OuterHeaderError   *PktStat `protobuf:"bytes,5,opt,name=OuterHeaderError,proto3" json:"OuterHeaderError,omitempty"`
	BadInnerVersion    *PktStat `protobuf:"bytes,6,opt,name=BadInnerVersion,proto3" json:"BadInnerVersion,omitempty"`
	GoodPackets        *PktStat `protobuf:"bytes,7,opt,name=GoodPackets,proto3" json:"GoodPackets,omitempty"`
	ICVError           *PktStat `protobuf:"bytes,8,opt,name=ICVError,proto3" json:"ICVError,omitempty"`
	LispHeaderError    *PktStat `protobuf:"bytes,9,opt,name=LispHeaderError,proto3" json:"LispHeaderError,omitempty"`
	CheckSumError      *PktStat `protobuf:"bytes,10,opt,name=CheckSumError,proto3" json:"CheckSumError,omitempty"`
	DecapReInjectError *PktStat `protobuf:"bytes,11,opt,name=DecapReInjectError,proto3" json:"DecapReInjectError,omitempty"`
	DecryptError       *PktStat `protobuf:"bytes,12,opt,name=DecryptError,proto3" json:"DecryptError,omitempty"`
}

func (x *ZMetricLisp) Reset() {
	*x = ZMetricLisp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricLisp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricLisp) ProtoMessage() {}

func (x *ZMetricLisp) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricLisp.ProtoReflect.Descriptor instead.
func (*ZMetricLisp) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{14}
}

func (x *ZMetricLisp) GetEidStatsEntries() []*EidStats {
	if x != nil {
		return x.EidStatsEntries
	}
	return nil
}

func (x *ZMetricLisp) GetItrPacketSendError() *PktStat {
	if x != nil {
		return x.ItrPacketSendError
	}
	return nil
}

func (x *ZMetricLisp) GetInvalidEidError() *PktStat {
	if x != nil {
		return x.InvalidEidError
	}
	return nil
}

func (x *ZMetricLisp) GetNoDecryptKey() *PktStat {
	if x != nil {
		return x.NoDecryptKey
	}
	return nil
}

func (x *ZMetricLisp) GetOuterHeaderError() *PktStat {
	if x != nil {
		return x.OuterHeaderError
	}
	return nil
}

func (x *ZMetricLisp) GetBadInnerVersion() *PktStat {
	if x != nil {
		return x.BadInnerVersion
	}
	return nil
}

func (x *ZMetricLisp) GetGoodPackets() *PktStat {
	if x != nil {
		return x.GoodPackets
	}
	return nil
}

func (x *ZMetricLisp) GetICVError() *PktStat {
	if x != nil {
		return x.ICVError
	}
	return nil
}

func (x *ZMetricLisp) GetLispHeaderError() *PktStat {
	if x != nil {
		return x.LispHeaderError
	}
	return nil
}

func (x *ZMetricLisp) GetCheckSumError() *PktStat {
	if x != nil {
		return x.CheckSumError
	}
	return nil
}

func (x *ZMetricLisp) GetDecapReInjectError() *PktStat {
	if x != nil {
		return x.DecapReInjectError
	}
	return nil
}

func (x *ZMetricLisp) GetDecryptError() *PktStat {
	if x != nil {
		return x.DecryptError
	}
	return nil
}

// Vpn Stats
type ZMetricConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPkts        *PktStat `protobuf:"bytes,1,opt,name=InPkts,proto3" json:"InPkts,omitempty"`
	OutPkts       *PktStat `protobuf:"bytes,2,opt,name=OutPkts,proto3" json:"OutPkts,omitempty"`
	ErrPkts       *PktStat `protobuf:"bytes,3,opt,name=ErrPkts,proto3" json:"ErrPkts,omitempty"`
	CarierErrPkts *PktStat `protobuf:"bytes,4,opt,name=CarierErrPkts,proto3" json:"CarierErrPkts,omitempty"`
}

func (x *ZMetricConn) Reset() {
	*x = ZMetricConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricConn) ProtoMessage() {}

func (x *ZMetricConn) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricConn.ProtoReflect.Descriptor instead.
func (*ZMetricConn) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{15}
}

func (x *ZMetricConn) GetInPkts() *PktStat {
	if x != nil {
		return x.InPkts
	}
	return nil
}

func (x *ZMetricConn) GetOutPkts() *PktStat {
	if x != nil {
		return x.OutPkts
	}
	return nil
}

func (x *ZMetricConn) GetErrPkts() *PktStat {
	if x != nil {
		return x.ErrPkts
	}
	return nil
}

func (x *ZMetricConn) GetCarierErrPkts() *PktStat {
	if x != nil {
		return x.CarierErrPkts
	}
	return nil
}

type ZMetricVpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnStat *ZMetricConn `protobuf:"bytes,1,opt,name=ConnStat,proto3" json:"ConnStat,omitempty"`
	IkeStat  *ZMetricConn `protobuf:"bytes,2,opt,name=IkeStat,proto3" json:"IkeStat,omitempty"`
	NatTStat *ZMetricConn `protobuf:"bytes,3,opt,name=NatTStat,proto3" json:"NatTStat,omitempty"`
	EspStat  *ZMetricConn `protobuf:"bytes,4,opt,name=EspStat,proto3" json:"EspStat,omitempty"`
}

func (x *ZMetricVpn) Reset() {
	*x = ZMetricVpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricVpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricVpn) ProtoMessage() {}

func (x *ZMetricVpn) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricVpn.ProtoReflect.Descriptor instead.
func (*ZMetricVpn) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{16}
}

func (x *ZMetricVpn) GetConnStat() *ZMetricConn {
	if x != nil {
		return x.ConnStat
	}
	return nil
}

func (x *ZMetricVpn) GetIkeStat() *ZMetricConn {
	if x != nil {
		return x.IkeStat
	}
	return nil
}

func (x *ZMetricVpn) GetNatTStat() *ZMetricConn {
	if x != nil {
		return x.NatTStat
	}
	return nil
}

func (x *ZMetricVpn) GetEspStat() *ZMetricConn {
	if x != nil {
		return x.EspStat
	}
	return nil
}

// For other services with no specific metrics
type ZMetricNone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ZMetricNone) Reset() {
	*x = ZMetricNone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricNone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricNone) ProtoMessage() {}

func (x *ZMetricNone) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricNone.ProtoReflect.Descriptor instead.
func (*ZMetricNone) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{17}
}

// flow stats
type ZMetricFlowLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Link:
	//	*ZMetricFlowLink_SubNet
	//	*ZMetricFlowLink_Eid
	Link  isZMetricFlowLink_Link `protobuf_oneof:"Link"`
	SpiId string                 `protobuf:"bytes,3,opt,name=spiId,proto3" json:"spiId,omitempty"` // IpSec: SpiId
}

func (x *ZMetricFlowLink) Reset() {
	*x = ZMetricFlowLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricFlowLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricFlowLink) ProtoMessage() {}

func (x *ZMetricFlowLink) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricFlowLink.ProtoReflect.Descriptor instead.
func (*ZMetricFlowLink) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{18}
}

func (m *ZMetricFlowLink) GetLink() isZMetricFlowLink_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (x *ZMetricFlowLink) GetSubNet() string {
	if x, ok := x.GetLink().(*ZMetricFlowLink_SubNet); ok {
		return x.SubNet
	}
	return ""
}

func (x *ZMetricFlowLink) GetEid() string {
	if x, ok := x.GetLink().(*ZMetricFlowLink_Eid); ok {
		return x.Eid
	}
	return ""
}

func (x *ZMetricFlowLink) GetSpiId() string {
	if x != nil {
		return x.SpiId
	}
	return ""
}

type isZMetricFlowLink_Link interface {
	isZMetricFlowLink_Link()
}

type ZMetricFlowLink_SubNet struct {
	SubNet string `protobuf:"bytes,1,opt,name=subNet,proto3,oneof"` // IpSec: Subnet
}

type ZMetricFlowLink_Eid struct {
	Eid string `protobuf:"bytes,2,opt,name=eid,proto3,oneof"` // LISP: EID
}

func (*ZMetricFlowLink_SubNet) isZMetricFlowLink_Link() {}

func (*ZMetricFlowLink_Eid) isZMetricFlowLink_Link() {}

type ZMetricFlowEndPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Endpoint:
	//	*ZMetricFlowEndPoint_IpAddr
	//	*ZMetricFlowEndPoint_Rloc
	Endpoint isZMetricFlowEndPoint_Endpoint `protobuf_oneof:"Endpoint"`
	Link     []*ZMetricFlowLink             `protobuf:"bytes,5,rep,name=link,proto3" json:"link,omitempty"`
	Stats    *PktStat                       `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"` // traffic
}

func (x *ZMetricFlowEndPoint) Reset() {
	*x = ZMetricFlowEndPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricFlowEndPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricFlowEndPoint) ProtoMessage() {}

func (x *ZMetricFlowEndPoint) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricFlowEndPoint.ProtoReflect.Descriptor instead.
func (*ZMetricFlowEndPoint) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{19}
}

func (m *ZMetricFlowEndPoint) GetEndpoint() isZMetricFlowEndPoint_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (x *ZMetricFlowEndPoint) GetIpAddr() string {
	if x, ok := x.GetEndpoint().(*ZMetricFlowEndPoint_IpAddr); ok {
		return x.IpAddr
	}
	return ""
}

func (x *ZMetricFlowEndPoint) GetRloc() string {
	if x, ok := x.GetEndpoint().(*ZMetricFlowEndPoint_Rloc); ok {
		return x.Rloc
	}
	return ""
}

func (x *ZMetricFlowEndPoint) GetLink() []*ZMetricFlowLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ZMetricFlowEndPoint) GetStats() *PktStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type isZMetricFlowEndPoint_Endpoint interface {
	isZMetricFlowEndPoint_Endpoint()
}

type ZMetricFlowEndPoint_IpAddr struct {
	IpAddr string `protobuf:"bytes,1,opt,name=ipAddr,proto3,oneof"` // IpSec: Endpoint Ip Address
}

type ZMetricFlowEndPoint_Rloc struct {
	Rloc string `protobuf:"bytes,2,opt,name=rloc,proto3,oneof"` // LISP: RLOC
}

func (*ZMetricFlowEndPoint_IpAddr) isZMetricFlowEndPoint_Endpoint() {}

func (*ZMetricFlowEndPoint_Rloc) isZMetricFlowEndPoint_Endpoint() {}

type ZMetricFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`            // IpSec Conn-Id/Lisp
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`        // IpSec Tun-Name
	Type      uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`       // IpSec-Vpn or, LISP
	Iid       uint64                 `protobuf:"varint,4,opt,name=iid,proto3" json:"iid,omitempty"`         // LISP: IID
	EstTime   uint64                 `protobuf:"varint,5,opt,name=estTime,proto3" json:"estTime,omitempty"` // in seconds
	LEndPoint *ZMetricFlowEndPoint   `protobuf:"bytes,10,opt,name=lEndPoint,proto3" json:"lEndPoint,omitempty"`
	REndPoint []*ZMetricFlowEndPoint `protobuf:"bytes,11,rep,name=rEndPoint,proto3" json:"rEndPoint,omitempty"`
}

func (x *ZMetricFlow) Reset() {
	*x = ZMetricFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricFlow) ProtoMessage() {}

func (x *ZMetricFlow) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricFlow.ProtoReflect.Descriptor instead.
func (*ZMetricFlow) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{20}
}

func (x *ZMetricFlow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZMetricFlow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZMetricFlow) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ZMetricFlow) GetIid() uint64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *ZMetricFlow) GetEstTime() uint64 {
	if x != nil {
		return x.EstTime
	}
	return 0
}

func (x *ZMetricFlow) GetLEndPoint() *ZMetricFlowEndPoint {
	if x != nil {
		return x.LEndPoint
	}
	return nil
}

func (x *ZMetricFlow) GetREndPoint() []*ZMetricFlowEndPoint {
	if x != nil {
		return x.REndPoint
	}
	return nil
}

type ZMetricLispGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encap/ITR Statistics
	ItrPacketSendError *PktStat `protobuf:"bytes,2,opt,name=ItrPacketSendError,proto3" json:"ItrPacketSendError,omitempty"`
	InvalidEidError    *PktStat `protobuf:"bytes,3,opt,name=InvalidEidError,proto3" json:"InvalidEidError,omitempty"`
	// Decap/ETR Statistics
	NoDecryptKey       *PktStat `protobuf:"bytes,4,opt,name=NoDecryptKey,proto3" json:"NoDecryptKey,omitempty"`
	OuterHeaderError   *PktStat `protobuf:"bytes,5,opt,name=OuterHeaderError,proto3" json:"OuterHeaderError,omitempty"`
	BadInnerVersion    *PktStat `protobuf:"bytes,6,opt,name=BadInnerVersion,proto3" json:"BadInnerVersion,omitempty"`
	GoodPackets        *PktStat `protobuf:"bytes,7,opt,name=GoodPackets,proto3" json:"GoodPackets,omitempty"`
	ICVError           *PktStat `protobuf:"bytes,8,opt,name=ICVError,proto3" json:"ICVError,omitempty"`
	LispHeaderError    *PktStat `protobuf:"bytes,9,opt,name=LispHeaderError,proto3" json:"LispHeaderError,omitempty"`
	CheckSumError      *PktStat `protobuf:"bytes,10,opt,name=CheckSumError,proto3" json:"CheckSumError,omitempty"`
	DecapReInjectError *PktStat `protobuf:"bytes,11,opt,name=DecapReInjectError,proto3" json:"DecapReInjectError,omitempty"`
	DecryptError       *PktStat `protobuf:"bytes,12,opt,name=DecryptError,proto3" json:"DecryptError,omitempty"`
}

func (x *ZMetricLispGlobal) Reset() {
	*x = ZMetricLispGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricLispGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricLispGlobal) ProtoMessage() {}

func (x *ZMetricLispGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricLispGlobal.ProtoReflect.Descriptor instead.
func (*ZMetricLispGlobal) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{21}
}

func (x *ZMetricLispGlobal) GetItrPacketSendError() *PktStat {
	if x != nil {
		return x.ItrPacketSendError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetInvalidEidError() *PktStat {
	if x != nil {
		return x.InvalidEidError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetNoDecryptKey() *PktStat {
	if x != nil {
		return x.NoDecryptKey
	}
	return nil
}

func (x *ZMetricLispGlobal) GetOuterHeaderError() *PktStat {
	if x != nil {
		return x.OuterHeaderError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetBadInnerVersion() *PktStat {
	if x != nil {
		return x.BadInnerVersion
	}
	return nil
}

func (x *ZMetricLispGlobal) GetGoodPackets() *PktStat {
	if x != nil {
		return x.GoodPackets
	}
	return nil
}

func (x *ZMetricLispGlobal) GetICVError() *PktStat {
	if x != nil {
		return x.ICVError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetLispHeaderError() *PktStat {
	if x != nil {
		return x.LispHeaderError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetCheckSumError() *PktStat {
	if x != nil {
		return x.CheckSumError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetDecapReInjectError() *PktStat {
	if x != nil {
		return x.DecapReInjectError
	}
	return nil
}

func (x *ZMetricLispGlobal) GetDecryptError() *PktStat {
	if x != nil {
		return x.DecryptError
	}
	return nil
}

type NetworkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPackets uint64 `protobuf:"varint,1,opt,name=totalPackets,proto3" json:"totalPackets,omitempty"`
	Errors       uint64 `protobuf:"varint,2,opt,name=errors,proto3" json:"errors,omitempty"`
	Drops        uint64 `protobuf:"varint,3,opt,name=drops,proto3" json:"drops,omitempty"`
	TotalBytes   uint64 `protobuf:"varint,4,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
}

func (x *NetworkStats) Reset() {
	*x = NetworkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStats) ProtoMessage() {}

func (x *NetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStats.ProtoReflect.Descriptor instead.
func (*NetworkStats) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkStats) GetTotalPackets() uint64 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *NetworkStats) GetErrors() uint64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *NetworkStats) GetDrops() uint64 {
	if x != nil {
		return x.Drops
	}
	return 0
}

func (x *NetworkStats) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

type ZMetricNetworkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rx *NetworkStats `protobuf:"bytes,1,opt,name=rx,proto3" json:"rx,omitempty"`
	Tx *NetworkStats `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *ZMetricNetworkStats) Reset() {
	*x = ZMetricNetworkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricNetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricNetworkStats) ProtoMessage() {}

func (x *ZMetricNetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricNetworkStats.ProtoReflect.Descriptor instead.
func (*ZMetricNetworkStats) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{23}
}

func (x *ZMetricNetworkStats) GetRx() *NetworkStats {
	if x != nil {
		return x.Rx
	}
	return nil
}

func (x *ZMetricNetworkStats) GetTx() *NetworkStats {
	if x != nil {
		return x.Tx
	}
	return nil
}

type ZProbeNIMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIntf    string                              `protobuf:"bytes,1,opt,name=currentIntf,proto3" json:"currentIntf,omitempty"`        // current picked uplink interface
	RemoteEndpoint string                              `protobuf:"bytes,2,opt,name=remoteEndpoint,proto3" json:"remoteEndpoint,omitempty"`  // remote URL or IP address for probing
	PingIntv       uint32                              `protobuf:"varint,3,opt,name=pingIntv,proto3" json:"pingIntv,omitempty"`             // local ping interval in seconds
	RemotePingIntv uint32                              `protobuf:"varint,4,opt,name=remotePingIntv,proto3" json:"remotePingIntv,omitempty"` // remote probe interval in seconds
	UplinkCnt      uint32                              `protobuf:"varint,5,opt,name=uplinkCnt,proto3" json:"uplinkCnt,omitempty"`           // total number of uplink intf in consideration
	IntfMetric     []*ZProbeNIMetrics_ZProbeIntfMetric `protobuf:"bytes,10,rep,name=intfMetric,proto3" json:"intfMetric,omitempty"`         // per uplink intf probing stats
}

func (x *ZProbeNIMetrics) Reset() {
	*x = ZProbeNIMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZProbeNIMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZProbeNIMetrics) ProtoMessage() {}

func (x *ZProbeNIMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZProbeNIMetrics.ProtoReflect.Descriptor instead.
func (*ZProbeNIMetrics) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{24}
}

func (x *ZProbeNIMetrics) GetCurrentIntf() string {
	if x != nil {
		return x.CurrentIntf
	}
	return ""
}

func (x *ZProbeNIMetrics) GetRemoteEndpoint() string {
	if x != nil {
		return x.RemoteEndpoint
	}
	return ""
}

func (x *ZProbeNIMetrics) GetPingIntv() uint32 {
	if x != nil {
		return x.PingIntv
	}
	return 0
}

func (x *ZProbeNIMetrics) GetRemotePingIntv() uint32 {
	if x != nil {
		return x.RemotePingIntv
	}
	return 0
}

func (x *ZProbeNIMetrics) GetUplinkCnt() uint32 {
	if x != nil {
		return x.UplinkCnt
	}
	return 0
}

func (x *ZProbeNIMetrics) GetIntfMetric() []*ZProbeNIMetrics_ZProbeIntfMetric {
	if x != nil {
		return x.IntfMetric
	}
	return nil
}

type ZMetricNetworkInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID      string           `protobuf:"bytes,2,opt,name=networkID,proto3" json:"networkID,omitempty"` // UUID
	NetworkVersion string           `protobuf:"bytes,3,opt,name=networkVersion,proto3" json:"networkVersion,omitempty"`
	InstType       uint32           `protobuf:"varint,5,opt,name=instType,proto3" json:"instType,omitempty"`       // ZNetworkInstType
	Displayname    string           `protobuf:"bytes,6,opt,name=displayname,proto3" json:"displayname,omitempty"`  // From NetworkInstance config
	Activated      bool             `protobuf:"varint,7,opt,name=activated,proto3" json:"activated,omitempty"`     // Forwarding enabled
	Network        []*NetworkMetric `protobuf:"bytes,10,rep,name=network,proto3" json:"network,omitempty"`         // Aggregate counters for bridge
	ProbeMetric    *ZProbeNIMetrics `protobuf:"bytes,12,opt,name=probeMetric,proto3" json:"probeMetric,omitempty"` // NI uplink probing stats
	// Types that are assignable to InstanceContent:
	//	*ZMetricNetworkInstance_Vpnm
	//	*ZMetricNetworkInstance_Lispm
	//	*ZMetricNetworkInstance_Nonem
	InstanceContent isZMetricNetworkInstance_InstanceContent `protobuf_oneof:"InstanceContent"`
	FlowStats       []*ZMetricFlow                           `protobuf:"bytes,30,rep,name=flowStats,proto3" json:"flowStats,omitempty"`
	LispGlobalStats *ZMetricLispGlobal                       `protobuf:"bytes,31,opt,name=lispGlobalStats,proto3" json:"lispGlobalStats,omitempty"`
	NetworkStats    *ZMetricNetworkStats                     `protobuf:"bytes,40,opt,name=networkStats,proto3" json:"networkStats,omitempty"` // Network bridge interface statistics
}

func (x *ZMetricNetworkInstance) Reset() {
	*x = ZMetricNetworkInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricNetworkInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricNetworkInstance) ProtoMessage() {}

func (x *ZMetricNetworkInstance) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricNetworkInstance.ProtoReflect.Descriptor instead.
func (*ZMetricNetworkInstance) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{25}
}

func (x *ZMetricNetworkInstance) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *ZMetricNetworkInstance) GetNetworkVersion() string {
	if x != nil {
		return x.NetworkVersion
	}
	return ""
}

func (x *ZMetricNetworkInstance) GetInstType() uint32 {
	if x != nil {
		return x.InstType
	}
	return 0
}

func (x *ZMetricNetworkInstance) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *ZMetricNetworkInstance) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *ZMetricNetworkInstance) GetNetwork() []*NetworkMetric {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetProbeMetric() *ZProbeNIMetrics {
	if x != nil {
		return x.ProbeMetric
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetInstanceContent() isZMetricNetworkInstance_InstanceContent {
	if m != nil {
		return m.InstanceContent
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetVpnm() *ZMetricVpn {
	if x, ok := x.GetInstanceContent().(*ZMetricNetworkInstance_Vpnm); ok {
		return x.Vpnm
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetLispm() *ZMetricLisp {
	if x, ok := x.GetInstanceContent().(*ZMetricNetworkInstance_Lispm); ok {
		return x.Lispm
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetNonem() *ZMetricNone {
	if x, ok := x.GetInstanceContent().(*ZMetricNetworkInstance_Nonem); ok {
		return x.Nonem
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetFlowStats() []*ZMetricFlow {
	if x != nil {
		return x.FlowStats
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetLispGlobalStats() *ZMetricLispGlobal {
	if x != nil {
		return x.LispGlobalStats
	}
	return nil
}

func (x *ZMetricNetworkInstance) GetNetworkStats() *ZMetricNetworkStats {
	if x != nil {
		return x.NetworkStats
	}
	return nil
}

type isZMetricNetworkInstance_InstanceContent interface {
	isZMetricNetworkInstance_InstanceContent()
}

type ZMetricNetworkInstance_Vpnm struct {
	Vpnm *ZMetricVpn `protobuf:"bytes,20,opt,name=vpnm,proto3,oneof"`
}

type ZMetricNetworkInstance_Lispm struct {
	Lispm *ZMetricLisp `protobuf:"bytes,21,opt,name=lispm,proto3,oneof"`
}

type ZMetricNetworkInstance_Nonem struct {
	Nonem *ZMetricNone `protobuf:"bytes,22,opt,name=nonem,proto3,oneof"`
}

func (*ZMetricNetworkInstance_Vpnm) isZMetricNetworkInstance_InstanceContent() {}

func (*ZMetricNetworkInstance_Lispm) isZMetricNetworkInstance_InstanceContent() {}

func (*ZMetricNetworkInstance_Nonem) isZMetricNetworkInstance_InstanceContent() {}

type ZMetricVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	ReadBytes   uint64 `protobuf:"varint,3,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	WriteBytes  uint64 `protobuf:"varint,4,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
	ReadCount   uint64 `protobuf:"varint,5,opt,name=readCount,proto3" json:"readCount,omitempty"`
	WriteCount  uint64 `protobuf:"varint,6,opt,name=writeCount,proto3" json:"writeCount,omitempty"`
	TotalBytes  uint64 `protobuf:"varint,7,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
	UsedBytes   uint64 `protobuf:"varint,8,opt,name=usedBytes,proto3" json:"usedBytes,omitempty"`
	FreeBytes   uint64 `protobuf:"varint,9,opt,name=freeBytes,proto3" json:"freeBytes,omitempty"`
}

func (x *ZMetricVolume) Reset() {
	*x = ZMetricVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricVolume) ProtoMessage() {}

func (x *ZMetricVolume) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricVolume.ProtoReflect.Descriptor instead.
func (*ZMetricVolume) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{26}
}

func (x *ZMetricVolume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZMetricVolume) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ZMetricVolume) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *ZMetricVolume) GetWriteBytes() uint64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *ZMetricVolume) GetReadCount() uint64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *ZMetricVolume) GetWriteCount() uint64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *ZMetricVolume) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *ZMetricVolume) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *ZMetricVolume) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

// This is the request payload for POST /api/v1/edgeDevice/metrics
// ZMetricMsg carries periodic metrics; typically one message is sent for
// all of the objects on a device (the device itself plus all of the app instances
// and all of the network instances). As such there is normally no need to
// retransmit these messages if there is some network failure; the next periodic
// message will include the cumulative numbers.
// The message is assumed to be protected by a TLS session bound to the
// device certificate.
type ZMetricMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevID string `protobuf:"bytes,1,opt,name=devID,proto3" json:"devID,omitempty"`
	// deprecated = 2;
	AtTimeStamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=atTimeStamp,proto3" json:"atTimeStamp,omitempty"`
	// Types that are assignable to MetricContent:
	//	*ZMetricMsg_Dm
	MetricContent isZMetricMsg_MetricContent `protobuf_oneof:"MetricContent"`
	Am            []*AppMetric               `protobuf:"bytes,5,rep,name=am,proto3" json:"am,omitempty"`
	// deprecated = 6;
	Nm []*ZMetricNetworkInstance `protobuf:"bytes,7,rep,name=nm,proto3" json:"nm,omitempty"`
	Vm []*ZMetricVolume          `protobuf:"bytes,8,rep,name=vm,proto3" json:"vm,omitempty"`
}

func (x *ZMetricMsg) Reset() {
	*x = ZMetricMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZMetricMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMetricMsg) ProtoMessage() {}

func (x *ZMetricMsg) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMetricMsg.ProtoReflect.Descriptor instead.
func (*ZMetricMsg) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{27}
}

func (x *ZMetricMsg) GetDevID() string {
	if x != nil {
		return x.DevID
	}
	return ""
}

func (x *ZMetricMsg) GetAtTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.AtTimeStamp
	}
	return nil
}

func (m *ZMetricMsg) GetMetricContent() isZMetricMsg_MetricContent {
	if m != nil {
		return m.MetricContent
	}
	return nil
}

func (x *ZMetricMsg) GetDm() *DeviceMetric {
	if x, ok := x.GetMetricContent().(*ZMetricMsg_Dm); ok {
		return x.Dm
	}
	return nil
}

func (x *ZMetricMsg) GetAm() []*AppMetric {
	if x != nil {
		return x.Am
	}
	return nil
}

func (x *ZMetricMsg) GetNm() []*ZMetricNetworkInstance {
	if x != nil {
		return x.Nm
	}
	return nil
}

func (x *ZMetricMsg) GetVm() []*ZMetricVolume {
	if x != nil {
		return x.Vm
	}
	return nil
}

type isZMetricMsg_MetricContent interface {
	isZMetricMsg_MetricContent()
}

type ZMetricMsg_Dm struct {
	Dm *DeviceMetric `protobuf:"bytes,4,opt,name=dm,proto3,oneof"`
}

func (*ZMetricMsg_Dm) isZMetricMsg_MetricContent() {}

type ZProbeNIMetrics_ZProbeIntfMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfName           string `protobuf:"bytes,11,opt,name=intfName,proto3" json:"intfName,omitempty"`                      // uplink interface name, e.g. eth1, wlan0
	GatewayNexhtop     string `protobuf:"bytes,12,opt,name=gatewayNexhtop,proto3" json:"gatewayNexhtop,omitempty"`          // intf nexthop IP address
	GatewayUP          bool   `protobuf:"varint,13,opt,name=gatewayUP,proto3" json:"gatewayUP,omitempty"`                   // local gateway status UP or not
	RemoteHostUP       bool   `protobuf:"varint,14,opt,name=remoteHostUP,proto3" json:"remoteHostUP,omitempty"`             // remote url/IP status UP or not
	NexthopUpCount     uint32 `protobuf:"varint,15,opt,name=nexthopUpCount,proto3" json:"nexthopUpCount,omitempty"`         // local ping success count
	NexthopDownCount   uint32 `protobuf:"varint,16,opt,name=nexthopDownCount,proto3" json:"nexthopDownCount,omitempty"`     // local ping failure count
	RemoteUpCount      uint32 `protobuf:"varint,17,opt,name=remoteUpCount,proto3" json:"remoteUpCount,omitempty"`           // remote probing success count
	RemoteDownCount    uint32 `protobuf:"varint,18,opt,name=remoteDownCount,proto3" json:"remoteDownCount,omitempty"`       // remote probing failure count
	RemoteProbeLatency uint32 `protobuf:"varint,19,opt,name=remoteProbeLatency,proto3" json:"remoteProbeLatency,omitempty"` // remote host probe latency in msec
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) Reset() {
	*x = ZProbeNIMetrics_ZProbeIntfMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_metrics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZProbeNIMetrics_ZProbeIntfMetric) ProtoMessage() {}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_metrics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZProbeNIMetrics_ZProbeIntfMetric.ProtoReflect.Descriptor instead.
func (*ZProbeNIMetrics_ZProbeIntfMetric) Descriptor() ([]byte, []int) {
	return file_metrics_metrics_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetIntfName() string {
	if x != nil {
		return x.IntfName
	}
	return ""
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetGatewayNexhtop() string {
	if x != nil {
		return x.GatewayNexhtop
	}
	return ""
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetGatewayUP() bool {
	if x != nil {
		return x.GatewayUP
	}
	return false
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteHostUP() bool {
	if x != nil {
		return x.RemoteHostUP
	}
	return false
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetNexthopUpCount() uint32 {
	if x != nil {
		return x.NexthopUpCount
	}
	return 0
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetNexthopDownCount() uint32 {
	if x != nil {
		return x.NexthopDownCount
	}
	return 0
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteUpCount() uint32 {
	if x != nil {
		return x.RemoteUpCount
	}
	return 0
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteDownCount() uint32 {
	if x != nil {
		return x.RemoteDownCount
	}
	return 0
}

func (x *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteProbeLatency() uint32 {
	if x != nil {
		return x.RemoteProbeLatency
	}
	return 0
}

var File_metrics_metrics_proto protoreflect.FileDescriptor

var file_metrics_metrics_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xcd, 0x03, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x50, 0x6b, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x78, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x78, 0x41, 0x63, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x78, 0x41, 0x63, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x78, 0x41, 0x63, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x78, 0x41, 0x63, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x74, 0x78, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x78,
	0x41, 0x63, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x78, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x72, 0x78, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x7a, 0x65, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x72, 0x6c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xfc, 0x01,
	0x0a, 0x0e, 0x75, 0x72, 0x6c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x42, 0x79,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x06,
	0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xdc, 0x03, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x08, 0x7a, 0x65, 0x64, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x7a, 0x65, 0x64,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x08, 0x7a, 0x65, 0x64,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x70, 0x43,
	0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x42, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x4d, 0x42, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x70, 0x70,
	0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x42,
	0x12, 0x45, 0x0a, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x1c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x44,
	0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x69, 0x72, 0x74, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x70, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x93, 0x07, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x34, 0x78,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x34, 0x78, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x18, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x69,
	0x73, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x66, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x22,
	0x39, 0x0a, 0x07, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x52, 0x6c,
	0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x08, 0x45, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x49, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x45, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x10, 0x52, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x52, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x52, 0x6c, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xe6, 0x04, 0x0a, 0x0b,
	0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0f, 0x45,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0f, 0x45, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x12, 0x49, 0x74, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x12, 0x49, 0x74, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x69, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x69, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x0c, 0x4e, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c,
	0x4e, 0x6f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x10, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x42, 0x61, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x42, 0x61, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x49, 0x43, 0x56, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08,
	0x49, 0x43, 0x56, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x4c, 0x69, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x12,
	0x44, 0x65, 0x63, 0x61, 0x70, 0x52, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x12, 0x44, 0x65, 0x63, 0x61, 0x70, 0x52, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x20, 0x0a, 0x06, 0x49, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x06,
	0x49, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x50, 0x6b, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x45, 0x72, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x0d, 0x43, 0x61, 0x72, 0x69, 0x65, 0x72, 0x45, 0x72, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0d, 0x43, 0x61, 0x72, 0x69, 0x65, 0x72, 0x45, 0x72, 0x72, 0x50, 0x6b, 0x74, 0x73, 0x22, 0xb0,
	0x01, 0x0a, 0x0a, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x70, 0x6e, 0x12, 0x28, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x08, 0x43,
	0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x49, 0x6b, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x07, 0x49, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x28, 0x0a, 0x08, 0x4e, 0x61, 0x74, 0x54, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x08, 0x4e, 0x61, 0x74, 0x54, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x73, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x07, 0x45, 0x73, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x65,
	0x22, 0x5d, 0x0a, 0x0f, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x22,
	0x97, 0x01, 0x0a, 0x13, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x6c, 0x6f, 0x63, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0b, 0x5a, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x09, 0x6c, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb7, 0x04, 0x0a, 0x11, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x69, 0x73, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x12, 0x49,
	0x74, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x12, 0x49, 0x74, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x69, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x45, 0x69, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x4e, 0x6f, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x4e, 0x6f, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x10, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x0f, 0x42, 0x61, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x0f, 0x42, 0x61, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x08, 0x49, 0x43, 0x56, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x49, 0x43, 0x56, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x4c, 0x69, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x61, 0x70,
	0x52, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x12, 0x44,
	0x65, 0x63, 0x61, 0x70, 0x52, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6b, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x72, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x02, 0x72, 0x78, 0x12, 0x1d, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x02, 0x74, 0x78, 0x22, 0xef, 0x04, 0x0a, 0x0f, 0x5a, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x4e, 0x49, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x76, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x66, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x5a, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x4e, 0x49, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x5a, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0xec, 0x02, 0x0a, 0x10, 0x5a,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x68, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x68,
	0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x50,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55,
	0x50, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x55,
	0x50, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x55, 0x50, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbe, 0x04, 0x0a, 0x16, 0x5a, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x32, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x5a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4e, 0x49,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x70, 0x6e, 0x6d, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x70, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x76, 0x70, 0x6e, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x70, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x70, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x70, 0x6d, 0x12, 0x24, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x65, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x0f, 0x6c, 0x69,
	0x73, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x5a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x5a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x44, 0x12,
	0x3c, 0x0a, 0x0b, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a,
	0x02, 0x64, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x02, 0x64, 0x6d, 0x12, 0x1a,
	0x0a, 0x02, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x02, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x6e, 0x6d,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x02, 0x6e, 0x6d, 0x12, 0x1e, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x5a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x02, 0x76, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2a, 0x32, 0x0a, 0x0c, 0x5a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x6d, 0x4e, 0x6f, 0x70, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x5a, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x5a, 0x6d, 0x41, 0x70, 0x70, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x75,
	0x67, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x42, 0x3f, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65,
	0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metrics_metrics_proto_rawDescOnce sync.Once
	file_metrics_metrics_proto_rawDescData = file_metrics_metrics_proto_rawDesc
)

func file_metrics_metrics_proto_rawDescGZIP() []byte {
	file_metrics_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_metrics_metrics_proto_rawDescData)
	})
	return file_metrics_metrics_proto_rawDescData
}

var file_metrics_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metrics_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_metrics_metrics_proto_goTypes = []interface{}{
	(ZmetricTypes)(0),                        // 0: ZmetricTypes
	(MetricItemType)(0),                      // 1: MetricItemType
	(*MemoryMetric)(nil),                     // 2: memoryMetric
	(*NetworkMetric)(nil),                    // 3: networkMetric
	(*ZedcloudMetric)(nil),                   // 4: zedcloudMetric
	(*UrlcloudMetric)(nil),                   // 5: urlcloudMetric
	(*AppCpuMetric)(nil),                     // 6: appCpuMetric
	(*DeviceMetric)(nil),                     // 7: deviceMetric
	(*MetricItem)(nil),                       // 8: MetricItem
	(*DiskMetric)(nil),                       // 9: diskMetric
	(*AppDiskMetric)(nil),                    // 10: appDiskMetric
	(*AppMetric)(nil),                        // 11: appMetric
	(*LogMetric)(nil),                        // 12: logMetric
	(*PktStat)(nil),                          // 13: PktStat
	(*RlocStats)(nil),                        // 14: RlocStats
	(*EidStats)(nil),                         // 15: EidStats
	(*ZMetricLisp)(nil),                      // 16: ZMetricLisp
	(*ZMetricConn)(nil),                      // 17: ZMetricConn
	(*ZMetricVpn)(nil),                       // 18: ZMetricVpn
	(*ZMetricNone)(nil),                      // 19: ZMetricNone
	(*ZMetricFlowLink)(nil),                  // 20: ZMetricFlowLink
	(*ZMetricFlowEndPoint)(nil),              // 21: ZMetricFlowEndPoint
	(*ZMetricFlow)(nil),                      // 22: ZMetricFlow
	(*ZMetricLispGlobal)(nil),                // 23: ZMetricLispGlobal
	(*NetworkStats)(nil),                     // 24: NetworkStats
	(*ZMetricNetworkStats)(nil),              // 25: ZMetricNetworkStats
	(*ZProbeNIMetrics)(nil),                  // 26: ZProbeNIMetrics
	(*ZMetricNetworkInstance)(nil),           // 27: ZMetricNetworkInstance
	(*ZMetricVolume)(nil),                    // 28: ZMetricVolume
	(*ZMetricMsg)(nil),                       // 29: ZMetricMsg
	(*ZProbeNIMetrics_ZProbeIntfMetric)(nil), // 30: ZProbeNIMetrics.ZProbeIntfMetric
	(*timestamp.Timestamp)(nil),              // 31: google.protobuf.Timestamp
}
var file_metrics_metrics_proto_depIdxs = []int32{
	31, // 0: zedcloudMetric.lastFailure:type_name -> google.protobuf.Timestamp
	31, // 1: zedcloudMetric.lastSuccess:type_name -> google.protobuf.Timestamp
	5,  // 2: zedcloudMetric.urlMetrics:type_name -> urlcloudMetric
	31, // 3: appCpuMetric.upTime:type_name -> google.protobuf.Timestamp
	2,  // 4: deviceMetric.memory:type_name -> memoryMetric
	3,  // 5: deviceMetric.network:type_name -> networkMetric
	4,  // 6: deviceMetric.zedcloud:type_name -> zedcloudMetric
	9,  // 7: deviceMetric.disk:type_name -> diskMetric
	6,  // 8: deviceMetric.cpuMetric:type_name -> appCpuMetric
	8,  // 9: deviceMetric.metricItems:type_name -> MetricItem
	2,  // 10: deviceMetric.systemServicesMemoryMB:type_name -> memoryMetric
	12, // 11: deviceMetric.log:type_name -> logMetric
	1,  // 12: MetricItem.type:type_name -> MetricItemType
	6,  // 13: appMetric.cpu:type_name -> appCpuMetric
	2,  // 14: appMetric.memory:type_name -> memoryMetric
	3,  // 15: appMetric.network:type_name -> networkMetric
	10, // 16: appMetric.disk:type_name -> appDiskMetric
	31, // 17: logMetric.lastDeviceBundleSendTime:type_name -> google.protobuf.Timestamp
	31, // 18: logMetric.lastAppBundleSendTime:type_name -> google.protobuf.Timestamp
	31, // 19: logMetric.lastLogDeferTime:type_name -> google.protobuf.Timestamp
	13, // 20: RlocStats.Stats:type_name -> PktStat
	14, // 21: EidStats.RlocStatsEntries:type_name -> RlocStats
	15, // 22: ZMetricLisp.EidStatsEntries:type_name -> EidStats
	13, // 23: ZMetricLisp.ItrPacketSendError:type_name -> PktStat
	13, // 24: ZMetricLisp.InvalidEidError:type_name -> PktStat
	13, // 25: ZMetricLisp.NoDecryptKey:type_name -> PktStat
	13, // 26: ZMetricLisp.OuterHeaderError:type_name -> PktStat
	13, // 27: ZMetricLisp.BadInnerVersion:type_name -> PktStat
	13, // 28: ZMetricLisp.GoodPackets:type_name -> PktStat
	13, // 29: ZMetricLisp.ICVError:type_name -> PktStat
	13, // 30: ZMetricLisp.LispHeaderError:type_name -> PktStat
	13, // 31: ZMetricLisp.CheckSumError:type_name -> PktStat
	13, // 32: ZMetricLisp.DecapReInjectError:type_name -> PktStat
	13, // 33: ZMetricLisp.DecryptError:type_name -> PktStat
	13, // 34: ZMetricConn.InPkts:type_name -> PktStat
	13, // 35: ZMetricConn.OutPkts:type_name -> PktStat
	13, // 36: ZMetricConn.ErrPkts:type_name -> PktStat
	13, // 37: ZMetricConn.CarierErrPkts:type_name -> PktStat
	17, // 38: ZMetricVpn.ConnStat:type_name -> ZMetricConn
	17, // 39: ZMetricVpn.IkeStat:type_name -> ZMetricConn
	17, // 40: ZMetricVpn.NatTStat:type_name -> ZMetricConn
	17, // 41: ZMetricVpn.EspStat:type_name -> ZMetricConn
	20, // 42: ZMetricFlowEndPoint.link:type_name -> ZMetricFlowLink
	13, // 43: ZMetricFlowEndPoint.stats:type_name -> PktStat
	21, // 44: ZMetricFlow.lEndPoint:type_name -> ZMetricFlowEndPoint
	21, // 45: ZMetricFlow.rEndPoint:type_name -> ZMetricFlowEndPoint
	13, // 46: ZMetricLispGlobal.ItrPacketSendError:type_name -> PktStat
	13, // 47: ZMetricLispGlobal.InvalidEidError:type_name -> PktStat
	13, // 48: ZMetricLispGlobal.NoDecryptKey:type_name -> PktStat
	13, // 49: ZMetricLispGlobal.OuterHeaderError:type_name -> PktStat
	13, // 50: ZMetricLispGlobal.BadInnerVersion:type_name -> PktStat
	13, // 51: ZMetricLispGlobal.GoodPackets:type_name -> PktStat
	13, // 52: ZMetricLispGlobal.ICVError:type_name -> PktStat
	13, // 53: ZMetricLispGlobal.LispHeaderError:type_name -> PktStat
	13, // 54: ZMetricLispGlobal.CheckSumError:type_name -> PktStat
	13, // 55: ZMetricLispGlobal.DecapReInjectError:type_name -> PktStat
	13, // 56: ZMetricLispGlobal.DecryptError:type_name -> PktStat
	24, // 57: ZMetricNetworkStats.rx:type_name -> NetworkStats
	24, // 58: ZMetricNetworkStats.tx:type_name -> NetworkStats
	30, // 59: ZProbeNIMetrics.intfMetric:type_name -> ZProbeNIMetrics.ZProbeIntfMetric
	3,  // 60: ZMetricNetworkInstance.network:type_name -> networkMetric
	26, // 61: ZMetricNetworkInstance.probeMetric:type_name -> ZProbeNIMetrics
	18, // 62: ZMetricNetworkInstance.vpnm:type_name -> ZMetricVpn
	16, // 63: ZMetricNetworkInstance.lispm:type_name -> ZMetricLisp
	19, // 64: ZMetricNetworkInstance.nonem:type_name -> ZMetricNone
	22, // 65: ZMetricNetworkInstance.flowStats:type_name -> ZMetricFlow
	23, // 66: ZMetricNetworkInstance.lispGlobalStats:type_name -> ZMetricLispGlobal
	25, // 67: ZMetricNetworkInstance.networkStats:type_name -> ZMetricNetworkStats
	31, // 68: ZMetricMsg.atTimeStamp:type_name -> google.protobuf.Timestamp
	7,  // 69: ZMetricMsg.dm:type_name -> deviceMetric
	11, // 70: ZMetricMsg.am:type_name -> appMetric
	27, // 71: ZMetricMsg.nm:type_name -> ZMetricNetworkInstance
	28, // 72: ZMetricMsg.vm:type_name -> ZMetricVolume
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_metrics_metrics_proto_init() }
func file_metrics_metrics_proto_init() {
	if File_metrics_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metrics_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZedcloudMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlcloudMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCpuMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PktStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlocStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EidStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricLisp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricVpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricNone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricFlowLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricFlowEndPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricLispGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricNetworkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZProbeNIMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricNetworkInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZMetricMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_metrics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZProbeNIMetrics_ZProbeIntfMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_metrics_metrics_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MetricItem_BoolValue)(nil),
		(*MetricItem_Uint32Value)(nil),
		(*MetricItem_Uint64Value)(nil),
		(*MetricItem_FloatValue)(nil),
		(*MetricItem_StringValue)(nil),
	}
	file_metrics_metrics_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ZMetricFlowLink_SubNet)(nil),
		(*ZMetricFlowLink_Eid)(nil),
	}
	file_metrics_metrics_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ZMetricFlowEndPoint_IpAddr)(nil),
		(*ZMetricFlowEndPoint_Rloc)(nil),
	}
	file_metrics_metrics_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ZMetricNetworkInstance_Vpnm)(nil),
		(*ZMetricNetworkInstance_Lispm)(nil),
		(*ZMetricNetworkInstance_Nonem)(nil),
	}
	file_metrics_metrics_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*ZMetricMsg_Dm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metrics_metrics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metrics_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_metrics_proto_depIdxs,
		EnumInfos:         file_metrics_metrics_proto_enumTypes,
		MessageInfos:      file_metrics_metrics_proto_msgTypes,
	}.Build()
	File_metrics_metrics_proto = out.File
	file_metrics_metrics_proto_rawDesc = nil
	file_metrics_metrics_proto_goTypes = nil
	file_metrics_metrics_proto_depIdxs = nil
}
