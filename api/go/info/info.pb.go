// Copyright(c) 2017-2020 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: info/info.proto

package info

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	evecommon "github.com/lf-edge/eve/api/go/evecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Remove Me
type DepMetricItemType int32

const (
	DepMetricItemType_DepMetricItemOther   DepMetricItemType = 0 // E.g., a string like an ESSID
	DepMetricItemType_DepMetricItemGauge   DepMetricItemType = 1 // Goes up and down over time
	DepMetricItemType_DepMetricItemCounter DepMetricItemType = 2 // Monotonically increasing (until reboot)
	DepMetricItemType_DepMetricItemState   DepMetricItemType = 3 // Toggles on and off; count transitions
)

// Enum value maps for DepMetricItemType.
var (
	DepMetricItemType_name = map[int32]string{
		0: "DepMetricItemOther",
		1: "DepMetricItemGauge",
		2: "DepMetricItemCounter",
		3: "DepMetricItemState",
	}
	DepMetricItemType_value = map[string]int32{
		"DepMetricItemOther":   0,
		"DepMetricItemGauge":   1,
		"DepMetricItemCounter": 2,
		"DepMetricItemState":   3,
	}
)

func (x DepMetricItemType) Enum() *DepMetricItemType {
	p := new(DepMetricItemType)
	*p = x
	return p
}

func (x DepMetricItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepMetricItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[0].Descriptor()
}

func (DepMetricItemType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[0]
}

func (x DepMetricItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepMetricItemType.Descriptor instead.
func (DepMetricItemType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{0}
}

//
// Broadly there are two types
// Info : information that is discovered/rarely changes
// Metrics: information that gets updated periodically
// Protobuf definitions in this file follow the convention.
type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop    ZInfoTypes = 0
	ZInfoTypes_ZiDevice ZInfoTypes = 1
	// deprecated = 2;
	ZInfoTypes_ZiApp ZInfoTypes = 3
	// deprecated = 4;
	// deprecated = 5;
	ZInfoTypes_ZiNetworkInstance ZInfoTypes = 6
	ZInfoTypes_ZiVolume          ZInfoTypes = 7
	ZInfoTypes_ZiContentTree     ZInfoTypes = 8
	ZInfoTypes_ZiBlobList        ZInfoTypes = 9
)

// Enum value maps for ZInfoTypes.
var (
	ZInfoTypes_name = map[int32]string{
		0: "ZiNop",
		1: "ZiDevice",
		3: "ZiApp",
		6: "ZiNetworkInstance",
		7: "ZiVolume",
		8: "ZiContentTree",
		9: "ZiBlobList",
	}
	ZInfoTypes_value = map[string]int32{
		"ZiNop":             0,
		"ZiDevice":          1,
		"ZiApp":             3,
		"ZiNetworkInstance": 6,
		"ZiVolume":          7,
		"ZiContentTree":     8,
		"ZiBlobList":        9,
	}
)

func (x ZInfoTypes) Enum() *ZInfoTypes {
	p := new(ZInfoTypes)
	*p = x
	return p
}

func (x ZInfoTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZInfoTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[1].Descriptor()
}

func (ZInfoTypes) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[1]
}

func (x ZInfoTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZInfoTypes.Descriptor instead.
func (ZInfoTypes) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{1}
}

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
// plus additions starting at BOOTING
type ZSwState int32

const (
	ZSwState_INVALID          ZSwState = 0
	ZSwState_INITIAL          ZSwState = 1  // Config received
	ZSwState_DOWNLOAD_STARTED ZSwState = 2  // Download in-progress
	ZSwState_DOWNLOADED       ZSwState = 3  // Download completed, verification in-progress
	ZSwState_DELIVERED        ZSwState = 4  // Verification completed
	ZSwState_INSTALLED        ZSwState = 5  // Installed, ready for activation
	ZSwState_BOOTING          ZSwState = 6  // booting. Booting and above means that App is activated.
	ZSwState_RUNNING          ZSwState = 7  // running
	ZSwState_HALTING          ZSwState = 8  // being halted
	ZSwState_HALTED           ZSwState = 9  // Halted
	ZSwState_RESTARTING       ZSwState = 10 // Restarting due to restart command
	ZSwState_PURGING          ZSwState = 11 // Purging due to purge command
	// Prior to DOWNLOAD_STARTED we go through these:
	ZSwState_RESOLVING_TAG ZSwState = 12 // Resolving an image tag
	ZSwState_RESOLVED_TAG  ZSwState = 13 // Tag has been resolved/failed
	// Prior to INSTALLED we go through these:
	ZSwState_CREATING_VOLUME ZSwState = 14 // Volume create in progress
	ZSwState_CREATED_VOLUME  ZSwState = 15 // Volume create done/failed
)

// Enum value maps for ZSwState.
var (
	ZSwState_name = map[int32]string{
		0:  "INVALID",
		1:  "INITIAL",
		2:  "DOWNLOAD_STARTED",
		3:  "DOWNLOADED",
		4:  "DELIVERED",
		5:  "INSTALLED",
		6:  "BOOTING",
		7:  "RUNNING",
		8:  "HALTING",
		9:  "HALTED",
		10: "RESTARTING",
		11: "PURGING",
		12: "RESOLVING_TAG",
		13: "RESOLVED_TAG",
		14: "CREATING_VOLUME",
		15: "CREATED_VOLUME",
	}
	ZSwState_value = map[string]int32{
		"INVALID":          0,
		"INITIAL":          1,
		"DOWNLOAD_STARTED": 2,
		"DOWNLOADED":       3,
		"DELIVERED":        4,
		"INSTALLED":        5,
		"BOOTING":          6,
		"RUNNING":          7,
		"HALTING":          8,
		"HALTED":           9,
		"RESTARTING":       10,
		"PURGING":          11,
		"RESOLVING_TAG":    12,
		"RESOLVED_TAG":     13,
		"CREATING_VOLUME":  14,
		"CREATED_VOLUME":   15,
	}
)

func (x ZSwState) Enum() *ZSwState {
	p := new(ZSwState)
	*p = x
	return p
}

func (x ZSwState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZSwState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[2].Descriptor()
}

func (ZSwState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[2]
}

func (x ZSwState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZSwState.Descriptor instead.
func (ZSwState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{2}
}

type HwSecurityModuleStatus int32

const (
	HwSecurityModuleStatus_UNKNOWN  HwSecurityModuleStatus = 0 //HSM Status is not known
	HwSecurityModuleStatus_NOTFOUND HwSecurityModuleStatus = 1 //No HSM found
	HwSecurityModuleStatus_DISABLED HwSecurityModuleStatus = 2 //HSM found, but not being used
	HwSecurityModuleStatus_ENABLED  HwSecurityModuleStatus = 3 //HSM is found and being actively used
)

// Enum value maps for HwSecurityModuleStatus.
var (
	HwSecurityModuleStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOTFOUND",
		2: "DISABLED",
		3: "ENABLED",
	}
	HwSecurityModuleStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"NOTFOUND": 1,
		"DISABLED": 2,
		"ENABLED":  3,
	}
)

func (x HwSecurityModuleStatus) Enum() *HwSecurityModuleStatus {
	p := new(HwSecurityModuleStatus)
	*p = x
	return p
}

func (x HwSecurityModuleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HwSecurityModuleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[3].Descriptor()
}

func (HwSecurityModuleStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[3]
}

func (x HwSecurityModuleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HwSecurityModuleStatus.Descriptor instead.
func (HwSecurityModuleStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{3}
}

type DataSecAtRestStatus int32

const (
	DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN  DataSecAtRestStatus = 0 // Status is unknown
	DataSecAtRestStatus_DATASEC_AT_REST_DISABLED DataSecAtRestStatus = 1 // Enabled, but not being used
	DataSecAtRestStatus_DATASEC_AT_REST_ENABLED  DataSecAtRestStatus = 2 // Enabled, and used
	DataSecAtRestStatus_DATASEC_AT_REST_ERROR    DataSecAtRestStatus = 4 // Enabled, but encountered an error
)

// Enum value maps for DataSecAtRestStatus.
var (
	DataSecAtRestStatus_name = map[int32]string{
		0: "DATASEC_AT_REST_UNKNOWN",
		1: "DATASEC_AT_REST_DISABLED",
		2: "DATASEC_AT_REST_ENABLED",
		4: "DATASEC_AT_REST_ERROR",
	}
	DataSecAtRestStatus_value = map[string]int32{
		"DATASEC_AT_REST_UNKNOWN":  0,
		"DATASEC_AT_REST_DISABLED": 1,
		"DATASEC_AT_REST_ENABLED":  2,
		"DATASEC_AT_REST_ERROR":    4,
	}
)

func (x DataSecAtRestStatus) Enum() *DataSecAtRestStatus {
	p := new(DataSecAtRestStatus)
	*p = x
	return p
}

func (x DataSecAtRestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSecAtRestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[4].Descriptor()
}

func (DataSecAtRestStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[4]
}

func (x DataSecAtRestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSecAtRestStatus.Descriptor instead.
func (DataSecAtRestStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{4}
}

type BaseOsStatus int32

const (
	BaseOsStatus_NONE          BaseOsStatus = 0 // Should be ignored in output
	BaseOsStatus_DOWNLOADING   BaseOsStatus = 1 // subStatus will have more details
	BaseOsStatus_DOWNLOAD_DONE BaseOsStatus = 2 // Terminal state if user action was to download
	BaseOsStatus_UPDATING      BaseOsStatus = 3 // subStatus will have more details including
	// whether it is rebooting, or testing
	BaseOsStatus_UPDATED  BaseOsStatus = 4 // Running the configured baseimage
	BaseOsStatus_FALLBACK BaseOsStatus = 5 // Fallback image during testing
	BaseOsStatus_FAILED   BaseOsStatus = 6 // See ErrInfo for details
)

// Enum value maps for BaseOsStatus.
var (
	BaseOsStatus_name = map[int32]string{
		0: "NONE",
		1: "DOWNLOADING",
		2: "DOWNLOAD_DONE",
		3: "UPDATING",
		4: "UPDATED",
		5: "FALLBACK",
		6: "FAILED",
	}
	BaseOsStatus_value = map[string]int32{
		"NONE":          0,
		"DOWNLOADING":   1,
		"DOWNLOAD_DONE": 2,
		"UPDATING":      3,
		"UPDATED":       4,
		"FALLBACK":      5,
		"FAILED":        6,
	}
)

func (x BaseOsStatus) Enum() *BaseOsStatus {
	p := new(BaseOsStatus)
	*p = x
	return p
}

func (x BaseOsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseOsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[5].Descriptor()
}

func (BaseOsStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[5]
}

func (x BaseOsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseOsStatus.Descriptor instead.
func (BaseOsStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{5}
}

type BaseOsSubStatus int32

const (
	BaseOsSubStatus_NONE_SUBSTATUS           BaseOsSubStatus = 0
	BaseOsSubStatus_DOWNLOAD_INPROGRESS      BaseOsSubStatus = 1 // subStatusProgress is percentage
	BaseOsSubStatus_VERIFY_INPROGRESS        BaseOsSubStatus = 2 // subStatusProgress is percentage
	BaseOsSubStatus_UPDATE_INITIALIZING      BaseOsSubStatus = 3
	BaseOsSubStatus_UPDATE_REBOOTING         BaseOsSubStatus = 4 // subStatusProgress is time left
	BaseOsSubStatus_UPDATE_TESTING           BaseOsSubStatus = 5 // subStatusProgress is time left
	BaseOsSubStatus_UPDATE_NEED_TEST_CONFIRM BaseOsSubStatus = 6 // waiting for controller to commit to new
)

// Enum value maps for BaseOsSubStatus.
var (
	BaseOsSubStatus_name = map[int32]string{
		0: "NONE_SUBSTATUS",
		1: "DOWNLOAD_INPROGRESS",
		2: "VERIFY_INPROGRESS",
		3: "UPDATE_INITIALIZING",
		4: "UPDATE_REBOOTING",
		5: "UPDATE_TESTING",
		6: "UPDATE_NEED_TEST_CONFIRM",
	}
	BaseOsSubStatus_value = map[string]int32{
		"NONE_SUBSTATUS":           0,
		"DOWNLOAD_INPROGRESS":      1,
		"VERIFY_INPROGRESS":        2,
		"UPDATE_INITIALIZING":      3,
		"UPDATE_REBOOTING":         4,
		"UPDATE_TESTING":           5,
		"UPDATE_NEED_TEST_CONFIRM": 6,
	}
)

func (x BaseOsSubStatus) Enum() *BaseOsSubStatus {
	p := new(BaseOsSubStatus)
	*p = x
	return p
}

func (x BaseOsSubStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseOsSubStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[6].Descriptor()
}

func (BaseOsSubStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[6]
}

func (x BaseOsSubStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseOsSubStatus.Descriptor instead.
func (BaseOsSubStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{6}
}

// ipSec state information
type ZInfoVpnState int32

const (
	ZInfoVpnState_VPN_INVALID     ZInfoVpnState = 0
	ZInfoVpnState_VPN_INITIAL     ZInfoVpnState = 1  // Config received
	ZInfoVpnState_VPN_CONNECTING  ZInfoVpnState = 2  // Connection is in-progress
	ZInfoVpnState_VPN_ESTABLISHED ZInfoVpnState = 3  // Connection established
	ZInfoVpnState_VPN_INSTALLED   ZInfoVpnState = 4  // SAs/Routes Installed
	ZInfoVpnState_VPN_REKEYED     ZInfoVpnState = 5  // SAs Rekeyed
	ZInfoVpnState_VPN_DELETED     ZInfoVpnState = 10 // Connection deleted
)

// Enum value maps for ZInfoVpnState.
var (
	ZInfoVpnState_name = map[int32]string{
		0:  "VPN_INVALID",
		1:  "VPN_INITIAL",
		2:  "VPN_CONNECTING",
		3:  "VPN_ESTABLISHED",
		4:  "VPN_INSTALLED",
		5:  "VPN_REKEYED",
		10: "VPN_DELETED",
	}
	ZInfoVpnState_value = map[string]int32{
		"VPN_INVALID":     0,
		"VPN_INITIAL":     1,
		"VPN_CONNECTING":  2,
		"VPN_ESTABLISHED": 3,
		"VPN_INSTALLED":   4,
		"VPN_REKEYED":     5,
		"VPN_DELETED":     10,
	}
)

func (x ZInfoVpnState) Enum() *ZInfoVpnState {
	p := new(ZInfoVpnState)
	*p = x
	return p
}

func (x ZInfoVpnState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZInfoVpnState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[7].Descriptor()
}

func (ZInfoVpnState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[7]
}

func (x ZInfoVpnState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZInfoVpnState.Descriptor instead.
func (ZInfoVpnState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{7}
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
type DeprecatedMetricItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // E.g., "lte-signal-strength"
	Type DepMetricItemType `protobuf:"varint,2,opt,name=type,proto3,enum=DepMetricItemType" json:"type,omitempty"`
	// Types that are assignable to MetricItemValue:
	//	*DeprecatedMetricItem_BoolValue
	//	*DeprecatedMetricItem_Uint32Value
	//	*DeprecatedMetricItem_Uint64Value
	//	*DeprecatedMetricItem_FloatValue
	//	*DeprecatedMetricItem_StringValue
	MetricItemValue isDeprecatedMetricItem_MetricItemValue `protobuf_oneof:"metricItemValue"`
}

func (x *DeprecatedMetricItem) Reset() {
	*x = DeprecatedMetricItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedMetricItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedMetricItem) ProtoMessage() {}

func (x *DeprecatedMetricItem) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedMetricItem.ProtoReflect.Descriptor instead.
func (*DeprecatedMetricItem) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{0}
}

func (x *DeprecatedMetricItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeprecatedMetricItem) GetType() DepMetricItemType {
	if x != nil {
		return x.Type
	}
	return DepMetricItemType_DepMetricItemOther
}

func (m *DeprecatedMetricItem) GetMetricItemValue() isDeprecatedMetricItem_MetricItemValue {
	if m != nil {
		return m.MetricItemValue
	}
	return nil
}

func (x *DeprecatedMetricItem) GetBoolValue() bool {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *DeprecatedMetricItem) GetUint32Value() uint32 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *DeprecatedMetricItem) GetUint64Value() uint64 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *DeprecatedMetricItem) GetFloatValue() float32 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *DeprecatedMetricItem) GetStringValue() string {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isDeprecatedMetricItem_MetricItemValue interface {
	isDeprecatedMetricItem_MetricItemValue()
}

type DeprecatedMetricItem_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=boolValue,proto3,oneof"`
}

type DeprecatedMetricItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32Value,proto3,oneof"` // If timer this is in seconds
}

type DeprecatedMetricItem_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,5,opt,name=uint64Value,proto3,oneof"`
}

type DeprecatedMetricItem_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=floatValue,proto3,oneof"`
}

type DeprecatedMetricItem_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=stringValue,proto3,oneof"` // Use with care
}

func (*DeprecatedMetricItem_BoolValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint32Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint64Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_FloatValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_StringValue) isDeprecatedMetricItem_MetricItemValue() {}

// Map from MAC to IP addresses
type ZmetIPAssignmentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string   `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	IpAddress  []string `protobuf:"bytes,2,rep,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *ZmetIPAssignmentEntry) Reset() {
	*x = ZmetIPAssignmentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmetIPAssignmentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmetIPAssignmentEntry) ProtoMessage() {}

func (x *ZmetIPAssignmentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmetIPAssignmentEntry.ProtoReflect.Descriptor instead.
func (*ZmetIPAssignmentEntry) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{1}
}

func (x *ZmetIPAssignmentEntry) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ZmetIPAssignmentEntry) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Map from vifname to other info
type ZmetVifInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VifName    string `protobuf:"bytes,1,opt,name=vifName,proto3" json:"vifName,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	AppID      string `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID,omitempty"` // UUID
}

func (x *ZmetVifInfo) Reset() {
	*x = ZmetVifInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmetVifInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmetVifInfo) ProtoMessage() {}

func (x *ZmetVifInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmetVifInfo.ProtoReflect.Descriptor instead.
func (*ZmetVifInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{2}
}

func (x *ZmetVifInfo) GetVifName() string {
	if x != nil {
		return x.VifName
	}
	return ""
}

func (x *ZmetVifInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ZmetVifInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

// Information about assignable I/O adapter bundles
type ZioBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          evecommon.PhyIoType        `protobuf:"varint,1,opt,name=type,proto3,enum=org.lfedge.eve.common.PhyIoType" json:"type,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // Short hand name such as "com"
	Members       []string                   `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"` // E.g., "com1", "com2"
	UsedByAppUUID string                     `protobuf:"bytes,4,opt,name=usedByAppUUID,proto3" json:"usedByAppUUID,omitempty"`
	UsedByBaseOS  bool                       `protobuf:"varint,5,opt,name=usedByBaseOS,proto3" json:"usedByBaseOS,omitempty"`
	IoAddressList []*IoAddresses             `protobuf:"bytes,6,rep,name=ioAddressList,proto3" json:"ioAddressList,omitempty"`                              // One per member
	Usage         evecommon.PhyIoMemberUsage `protobuf:"varint,7,opt,name=usage,proto3,enum=org.lfedge.eve.common.PhyIoMemberUsage" json:"usage,omitempty"` // Usage of the IoBundle
	Err           *ErrorInfo                 `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`                                                  // Any errors on the IoBundle
}

func (x *ZioBundle) Reset() {
	*x = ZioBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZioBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZioBundle) ProtoMessage() {}

func (x *ZioBundle) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZioBundle.ProtoReflect.Descriptor instead.
func (*ZioBundle) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{3}
}

func (x *ZioBundle) GetType() evecommon.PhyIoType {
	if x != nil {
		return x.Type
	}
	return evecommon.PhyIoType_PhyIoNoop
}

func (x *ZioBundle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZioBundle) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ZioBundle) GetUsedByAppUUID() string {
	if x != nil {
		return x.UsedByAppUUID
	}
	return ""
}

func (x *ZioBundle) GetUsedByBaseOS() bool {
	if x != nil {
		return x.UsedByBaseOS
	}
	return false
}

func (x *ZioBundle) GetIoAddressList() []*IoAddresses {
	if x != nil {
		return x.IoAddressList
	}
	return nil
}

func (x *ZioBundle) GetUsage() evecommon.PhyIoMemberUsage {
	if x != nil {
		return x.Usage
	}
	return evecommon.PhyIoMemberUsage_PhyIoUsageNone
}

func (x *ZioBundle) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

type IoAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
}

func (x *IoAddresses) Reset() {
	*x = IoAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IoAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoAddresses) ProtoMessage() {}

func (x *IoAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoAddresses.ProtoReflect.Descriptor instead.
func (*IoAddresses) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{4}
}

func (x *IoAddresses) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
type ZInfoManufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer    string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductName     string `protobuf:"bytes,2,opt,name=productName,proto3" json:"productName,omitempty"`
	Version         string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber    string `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	UUID            string `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`             // From BIOS; different than device UUID
	Compatible      string `protobuf:"bytes,6,opt,name=compatible,proto3" json:"compatible,omitempty"` // From /proc/device-tree/compatible on ARM
	BiosVendor      string `protobuf:"bytes,7,opt,name=biosVendor,proto3" json:"biosVendor,omitempty"`
	BiosVersion     string `protobuf:"bytes,8,opt,name=biosVersion,proto3" json:"biosVersion,omitempty"`
	BiosReleaseDate string `protobuf:"bytes,9,opt,name=biosReleaseDate,proto3" json:"biosReleaseDate,omitempty"`
}

func (x *ZInfoManufacturer) Reset() {
	*x = ZInfoManufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoManufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoManufacturer) ProtoMessage() {}

func (x *ZInfoManufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoManufacturer.ProtoReflect.Descriptor instead.
func (*ZInfoManufacturer) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{5}
}

func (x *ZInfoManufacturer) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ZInfoManufacturer) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ZInfoManufacturer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ZInfoManufacturer) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ZInfoManufacturer) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ZInfoManufacturer) GetCompatible() string {
	if x != nil {
		return x.Compatible
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosReleaseDate() string {
	if x != nil {
		return x.BiosReleaseDate
	}
	return ""
}

type ZInfoNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated = 1;
	// deprecated = 2;
	MacAddr string `protobuf:"bytes,3,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	// devName - Must be set to SystemAdapter.Name which is the Logicallabel
	DevName string `protobuf:"bytes,4,opt,name=devName,proto3" json:"devName,omitempty"`
	// alias - Must be set to SystemAdapter.alias
	Alias          string     `protobuf:"bytes,40,opt,name=alias,proto3" json:"alias,omitempty"`
	IPAddrs        []string   `protobuf:"bytes,5,rep,name=IPAddrs,proto3" json:"IPAddrs,omitempty"`               // All IP addresses with /N for subnet
	DefaultRouters []string   `protobuf:"bytes,6,rep,name=defaultRouters,proto3" json:"defaultRouters,omitempty"` // If DHCP assigned
	Dns            *ZInfoDNS  `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty"`                       // If DHCP assigned
	Up             bool       `protobuf:"varint,8,opt,name=up,proto3" json:"up,omitempty"`                        // operational up/down status.
	Location       *GeoLoc    `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Uplink         bool       `protobuf:"varint,10,opt,name=uplink,proto3" json:"uplink,omitempty"`        // Uplink interface  // XXX rename to isMgmt
	NetworkErr     *ErrorInfo `protobuf:"bytes,11,opt,name=networkErr,proto3" json:"networkErr,omitempty"` // For instance bad proxy config
	// Ifname from PhysicalIo - eth0, eth1 etc
	LocalName string       `protobuf:"bytes,12,opt,name=localName,proto3" json:"localName,omitempty"`
	Proxy     *ProxyStatus `protobuf:"bytes,13,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *ZInfoNetwork) Reset() {
	*x = ZInfoNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoNetwork) ProtoMessage() {}

func (x *ZInfoNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoNetwork.ProtoReflect.Descriptor instead.
func (*ZInfoNetwork) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{6}
}

func (x *ZInfoNetwork) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *ZInfoNetwork) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *ZInfoNetwork) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ZInfoNetwork) GetIPAddrs() []string {
	if x != nil {
		return x.IPAddrs
	}
	return nil
}

func (x *ZInfoNetwork) GetDefaultRouters() []string {
	if x != nil {
		return x.DefaultRouters
	}
	return nil
}

func (x *ZInfoNetwork) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *ZInfoNetwork) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *ZInfoNetwork) GetLocation() *GeoLoc {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ZInfoNetwork) GetUplink() bool {
	if x != nil {
		return x.Uplink
	}
	return false
}

func (x *ZInfoNetwork) GetNetworkErr() *ErrorInfo {
	if x != nil {
		return x.NetworkErr
	}
	return nil
}

func (x *ZInfoNetwork) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

func (x *ZInfoNetwork) GetProxy() *ProxyStatus {
	if x != nil {
		return x.Proxy
	}
	return nil
}

// From an IP address-based geolocation service
// XXX later define GPS coordinates from device
type GeoLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlayIP string `protobuf:"bytes,1,opt,name=UnderlayIP,proto3" json:"UnderlayIP,omitempty"`
	Hostname   string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	City       string `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Region     string `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	Country    string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	Loc        string `protobuf:"bytes,6,opt,name=Loc,proto3" json:"Loc,omitempty"`
	Org        string `protobuf:"bytes,7,opt,name=Org,proto3" json:"Org,omitempty"`
	Postal     string `protobuf:"bytes,8,opt,name=Postal,proto3" json:"Postal,omitempty"`
}

func (x *GeoLoc) Reset() {
	*x = GeoLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLoc) ProtoMessage() {}

func (x *GeoLoc) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLoc.ProtoReflect.Descriptor instead.
func (*GeoLoc) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{7}
}

func (x *GeoLoc) GetUnderlayIP() string {
	if x != nil {
		return x.UnderlayIP
	}
	return ""
}

func (x *GeoLoc) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GeoLoc) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoLoc) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GeoLoc) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoLoc) GetLoc() string {
	if x != nil {
		return x.Loc
	}
	return ""
}

func (x *GeoLoc) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GeoLoc) GetPostal() string {
	if x != nil {
		return x.Postal
	}
	return ""
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
type ZInfoDNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSservers []string `protobuf:"bytes,1,rep,name=DNSservers,proto3" json:"DNSservers,omitempty"`
	DNSdomain  string   `protobuf:"bytes,2,opt,name=DNSdomain,proto3" json:"DNSdomain,omitempty"`
	DNSsearch  []string `protobuf:"bytes,3,rep,name=DNSsearch,proto3" json:"DNSsearch,omitempty"`
}

func (x *ZInfoDNS) Reset() {
	*x = ZInfoDNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDNS) ProtoMessage() {}

func (x *ZInfoDNS) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDNS.ProtoReflect.Descriptor instead.
func (*ZInfoDNS) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{8}
}

func (x *ZInfoDNS) GetDNSservers() []string {
	if x != nil {
		return x.DNSservers
	}
	return nil
}

func (x *ZInfoDNS) GetDNSdomain() string {
	if x != nil {
		return x.DNSdomain
	}
	return ""
}

func (x *ZInfoDNS) GetDNSsearch() []string {
	if x != nil {
		return x.DNSsearch
	}
	return nil
}

// SW Info for Apps
// XXX to be deprecated once we've completely moved to volumes
type ZInfoSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwVersion        string   `protobuf:"bytes,2,opt,name=swVersion,proto3" json:"swVersion,omitempty"`
	SwHash           string   `protobuf:"bytes,3,opt,name=swHash,proto3" json:"swHash,omitempty"`
	State            ZSwState `protobuf:"varint,4,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`         // State of Software Image download/install
	Target           string   `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`                      // E.g., "disk", "kernel", "device-tree"
	Vdev             string   `protobuf:"bytes,7,opt,name=vdev,proto3" json:"vdev,omitempty"`                          // E.g., "xvda"
	DownloadProgress uint32   `protobuf:"varint,8,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"` // Download progress; 0-100 percent
	ImageName        string   `protobuf:"bytes,9,opt,name=imageName,proto3" json:"imageName,omitempty"`                // Name of the disk image
}

func (x *ZInfoSW) Reset() {
	*x = ZInfoSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoSW) ProtoMessage() {}

func (x *ZInfoSW) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoSW.ProtoReflect.Descriptor instead.
func (*ZInfoSW) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{9}
}

func (x *ZInfoSW) GetSwVersion() string {
	if x != nil {
		return x.SwVersion
	}
	return ""
}

func (x *ZInfoSW) GetSwHash() string {
	if x != nil {
		return x.SwHash
	}
	return ""
}

func (x *ZInfoSW) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoSW) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ZInfoSW) GetVdev() string {
	if x != nil {
		return x.Vdev
	}
	return ""
}

func (x *ZInfoSW) GetDownloadProgress() uint32 {
	if x != nil {
		return x.DownloadProgress
	}
	return 0
}

func (x *ZInfoSW) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

// Errors in response to the application of configuration
type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string               `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Timestamp   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ErrorInfo) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type VaultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               //Name of the vault
	Status   DataSecAtRestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=DataSecAtRestStatus" json:"status,omitempty"` //Status of the vault
	VaultErr *ErrorInfo          `protobuf:"bytes,3,opt,name=vaultErr,proto3" json:"vaultErr,omitempty"`                       //Additional info in case of failure
}

func (x *VaultInfo) Reset() {
	*x = VaultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultInfo) ProtoMessage() {}

func (x *VaultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultInfo.ProtoReflect.Descriptor instead.
func (*VaultInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{11}
}

func (x *VaultInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultInfo) GetStatus() DataSecAtRestStatus {
	if x != nil {
		return x.Status
	}
	return DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN
}

func (x *VaultInfo) GetVaultErr() *ErrorInfo {
	if x != nil {
		return x.VaultErr
	}
	return nil
}

type DataSecAtRest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    DataSecAtRestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=DataSecAtRestStatus" json:"status,omitempty"` // Deprecated
	Info      string              `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`                               // Deprecated
	VaultList []*VaultInfo        `protobuf:"bytes,3,rep,name=vaultList,proto3" json:"vaultList,omitempty"`                     // per-Vault Info
}

func (x *DataSecAtRest) Reset() {
	*x = DataSecAtRest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSecAtRest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSecAtRest) ProtoMessage() {}

func (x *DataSecAtRest) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSecAtRest.ProtoReflect.Descriptor instead.
func (*DataSecAtRest) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{12}
}

func (x *DataSecAtRest) GetStatus() DataSecAtRestStatus {
	if x != nil {
		return x.Status
	}
	return DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN
}

func (x *DataSecAtRest) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *DataSecAtRest) GetVaultList() []*VaultInfo {
	if x != nil {
		return x.VaultList
	}
	return nil
}

type ZInfoConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ZInfoConfigItem) Reset() {
	*x = ZInfoConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoConfigItem) ProtoMessage() {}

func (x *ZInfoConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoConfigItem.ProtoReflect.Descriptor instead.
func (*ZInfoConfigItem) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{13}
}

func (x *ZInfoConfigItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ZInfoConfigItem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ZInfoConfigItemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigItems        map[string]*ZInfoConfigItem `protobuf:"bytes,1,rep,name=configItems,proto3" json:"configItems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnknownConfigItems map[string]*ZInfoConfigItem `protobuf:"bytes,2,rep,name=unknownConfigItems,proto3" json:"unknownConfigItems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ZInfoConfigItemStatus) Reset() {
	*x = ZInfoConfigItemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoConfigItemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoConfigItemStatus) ProtoMessage() {}

func (x *ZInfoConfigItemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoConfigItemStatus.ProtoReflect.Descriptor instead.
func (*ZInfoConfigItemStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{14}
}

func (x *ZInfoConfigItemStatus) GetConfigItems() map[string]*ZInfoConfigItem {
	if x != nil {
		return x.ConfigItems
	}
	return nil
}

func (x *ZInfoConfigItemStatus) GetUnknownConfigItems() map[string]*ZInfoConfigItem {
	if x != nil {
		return x.UnknownConfigItems
	}
	return nil
}

// ZInfoAppInstance - send a summary of App Instance so that controller knows
// how many App Instances are still present on the device. Controller
// can then use it to wait for an app to be fully deleted etc.
type ZInfoAppInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DomainName string `protobuf:"bytes,3,opt,name=domainName,proto3" json:"domainName,omitempty"`
}

func (x *ZInfoAppInstance) Reset() {
	*x = ZInfoAppInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoAppInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoAppInstance) ProtoMessage() {}

func (x *ZInfoAppInstance) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoAppInstance.ProtoReflect.Descriptor instead.
func (*ZInfoAppInstance) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{15}
}

func (x *ZInfoAppInstance) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoAppInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoAppInstance) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineArch string             `protobuf:"bytes,4,opt,name=machineArch,proto3" json:"machineArch,omitempty"`
	CpuArch     string             `protobuf:"bytes,5,opt,name=cpuArch,proto3" json:"cpuArch,omitempty"`
	Platform    string             `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Ncpu        uint32             `protobuf:"varint,7,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	Memory      uint64             `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`   // in Mbytes
	Storage     uint64             `protobuf:"varint,9,opt,name=storage,proto3" json:"storage,omitempty"` // in MBytes for the currently active image filesystem
	Minfo       *ZInfoManufacturer `protobuf:"bytes,11,opt,name=minfo,proto3" json:"minfo,omitempty"`
	// OBSOLETE. The information will be provided by DevicePort instead.
	// Newer versions will not fill in this information. Controller Needs
	// to check check if this is empty - if yes, use the DevicePortStatus instead.
	Network            []*ZInfoNetwork         `protobuf:"bytes,13,rep,name=network,proto3" json:"network,omitempty"`
	AssignableAdapters []*ZioBundle            `protobuf:"bytes,15,rep,name=assignableAdapters,proto3" json:"assignableAdapters,omitempty"`
	Dns                *ZInfoDNS               `protobuf:"bytes,16,opt,name=dns,proto3" json:"dns,omitempty"` // What is used in resolv.conf
	StorageList        []*ZInfoStorage         `protobuf:"bytes,17,rep,name=storageList,proto3" json:"storageList,omitempty"`
	BootTime           *timestamp.Timestamp    `protobuf:"bytes,18,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	SwList             []*ZInfoDevSW           `protobuf:"bytes,19,rep,name=swList,proto3" json:"swList,omitempty"`
	HostName           string                  `protobuf:"bytes,20,opt,name=HostName,proto3" json:"HostName,omitempty"`
	MetricItems        []*DeprecatedMetricItem `protobuf:"bytes,21,rep,name=metricItems,proto3" json:"metricItems,omitempty"` // For instance, static LTE network info
	LastRebootReason   string                  `protobuf:"bytes,22,opt,name=lastRebootReason,proto3" json:"lastRebootReason,omitempty"`
	LastRebootTime     *timestamp.Timestamp    `protobuf:"bytes,23,opt,name=lastRebootTime,proto3" json:"lastRebootTime,omitempty"`
	SystemAdapter      *SystemAdapterInfo      `protobuf:"bytes,24,opt,name=systemAdapter,proto3" json:"systemAdapter,omitempty"`
	RestartCounter     uint32                  `protobuf:"varint,25,opt,name=restartCounter,proto3" json:"restartCounter,omitempty"`                   // Number of times zedagent has restarted i.e., device reboot
	HSMStatus          HwSecurityModuleStatus  `protobuf:"varint,26,opt,name=HSMStatus,proto3,enum=HwSecurityModuleStatus" json:"HSMStatus,omitempty"` //State of hardware security modules, like TPM
	HSMInfo            string                  `protobuf:"bytes,27,opt,name=HSMInfo,proto3" json:"HSMInfo,omitempty"`                                  //Information about HSM like TPM vendor, TEE type etc.
	LastRebootStack    string                  `protobuf:"bytes,28,opt,name=lastRebootStack,proto3" json:"lastRebootStack,omitempty"`
	DataSecAtRestInfo  *DataSecAtRest          `protobuf:"bytes,29,opt,name=dataSecAtRestInfo,proto3" json:"dataSecAtRestInfo,omitempty"` //Info about Data At Rest Security
	ConfigItemStatus   *ZInfoConfigItemStatus  `protobuf:"bytes,31,opt,name=configItemStatus,proto3" json:"configItemStatus,omitempty"`
	AppInstances       []*ZInfoAppInstance     `protobuf:"bytes,32,rep,name=appInstances,proto3" json:"appInstances,omitempty"`
	// rebootConfigCounter - reboot command counter from config last processed by
	// eve
	RebootConfigCounter uint32 `protobuf:"varint,33,opt,name=rebootConfigCounter,proto3" json:"rebootConfigCounter,omitempty"`
}

func (x *ZInfoDevice) Reset() {
	*x = ZInfoDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDevice) ProtoMessage() {}

func (x *ZInfoDevice) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDevice.ProtoReflect.Descriptor instead.
func (*ZInfoDevice) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{16}
}

func (x *ZInfoDevice) GetMachineArch() string {
	if x != nil {
		return x.MachineArch
	}
	return ""
}

func (x *ZInfoDevice) GetCpuArch() string {
	if x != nil {
		return x.CpuArch
	}
	return ""
}

func (x *ZInfoDevice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ZInfoDevice) GetNcpu() uint32 {
	if x != nil {
		return x.Ncpu
	}
	return 0
}

func (x *ZInfoDevice) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ZInfoDevice) GetStorage() uint64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if x != nil {
		return x.Minfo
	}
	return nil
}

func (x *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ZInfoDevice) GetAssignableAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignableAdapters
	}
	return nil
}

func (x *ZInfoDevice) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *ZInfoDevice) GetStorageList() []*ZInfoStorage {
	if x != nil {
		return x.StorageList
	}
	return nil
}

func (x *ZInfoDevice) GetBootTime() *timestamp.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *ZInfoDevice) GetSwList() []*ZInfoDevSW {
	if x != nil {
		return x.SwList
	}
	return nil
}

func (x *ZInfoDevice) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ZInfoDevice) GetMetricItems() []*DeprecatedMetricItem {
	if x != nil {
		return x.MetricItems
	}
	return nil
}

func (x *ZInfoDevice) GetLastRebootReason() string {
	if x != nil {
		return x.LastRebootReason
	}
	return ""
}

func (x *ZInfoDevice) GetLastRebootTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastRebootTime
	}
	return nil
}

func (x *ZInfoDevice) GetSystemAdapter() *SystemAdapterInfo {
	if x != nil {
		return x.SystemAdapter
	}
	return nil
}

func (x *ZInfoDevice) GetRestartCounter() uint32 {
	if x != nil {
		return x.RestartCounter
	}
	return 0
}

func (x *ZInfoDevice) GetHSMStatus() HwSecurityModuleStatus {
	if x != nil {
		return x.HSMStatus
	}
	return HwSecurityModuleStatus_UNKNOWN
}

func (x *ZInfoDevice) GetHSMInfo() string {
	if x != nil {
		return x.HSMInfo
	}
	return ""
}

func (x *ZInfoDevice) GetLastRebootStack() string {
	if x != nil {
		return x.LastRebootStack
	}
	return ""
}

func (x *ZInfoDevice) GetDataSecAtRestInfo() *DataSecAtRest {
	if x != nil {
		return x.DataSecAtRestInfo
	}
	return nil
}

func (x *ZInfoDevice) GetConfigItemStatus() *ZInfoConfigItemStatus {
	if x != nil {
		return x.ConfigItemStatus
	}
	return nil
}

func (x *ZInfoDevice) GetAppInstances() []*ZInfoAppInstance {
	if x != nil {
		return x.AppInstances
	}
	return nil
}

func (x *ZInfoDevice) GetRebootConfigCounter() uint32 {
	if x != nil {
		return x.RebootConfigCounter
	}
	return 0
}

// The current and fallback system adapter information
type SystemAdapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIndex uint32              `protobuf:"varint,1,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"` // Zero means the first/highest priority is used
	Status       []*DevicePortStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *SystemAdapterInfo) Reset() {
	*x = SystemAdapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAdapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAdapterInfo) ProtoMessage() {}

func (x *SystemAdapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAdapterInfo.ProtoReflect.Descriptor instead.
func (*SystemAdapterInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{17}
}

func (x *SystemAdapterInfo) GetCurrentIndex() uint32 {
	if x != nil {
		return x.CurrentIndex
	}
	return 0
}

func (x *SystemAdapterInfo) GetStatus() []*DevicePortStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DevicePortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       uint32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Key           string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TimePriority  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timePriority,proto3" json:"timePriority,omitempty"`
	LastFailed    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=lastFailed,proto3" json:"lastFailed,omitempty"`
	LastSucceeded *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastSucceeded,proto3" json:"lastSucceeded,omitempty"`
	Ports         []*DevicePort        `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	LastError     string               `protobuf:"bytes,7,opt,name=lastError,proto3" json:"lastError,omitempty"`
}

func (x *DevicePortStatus) Reset() {
	*x = DevicePortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePortStatus) ProtoMessage() {}

func (x *DevicePortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePortStatus.ProtoReflect.Descriptor instead.
func (*DevicePortStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{18}
}

func (x *DevicePortStatus) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DevicePortStatus) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DevicePortStatus) GetTimePriority() *timestamp.Timestamp {
	if x != nil {
		return x.TimePriority
	}
	return nil
}

func (x *DevicePortStatus) GetLastFailed() *timestamp.Timestamp {
	if x != nil {
		return x.LastFailed
	}
	return nil
}

func (x *DevicePortStatus) GetLastSucceeded() *timestamp.Timestamp {
	if x != nil {
		return x.LastSucceeded
	}
	return nil
}

func (x *DevicePortStatus) GetPorts() []*DevicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DevicePortStatus) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

type DevicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifname string `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Logical name set by controller; same as logicallabel
	IsMgmt bool   `protobuf:"varint,3,opt,name=isMgmt,proto3" json:"isMgmt,omitempty"`
	Free   bool   `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	// DhcpConfig
	DhcpType uint32 `protobuf:"varint,11,opt,name=dhcpType,proto3" json:"dhcpType,omitempty"`
	Subnet   string `protobuf:"bytes,12,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// gateway - OBSOLETE - obsoleted by defaultRouters
	Gateway string `protobuf:"bytes,13,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// domainname - OBSOLETE - obsoleted by dns
	Domainname string `protobuf:"bytes,14,opt,name=domainname,proto3" json:"domainname,omitempty"`
	NtpServer  string `protobuf:"bytes,15,opt,name=ntpServer,proto3" json:"ntpServer,omitempty"`
	// dnsServers - OBSOLETE - obsoleted by dns
	DnsServers     []string                   `protobuf:"bytes,16,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	DhcpRangeLow   string                     `protobuf:"bytes,17,opt,name=dhcpRangeLow,proto3" json:"dhcpRangeLow,omitempty"`
	DhcpRangeHigh  string                     `protobuf:"bytes,18,opt,name=dhcpRangeHigh,proto3" json:"dhcpRangeHigh,omitempty"`
	Proxy          *ProxyStatus               `protobuf:"bytes,21,opt,name=proxy,proto3" json:"proxy,omitempty"`
	MacAddr        string                     `protobuf:"bytes,22,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	IPAddrs        []string                   `protobuf:"bytes,23,rep,name=IPAddrs,proto3" json:"IPAddrs,omitempty"`               // All IP addresses with /N for subnet
	DefaultRouters []string                   `protobuf:"bytes,24,rep,name=defaultRouters,proto3" json:"defaultRouters,omitempty"` // If DHCP assigned
	Dns            *ZInfoDNS                  `protobuf:"bytes,25,opt,name=dns,proto3" json:"dns,omitempty"`                       // If DHCP assigned
	Up             bool                       `protobuf:"varint,26,opt,name=up,proto3" json:"up,omitempty"`                        // operational up/down status.
	Location       *GeoLoc                    `protobuf:"bytes,27,opt,name=location,proto3" json:"location,omitempty"`
	Err            *ErrorInfo                 `protobuf:"bytes,29,opt,name=err,proto3" json:"err,omitempty"`                                                  // Any errors on the interface.
	Usage          evecommon.PhyIoMemberUsage `protobuf:"varint,30,opt,name=usage,proto3,enum=org.lfedge.eve.common.PhyIoMemberUsage" json:"usage,omitempty"` // Usage of the Device port
	NetworkUUID    string                     `protobuf:"bytes,31,opt,name=networkUUID,proto3" json:"networkUUID,omitempty"`                                  // Network UUID configured for the port.
}

func (x *DevicePort) Reset() {
	*x = DevicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePort) ProtoMessage() {}

func (x *DevicePort) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePort.ProtoReflect.Descriptor instead.
func (*DevicePort) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{19}
}

func (x *DevicePort) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *DevicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevicePort) GetIsMgmt() bool {
	if x != nil {
		return x.IsMgmt
	}
	return false
}

func (x *DevicePort) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *DevicePort) GetDhcpType() uint32 {
	if x != nil {
		return x.DhcpType
	}
	return 0
}

func (x *DevicePort) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DevicePort) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DevicePort) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

func (x *DevicePort) GetNtpServer() string {
	if x != nil {
		return x.NtpServer
	}
	return ""
}

func (x *DevicePort) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *DevicePort) GetDhcpRangeLow() string {
	if x != nil {
		return x.DhcpRangeLow
	}
	return ""
}

func (x *DevicePort) GetDhcpRangeHigh() string {
	if x != nil {
		return x.DhcpRangeHigh
	}
	return ""
}

func (x *DevicePort) GetProxy() *ProxyStatus {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *DevicePort) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *DevicePort) GetIPAddrs() []string {
	if x != nil {
		return x.IPAddrs
	}
	return nil
}

func (x *DevicePort) GetDefaultRouters() []string {
	if x != nil {
		return x.DefaultRouters
	}
	return nil
}

func (x *DevicePort) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *DevicePort) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *DevicePort) GetLocation() *GeoLoc {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DevicePort) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *DevicePort) GetUsage() evecommon.PhyIoMemberUsage {
	if x != nil {
		return x.Usage
	}
	return evecommon.PhyIoMemberUsage_PhyIoUsageNone
}

func (x *DevicePort) GetNetworkUUID() string {
	if x != nil {
		return x.NetworkUUID
	}
	return ""
}

type ProxyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxies            []*ProxyEntry `protobuf:"bytes,1,rep,name=proxies,proto3" json:"proxies,omitempty"`
	Exceptions         string        `protobuf:"bytes,2,opt,name=exceptions,proto3" json:"exceptions,omitempty"`
	Pacfile            string        `protobuf:"bytes,3,opt,name=pacfile,proto3" json:"pacfile,omitempty"`
	NetworkProxyEnable bool          `protobuf:"varint,4,opt,name=networkProxyEnable,proto3" json:"networkProxyEnable,omitempty"`
	NetworkProxyURL    string        `protobuf:"bytes,5,opt,name=networkProxyURL,proto3" json:"networkProxyURL,omitempty"`
	WpadURL            string        `protobuf:"bytes,6,opt,name=wpadURL,proto3" json:"wpadURL,omitempty"`
}

func (x *ProxyStatus) Reset() {
	*x = ProxyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyStatus) ProtoMessage() {}

func (x *ProxyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyStatus.ProtoReflect.Descriptor instead.
func (*ProxyStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{20}
}

func (x *ProxyStatus) GetProxies() []*ProxyEntry {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *ProxyStatus) GetExceptions() string {
	if x != nil {
		return x.Exceptions
	}
	return ""
}

func (x *ProxyStatus) GetPacfile() string {
	if x != nil {
		return x.Pacfile
	}
	return ""
}

func (x *ProxyStatus) GetNetworkProxyEnable() bool {
	if x != nil {
		return x.NetworkProxyEnable
	}
	return false
}

func (x *ProxyStatus) GetNetworkProxyURL() string {
	if x != nil {
		return x.NetworkProxyURL
	}
	return ""
}

func (x *ProxyStatus) GetWpadURL() string {
	if x != nil {
		return x.WpadURL
	}
	return ""
}

type ProxyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // From NPT_ types aka proxyProto
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProxyEntry) Reset() {
	*x = ProxyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyEntry) ProtoMessage() {}

func (x *ProxyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyEntry.ProtoReflect.Descriptor instead.
func (*ProxyEntry) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{21}
}

func (x *ProxyEntry) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProxyEntry) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ProxyEntry) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// SW Info for the device base OS
// Many of these fields are for debug purposes. The ones intended
// for the UI/cli are userStatus, subStatus*, shortVersion, and swErr
type ZInfoDevSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activated         bool            `protobuf:"varint,2,opt,name=activated,proto3" json:"activated,omitempty"`
	PartitionLabel    string          `protobuf:"bytes,3,opt,name=partitionLabel,proto3" json:"partitionLabel,omitempty"`   // E.g., "IMGA"
	PartitionDevice   string          `protobuf:"bytes,4,opt,name=partitionDevice,proto3" json:"partitionDevice,omitempty"` // /dev/something
	PartitionState    string          `protobuf:"bytes,5,opt,name=partitionState,proto3" json:"partitionState,omitempty"`   // state obtained from cboot
	Status            ZSwState        `protobuf:"varint,6,opt,name=status,proto3,enum=ZSwState" json:"status,omitempty"`    // E.g., "DOWNLOADED"
	ShortVersion      string          `protobuf:"bytes,7,opt,name=shortVersion,proto3" json:"shortVersion,omitempty"`       // From rootfs i.e., image
	LongVersion       string          `protobuf:"bytes,8,opt,name=longVersion,proto3" json:"longVersion,omitempty"`         // E.g., the yml file content from build
	SwErr             *ErrorInfo      `protobuf:"bytes,9,opt,name=swErr,proto3" json:"swErr,omitempty"`
	DownloadProgress  uint32          `protobuf:"varint,10,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"` // Download progress; 0-100 percent
	UserStatus        BaseOsStatus    `protobuf:"varint,11,opt,name=userStatus,proto3,enum=BaseOsStatus" json:"userStatus,omitempty"`
	SubStatusStr      string          `protobuf:"bytes,12,opt,name=subStatusStr,proto3" json:"subStatusStr,omitempty"` // English formatted string
	SubStatus         BaseOsSubStatus `protobuf:"varint,13,opt,name=subStatus,proto3,enum=BaseOsSubStatus" json:"subStatus,omitempty"`
	SubStatusProgress uint32          `protobuf:"varint,14,opt,name=subStatusProgress,proto3" json:"subStatusProgress,omitempty"` // Context-dependent; percentage or time
}

func (x *ZInfoDevSW) Reset() {
	*x = ZInfoDevSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDevSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDevSW) ProtoMessage() {}

func (x *ZInfoDevSW) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDevSW.ProtoReflect.Descriptor instead.
func (*ZInfoDevSW) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{22}
}

func (x *ZInfoDevSW) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *ZInfoDevSW) GetPartitionLabel() string {
	if x != nil {
		return x.PartitionLabel
	}
	return ""
}

func (x *ZInfoDevSW) GetPartitionDevice() string {
	if x != nil {
		return x.PartitionDevice
	}
	return ""
}

func (x *ZInfoDevSW) GetPartitionState() string {
	if x != nil {
		return x.PartitionState
	}
	return ""
}

func (x *ZInfoDevSW) GetStatus() ZSwState {
	if x != nil {
		return x.Status
	}
	return ZSwState_INVALID
}

func (x *ZInfoDevSW) GetShortVersion() string {
	if x != nil {
		return x.ShortVersion
	}
	return ""
}

func (x *ZInfoDevSW) GetLongVersion() string {
	if x != nil {
		return x.LongVersion
	}
	return ""
}

func (x *ZInfoDevSW) GetSwErr() *ErrorInfo {
	if x != nil {
		return x.SwErr
	}
	return nil
}

func (x *ZInfoDevSW) GetDownloadProgress() uint32 {
	if x != nil {
		return x.DownloadProgress
	}
	return 0
}

func (x *ZInfoDevSW) GetUserStatus() BaseOsStatus {
	if x != nil {
		return x.UserStatus
	}
	return BaseOsStatus_NONE
}

func (x *ZInfoDevSW) GetSubStatusStr() string {
	if x != nil {
		return x.SubStatusStr
	}
	return ""
}

func (x *ZInfoDevSW) GetSubStatus() BaseOsSubStatus {
	if x != nil {
		return x.SubStatus
	}
	return BaseOsSubStatus_NONE_SUBSTATUS
}

func (x *ZInfoDevSW) GetSubStatusProgress() uint32 {
	if x != nil {
		return x.SubStatusProgress
	}
	return 0
}

// Per filesystem/partition information
type ZInfoStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device          string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                    // E.g., "sda3"
	MountPath       string `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`              // E.g., "/", or "/config"
	Total           uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                     // in MBytes
	StorageLocation bool   `protobuf:"varint,4,opt,name=storageLocation,proto3" json:"storageLocation,omitempty"` // Storage location for app disks, images etc.
}

func (x *ZInfoStorage) Reset() {
	*x = ZInfoStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoStorage) ProtoMessage() {}

func (x *ZInfoStorage) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoStorage.ProtoReflect.Descriptor instead.
func (*ZInfoStorage) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{23}
}

func (x *ZInfoStorage) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ZInfoStorage) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *ZInfoStorage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ZInfoStorage) GetStorageLocation() bool {
	if x != nil {
		return x.StorageLocation
	}
	return false
}

type ZInfoApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID            string               `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppVersion       string               `protobuf:"bytes,2,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	SystemApp        bool                 `protobuf:"varint,6,opt,name=systemApp,proto3" json:"systemApp,omitempty"`
	AppName          string               `protobuf:"bytes,7,opt,name=AppName,proto3" json:"AppName,omitempty"`
	SoftwareList     []*ZInfoSW           `protobuf:"bytes,8,rep,name=softwareList,proto3" json:"softwareList,omitempty"` // XXX to be deprecated in favor of volumeRefs
	BootTime         *timestamp.Timestamp `protobuf:"bytes,12,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	AssignedAdapters []*ZioBundle         `protobuf:"bytes,13,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	AppErr           []*ErrorInfo         `protobuf:"bytes,14,rep,name=appErr,proto3" json:"appErr,omitempty"`
	State            ZSwState             `protobuf:"varint,15,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`
	Network          []*ZInfoNetwork      `protobuf:"bytes,16,rep,name=network,proto3" json:"network,omitempty"`       // up/down; allocated IP
	VolumeRefs       []string             `protobuf:"bytes,17,rep,name=volumeRefs,proto3" json:"volumeRefs,omitempty"` // volume UUIDs
}

func (x *ZInfoApp) Reset() {
	*x = ZInfoApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoApp) ProtoMessage() {}

func (x *ZInfoApp) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoApp.ProtoReflect.Descriptor instead.
func (*ZInfoApp) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{24}
}

func (x *ZInfoApp) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ZInfoApp) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ZInfoApp) GetSystemApp() bool {
	if x != nil {
		return x.SystemApp
	}
	return false
}

func (x *ZInfoApp) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ZInfoApp) GetSoftwareList() []*ZInfoSW {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

func (x *ZInfoApp) GetBootTime() *timestamp.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *ZInfoApp) GetAssignedAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignedAdapters
	}
	return nil
}

func (x *ZInfoApp) GetAppErr() []*ErrorInfo {
	if x != nil {
		return x.AppErr
	}
	return nil
}

func (x *ZInfoApp) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoApp) GetNetwork() []*ZInfoNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ZInfoApp) GetVolumeRefs() []string {
	if x != nil {
		return x.VolumeRefs
	}
	return nil
}

// tunnel link details
type ZInfoVpnLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiId     string `protobuf:"bytes,1,opt,name=spiId,proto3" json:"spiId,omitempty"`          // Security Parameter Index
	SubNet    string `protobuf:"bytes,2,opt,name=subNet,proto3" json:"subNet,omitempty"`        // Associate Subnet
	Direction bool   `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"` // 0 = local, 1 = remote
}

func (x *ZInfoVpnLinkInfo) Reset() {
	*x = ZInfoVpnLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnLinkInfo) ProtoMessage() {}

func (x *ZInfoVpnLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnLinkInfo.ProtoReflect.Descriptor instead.
func (*ZInfoVpnLinkInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{25}
}

func (x *ZInfoVpnLinkInfo) GetSpiId() string {
	if x != nil {
		return x.SpiId
	}
	return ""
}

func (x *ZInfoVpnLinkInfo) GetSubNet() string {
	if x != nil {
		return x.SubNet
	}
	return ""
}

func (x *ZInfoVpnLinkInfo) GetDirection() bool {
	if x != nil {
		return x.Direction
	}
	return false
}

// Esp details
type ZInfoVpnLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                           // esp id
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       // connection name
	ReqId    string            `protobuf:"bytes,3,opt,name=reqId,proto3" json:"reqId,omitempty"`                     // request id
	InstTime uint64            `protobuf:"varint,4,opt,name=instTime,proto3" json:"instTime,omitempty"`              // in seconds
	EspInfo  string            `protobuf:"bytes,5,opt,name=espInfo,proto3" json:"espInfo,omitempty"`                 // esp info
	State    ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=ZInfoVpnState" json:"state,omitempty"` // esp state
	LInfo    *ZInfoVpnLinkInfo `protobuf:"bytes,10,opt,name=lInfo,proto3" json:"lInfo,omitempty"`                    // local
	RInfo    *ZInfoVpnLinkInfo `protobuf:"bytes,11,opt,name=rInfo,proto3" json:"rInfo,omitempty"`                    // remote
}

func (x *ZInfoVpnLink) Reset() {
	*x = ZInfoVpnLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnLink) ProtoMessage() {}

func (x *ZInfoVpnLink) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnLink.ProtoReflect.Descriptor instead.
func (*ZInfoVpnLink) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{26}
}

func (x *ZInfoVpnLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoVpnLink) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ZInfoVpnLink) GetInstTime() uint64 {
	if x != nil {
		return x.InstTime
	}
	return 0
}

func (x *ZInfoVpnLink) GetEspInfo() string {
	if x != nil {
		return x.EspInfo
	}
	return ""
}

func (x *ZInfoVpnLink) GetState() ZInfoVpnState {
	if x != nil {
		return x.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (x *ZInfoVpnLink) GetLInfo() *ZInfoVpnLinkInfo {
	if x != nil {
		return x.LInfo
	}
	return nil
}

func (x *ZInfoVpnLink) GetRInfo() *ZInfoVpnLinkInfo {
	if x != nil {
		return x.RInfo
	}
	return nil
}

// ipsec left/right end-point info
type ZInfoVpnEndPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // ipSec id
	IpAddr string `protobuf:"bytes,2,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"` // Ip Address
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`    // udp port
}

func (x *ZInfoVpnEndPoint) Reset() {
	*x = ZInfoVpnEndPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnEndPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnEndPoint) ProtoMessage() {}

func (x *ZInfoVpnEndPoint) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnEndPoint.ProtoReflect.Descriptor instead.
func (*ZInfoVpnEndPoint) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{27}
}

func (x *ZInfoVpnEndPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnEndPoint) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *ZInfoVpnEndPoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Ike details
type ZInfoVpnConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                           // ike id
	Name    string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       // connection name
	Version string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                 // ike-v1/v2
	EstTime uint64            `protobuf:"varint,4,opt,name=estTime,proto3" json:"estTime,omitempty"`                // in seconds
	Ikes    string            `protobuf:"bytes,5,opt,name=ikes,proto3" json:"ikes,omitempty"`                       // ike proposals
	State   ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=ZInfoVpnState" json:"state,omitempty"` // ike state
	LInfo   *ZInfoVpnEndPoint `protobuf:"bytes,7,opt,name=lInfo,proto3" json:"lInfo,omitempty"`                     // local
	RInfo   *ZInfoVpnEndPoint `protobuf:"bytes,8,opt,name=rInfo,proto3" json:"rInfo,omitempty"`                     // remote
	Links   []*ZInfoVpnLink   `protobuf:"bytes,10,rep,name=links,proto3" json:"links,omitempty"`                    // can be more than one
}

func (x *ZInfoVpnConn) Reset() {
	*x = ZInfoVpnConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnConn) ProtoMessage() {}

func (x *ZInfoVpnConn) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnConn.ProtoReflect.Descriptor instead.
func (*ZInfoVpnConn) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{28}
}

func (x *ZInfoVpnConn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnConn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoVpnConn) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ZInfoVpnConn) GetEstTime() uint64 {
	if x != nil {
		return x.EstTime
	}
	return 0
}

func (x *ZInfoVpnConn) GetIkes() string {
	if x != nil {
		return x.Ikes
	}
	return ""
}

func (x *ZInfoVpnConn) GetState() ZInfoVpnState {
	if x != nil {
		return x.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (x *ZInfoVpnConn) GetLInfo() *ZInfoVpnEndPoint {
	if x != nil {
		return x.LInfo
	}
	return nil
}

func (x *ZInfoVpnConn) GetRInfo() *ZInfoVpnEndPoint {
	if x != nil {
		return x.RInfo
	}
	return nil
}

func (x *ZInfoVpnConn) GetLinks() []*ZInfoVpnLink {
	if x != nil {
		return x.Links
	}
	return nil
}

// ipsec level information
type ZInfoVpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpTime           uint64          `protobuf:"varint,1,opt,name=upTime,proto3" json:"upTime,omitempty"`                    // in seconds
	PolicyBased      bool            `protobuf:"varint,2,opt,name=policyBased,proto3" json:"policyBased,omitempty"`          // Policy-based vs. VTI-based IPSEC VPN
	ListeningIpAddrs []string        `protobuf:"bytes,3,rep,name=listeningIpAddrs,proto3" json:"listeningIpAddrs,omitempty"` //listening on
	Conn             []*ZInfoVpnConn `protobuf:"bytes,10,rep,name=conn,proto3" json:"conn,omitempty"`                        // Connection Information
}

func (x *ZInfoVpn) Reset() {
	*x = ZInfoVpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpn) ProtoMessage() {}

func (x *ZInfoVpn) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpn.ProtoReflect.Descriptor instead.
func (*ZInfoVpn) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{29}
}

func (x *ZInfoVpn) GetUpTime() uint64 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *ZInfoVpn) GetPolicyBased() bool {
	if x != nil {
		return x.PolicyBased
	}
	return false
}

func (x *ZInfoVpn) GetListeningIpAddrs() []string {
	if x != nil {
		return x.ListeningIpAddrs
	}
	return nil
}

func (x *ZInfoVpn) GetConn() []*ZInfoVpnConn {
	if x != nil {
		return x.Conn
	}
	return nil
}

// Lisp state information
type RlocState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rloc      string `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Reachable bool   `protobuf:"varint,2,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
}

func (x *RlocState) Reset() {
	*x = RlocState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlocState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlocState) ProtoMessage() {}

func (x *RlocState) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlocState.ProtoReflect.Descriptor instead.
func (*RlocState) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{30}
}

func (x *RlocState) GetRloc() string {
	if x != nil {
		return x.Rloc
	}
	return ""
}

func (x *RlocState) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

type MapCacheEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EID   string       `protobuf:"bytes,1,opt,name=EID,proto3" json:"EID,omitempty"`
	Rlocs []*RlocState `protobuf:"bytes,2,rep,name=Rlocs,proto3" json:"Rlocs,omitempty"`
}

func (x *MapCacheEntry) Reset() {
	*x = MapCacheEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCacheEntry) ProtoMessage() {}

func (x *MapCacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCacheEntry.ProtoReflect.Descriptor instead.
func (*MapCacheEntry) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{31}
}

func (x *MapCacheEntry) GetEID() string {
	if x != nil {
		return x.EID
	}
	return ""
}

func (x *MapCacheEntry) GetRlocs() []*RlocState {
	if x != nil {
		return x.Rlocs
	}
	return nil
}

type DatabaseMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IID             uint64           `protobuf:"varint,1,opt,name=IID,proto3" json:"IID,omitempty"`
	MapCacheEntries []*MapCacheEntry `protobuf:"bytes,2,rep,name=MapCacheEntries,proto3" json:"MapCacheEntries,omitempty"`
}

func (x *DatabaseMap) Reset() {
	*x = DatabaseMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseMap) ProtoMessage() {}

func (x *DatabaseMap) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseMap.ProtoReflect.Descriptor instead.
func (*DatabaseMap) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{32}
}

func (x *DatabaseMap) GetIID() uint64 {
	if x != nil {
		return x.IID
	}
	return 0
}

func (x *DatabaseMap) GetMapCacheEntries() []*MapCacheEntry {
	if x != nil {
		return x.MapCacheEntries
	}
	return nil
}

type DecapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rloc     string `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Port     uint64 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	KeyCount uint64 `protobuf:"varint,3,opt,name=KeyCount,proto3" json:"KeyCount,omitempty"`
}

func (x *DecapKey) Reset() {
	*x = DecapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecapKey) ProtoMessage() {}

func (x *DecapKey) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecapKey.ProtoReflect.Descriptor instead.
func (*DecapKey) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{33}
}

func (x *DecapKey) GetRloc() string {
	if x != nil {
		return x.Rloc
	}
	return ""
}

func (x *DecapKey) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DecapKey) GetKeyCount() uint64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

type ZInfoLisp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItrCryptoPort uint64         `protobuf:"varint,1,opt,name=ItrCryptoPort,proto3" json:"ItrCryptoPort,omitempty"`
	EtrNatPort    uint64         `protobuf:"varint,2,opt,name=EtrNatPort,proto3" json:"EtrNatPort,omitempty"`
	Interfaces    []string       `protobuf:"bytes,3,rep,name=Interfaces,proto3" json:"Interfaces,omitempty"`
	DatabaseMaps  []*DatabaseMap `protobuf:"bytes,4,rep,name=DatabaseMaps,proto3" json:"DatabaseMaps,omitempty"`
	DecapKeys     []*DecapKey    `protobuf:"bytes,5,rep,name=DecapKeys,proto3" json:"DecapKeys,omitempty"`
}

func (x *ZInfoLisp) Reset() {
	*x = ZInfoLisp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoLisp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoLisp) ProtoMessage() {}

func (x *ZInfoLisp) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoLisp.ProtoReflect.Descriptor instead.
func (*ZInfoLisp) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{34}
}

func (x *ZInfoLisp) GetItrCryptoPort() uint64 {
	if x != nil {
		return x.ItrCryptoPort
	}
	return 0
}

func (x *ZInfoLisp) GetEtrNatPort() uint64 {
	if x != nil {
		return x.EtrNatPort
	}
	return 0
}

func (x *ZInfoLisp) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *ZInfoLisp) GetDatabaseMaps() []*DatabaseMap {
	if x != nil {
		return x.DatabaseMaps
	}
	return nil
}

func (x *ZInfoLisp) GetDecapKeys() []*DecapKey {
	if x != nil {
		return x.DecapKeys
	}
	return nil
}

// Network Instance information
type ZInfoNetworkInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID          string                   `protobuf:"bytes,2,opt,name=networkID,proto3" json:"networkID,omitempty"`           // UUID
	NetworkVersion     string                   `protobuf:"bytes,3,opt,name=networkVersion,proto3" json:"networkVersion,omitempty"` // From Network Instance config
	InstType           uint32                   `protobuf:"varint,5,opt,name=instType,proto3" json:"instType,omitempty"`            // ZNetworkInstType
	Displayname        string                   `protobuf:"bytes,6,opt,name=displayname,proto3" json:"displayname,omitempty"`       // From NetworkInstance config
	Activated          bool                     `protobuf:"varint,7,opt,name=activated,proto3" json:"activated,omitempty"`          // Forwarding enabled
	UpTimeStamp        *timestamp.Timestamp     `protobuf:"bytes,8,opt,name=upTimeStamp,proto3" json:"upTimeStamp,omitempty"`
	SoftwareList       *ZInfoSW                 `protobuf:"bytes,9,opt,name=softwareList,proto3" json:"softwareList,omitempty"`              // E.g., VPN version; XXX to be deprecated?
	CurrentUplinkIntf  string                   `protobuf:"bytes,10,opt,name=CurrentUplinkIntf,proto3" json:"CurrentUplinkIntf,omitempty"`   // current uplink interface in use by this NI
	CurrentUplinkAlias string                   `protobuf:"bytes,11,opt,name=CurrentUplinkAlias,proto3" json:"CurrentUplinkAlias,omitempty"` // user defined namestring alias to this CurrentUplinkIntf, for future
	BridgeNum          uint32                   `protobuf:"varint,20,opt,name=bridgeNum,proto3" json:"bridgeNum,omitempty"`
	BridgeName         string                   `protobuf:"bytes,21,opt,name=bridgeName,proto3" json:"bridgeName,omitempty"`
	BridgeIPAddr       string                   `protobuf:"bytes,22,opt,name=bridgeIPAddr,proto3" json:"bridgeIPAddr,omitempty"`
	IpAssignments      []*ZmetIPAssignmentEntry `protobuf:"bytes,23,rep,name=ipAssignments,proto3" json:"ipAssignments,omitempty"`
	BridgeIPSets       []string                 `protobuf:"bytes,24,rep,name=bridgeIPSets,proto3" json:"bridgeIPSets,omitempty"` // Union of all ipsets for the bridge
	Vifs               []*ZmetVifInfo           `protobuf:"bytes,25,rep,name=vifs,proto3" json:"vifs,omitempty"`                 // Set of vifs on this bridge
	Ipv4Eid            bool                     `protobuf:"varint,26,opt,name=ipv4Eid,proto3" json:"ipv4Eid,omitempty"`          // Track if this is a CryptoEid with IPv4 EIDs
	AssignedAdapters   []*ZioBundle             `protobuf:"bytes,30,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	// Types that are assignable to InfoContent:
	//	*ZInfoNetworkInstance_Vinfo
	//	*ZInfoNetworkInstance_Linfo
	InfoContent isZInfoNetworkInstance_InfoContent `protobuf_oneof:"InfoContent"`
	NetworkErr  []*ErrorInfo                       `protobuf:"bytes,40,rep,name=networkErr,proto3" json:"networkErr,omitempty"`
}

func (x *ZInfoNetworkInstance) Reset() {
	*x = ZInfoNetworkInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoNetworkInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoNetworkInstance) ProtoMessage() {}

func (x *ZInfoNetworkInstance) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoNetworkInstance.ProtoReflect.Descriptor instead.
func (*ZInfoNetworkInstance) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{35}
}

func (x *ZInfoNetworkInstance) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetNetworkVersion() string {
	if x != nil {
		return x.NetworkVersion
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetInstType() uint32 {
	if x != nil {
		return x.InstType
	}
	return 0
}

func (x *ZInfoNetworkInstance) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *ZInfoNetworkInstance) GetUpTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.UpTimeStamp
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetSoftwareList() *ZInfoSW {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetCurrentUplinkIntf() string {
	if x != nil {
		return x.CurrentUplinkIntf
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetCurrentUplinkAlias() string {
	if x != nil {
		return x.CurrentUplinkAlias
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetBridgeNum() uint32 {
	if x != nil {
		return x.BridgeNum
	}
	return 0
}

func (x *ZInfoNetworkInstance) GetBridgeName() string {
	if x != nil {
		return x.BridgeName
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetBridgeIPAddr() string {
	if x != nil {
		return x.BridgeIPAddr
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetIpAssignments() []*ZmetIPAssignmentEntry {
	if x != nil {
		return x.IpAssignments
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetBridgeIPSets() []string {
	if x != nil {
		return x.BridgeIPSets
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetVifs() []*ZmetVifInfo {
	if x != nil {
		return x.Vifs
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetIpv4Eid() bool {
	if x != nil {
		return x.Ipv4Eid
	}
	return false
}

func (x *ZInfoNetworkInstance) GetAssignedAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignedAdapters
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetInfoContent() isZInfoNetworkInstance_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetVinfo() *ZInfoVpn {
	if x, ok := x.GetInfoContent().(*ZInfoNetworkInstance_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetLinfo() *ZInfoLisp {
	if x, ok := x.GetInfoContent().(*ZInfoNetworkInstance_Linfo); ok {
		return x.Linfo
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetNetworkErr() []*ErrorInfo {
	if x != nil {
		return x.NetworkErr
	}
	return nil
}

type isZInfoNetworkInstance_InfoContent interface {
	isZInfoNetworkInstance_InfoContent()
}

type ZInfoNetworkInstance_Vinfo struct {
	Vinfo *ZInfoVpn `protobuf:"bytes,31,opt,name=vinfo,proto3,oneof"`
}

type ZInfoNetworkInstance_Linfo struct {
	Linfo *ZInfoLisp `protobuf:"bytes,32,opt,name=linfo,proto3,oneof"`
}

func (*ZInfoNetworkInstance_Vinfo) isZInfoNetworkInstance_InfoContent() {}

func (*ZInfoNetworkInstance_Linfo) isZInfoNetworkInstance_InfoContent() {}

type UsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	RefCount               uint32               `protobuf:"varint,2,opt,name=refCount,proto3" json:"refCount,omitempty"`
	LastRefcountChangeTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=lastRefcountChangeTime,proto3" json:"lastRefcountChangeTime,omitempty"` // Last time when refCount changed
}

func (x *UsageInfo) Reset() {
	*x = UsageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageInfo) ProtoMessage() {}

func (x *UsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageInfo.ProtoReflect.Descriptor instead.
func (*UsageInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{36}
}

func (x *UsageInfo) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UsageInfo) GetRefCount() uint32 {
	if x != nil {
		return x.RefCount
	}
	return 0
}

func (x *UsageInfo) GetLastRefcountChangeTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastRefcountChangeTime
	}
	return nil
}

type VolumeResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSizeBytes uint64 `protobuf:"varint,1,opt,name=maxSizeBytes,proto3" json:"maxSizeBytes,omitempty"` // From config
	CurSizeBytes uint64 `protobuf:"varint,2,opt,name=curSizeBytes,proto3" json:"curSizeBytes,omitempty"` // Current disk usage
}

func (x *VolumeResources) Reset() {
	*x = VolumeResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResources) ProtoMessage() {}

func (x *VolumeResources) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResources.ProtoReflect.Descriptor instead.
func (*VolumeResources) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{37}
}

func (x *VolumeResources) GetMaxSizeBytes() uint64 {
	if x != nil {
		return x.MaxSizeBytes
	}
	return 0
}

func (x *VolumeResources) GetCurSizeBytes() uint64 {
	if x != nil {
		return x.CurSizeBytes
	}
	return 0
}

// Information about a particular volume based on the Volume config
type ZInfoVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisplayName        string           `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Usage              *UsageInfo       `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Resources          *VolumeResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	State              ZSwState         `protobuf:"varint,5,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`
	ProgressPercentage uint32           `protobuf:"varint,6,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Use depends on state i.e., download vs. verification vs. volume creation
	VolumeErr          *ErrorInfo       `protobuf:"bytes,7,opt,name=volumeErr,proto3" json:"volumeErr,omitempty"`
}

func (x *ZInfoVolume) Reset() {
	*x = ZInfoVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVolume) ProtoMessage() {}

func (x *ZInfoVolume) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVolume.ProtoReflect.Descriptor instead.
func (*ZInfoVolume) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{38}
}

func (x *ZInfoVolume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoVolume) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ZInfoVolume) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoVolume) GetResources() *VolumeResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoVolume) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoVolume) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoVolume) GetVolumeErr() *ErrorInfo {
	if x != nil {
		return x.VolumeErr
	}
	return nil
}

type ContentResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSizeBytes uint64 `protobuf:"varint,1,opt,name=curSizeBytes,proto3" json:"curSizeBytes,omitempty"` // Current disk usage
}

func (x *ContentResources) Reset() {
	*x = ContentResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentResources) ProtoMessage() {}

func (x *ContentResources) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentResources.ProtoReflect.Descriptor instead.
func (*ContentResources) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{39}
}

func (x *ContentResources) GetCurSizeBytes() uint64 {
	if x != nil {
		return x.CurSizeBytes
	}
	return 0
}

// ZInfoContentTree is used to describe the top of a tree, which has
// a UUID (and displayName) from the config ContentTree message.
// The components (or blobs) used by that are referenced by the compoentShaList
// and in a separate ZInfoBlobList info message
type ZInfoContentTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisplayName        string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Sha256             string            `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Resources          *ContentResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	Usage              *UsageInfo        `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	State              ZSwState          `protobuf:"varint,6,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`             // INITIAL, DOWNLOAD_STARTED, DOWNLOADED, DELIVERED
	ProgressPercentage uint32            `protobuf:"varint,7,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Depending on state if it is download or verification
	Err                *ErrorInfo        `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`
	ComponentShaList   []string          `protobuf:"bytes,9,rep,name=componentShaList,proto3" json:"componentShaList,omitempty"` // sha's for the referenced blobs
}

func (x *ZInfoContentTree) Reset() {
	*x = ZInfoContentTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoContentTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoContentTree) ProtoMessage() {}

func (x *ZInfoContentTree) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoContentTree.ProtoReflect.Descriptor instead.
func (*ZInfoContentTree) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{40}
}

func (x *ZInfoContentTree) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoContentTree) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ZInfoContentTree) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ZInfoContentTree) GetResources() *ContentResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoContentTree) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoContentTree) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoContentTree) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoContentTree) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *ZInfoContentTree) GetComponentShaList() []string {
	if x != nil {
		return x.ComponentShaList
	}
	return nil
}

type ZInfoBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256             string            `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Resources          *ContentResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Usage              *UsageInfo        `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	State              ZSwState          `protobuf:"varint,4,opt,name=state,proto3,enum=ZSwState" json:"state,omitempty"`             // INITIAL, DOWNLOAD_STARTED, DOWNLOADED, DELIVERED
	ProgressPercentage uint32            `protobuf:"varint,5,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Depending on state if it is download or verification
	Err                *ErrorInfo        `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ZInfoBlob) Reset() {
	*x = ZInfoBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoBlob) ProtoMessage() {}

func (x *ZInfoBlob) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoBlob.ProtoReflect.Descriptor instead.
func (*ZInfoBlob) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{41}
}

func (x *ZInfoBlob) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ZInfoBlob) GetResources() *ContentResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoBlob) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoBlob) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoBlob) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoBlob) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

// For efficiency EVE can send many/all the blobs in one info message
type ZInfoBlobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []*ZInfoBlob `protobuf:"bytes,1,rep,name=blob,proto3" json:"blob,omitempty"`
}

func (x *ZInfoBlobList) Reset() {
	*x = ZInfoBlobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoBlobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoBlobList) ProtoMessage() {}

func (x *ZInfoBlobList) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoBlobList.ProtoReflect.Descriptor instead.
func (*ZInfoBlobList) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{42}
}

func (x *ZInfoBlobList) GetBlob() []*ZInfoBlob {
	if x != nil {
		return x.Blob
	}
	return nil
}

// This is the request payload for POST /api/v1/edgeDevice/info
// ZInfoMsg carries event-triggered state changes for one object (a device,
// an app instance, or a network instance). As such the messages are retransmitted
// until they make it to the controller, however subsequent state change to the
// object will replace any attempts to (re)transmit the previous message for
// that object.
type ZInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ztype ZInfoTypes `protobuf:"varint,1,opt,name=ztype,proto3,enum=ZInfoTypes" json:"ztype,omitempty"`
	DevId string     `protobuf:"bytes,2,opt,name=devId,proto3" json:"devId,omitempty"`
	// Types that are assignable to InfoContent:
	//	*ZInfoMsg_Dinfo
	//	*ZInfoMsg_Ainfo
	//	*ZInfoMsg_Niinfo
	//	*ZInfoMsg_Vinfo
	//	*ZInfoMsg_Cinfo
	//	*ZInfoMsg_Binfo
	InfoContent isZInfoMsg_InfoContent `protobuf_oneof:"InfoContent"`
	AtTimeStamp *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=atTimeStamp,proto3" json:"atTimeStamp,omitempty"`
}

func (x *ZInfoMsg) Reset() {
	*x = ZInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoMsg) ProtoMessage() {}

func (x *ZInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoMsg.ProtoReflect.Descriptor instead.
func (*ZInfoMsg) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{43}
}

func (x *ZInfoMsg) GetZtype() ZInfoTypes {
	if x != nil {
		return x.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (x *ZInfoMsg) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (m *ZInfoMsg) GetInfoContent() isZInfoMsg_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (x *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Dinfo); ok {
		return x.Dinfo
	}
	return nil
}

func (x *ZInfoMsg) GetAinfo() *ZInfoApp {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Ainfo); ok {
		return x.Ainfo
	}
	return nil
}

func (x *ZInfoMsg) GetNiinfo() *ZInfoNetworkInstance {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Niinfo); ok {
		return x.Niinfo
	}
	return nil
}

func (x *ZInfoMsg) GetVinfo() *ZInfoVolume {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (x *ZInfoMsg) GetCinfo() *ZInfoContentTree {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Cinfo); ok {
		return x.Cinfo
	}
	return nil
}

func (x *ZInfoMsg) GetBinfo() *ZInfoBlobList {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Binfo); ok {
		return x.Binfo
	}
	return nil
}

func (x *ZInfoMsg) GetAtTimeStamp() *timestamp.Timestamp {
	if x != nil {
		return x.AtTimeStamp
	}
	return nil
}

type isZInfoMsg_InfoContent interface {
	isZInfoMsg_InfoContent()
}

type ZInfoMsg_Dinfo struct {
	Dinfo *ZInfoDevice `protobuf:"bytes,3,opt,name=dinfo,proto3,oneof"`
}

type ZInfoMsg_Ainfo struct {
	Ainfo *ZInfoApp `protobuf:"bytes,5,opt,name=ainfo,proto3,oneof"`
}

type ZInfoMsg_Niinfo struct {
	// deprecated = 10;
	// deprecated = 11;
	Niinfo *ZInfoNetworkInstance `protobuf:"bytes,12,opt,name=niinfo,proto3,oneof"`
}

type ZInfoMsg_Vinfo struct {
	Vinfo *ZInfoVolume `protobuf:"bytes,13,opt,name=vinfo,proto3,oneof"`
}

type ZInfoMsg_Cinfo struct {
	Cinfo *ZInfoContentTree `protobuf:"bytes,14,opt,name=cinfo,proto3,oneof"`
}

type ZInfoMsg_Binfo struct {
	Binfo *ZInfoBlobList `protobuf:"bytes,15,opt,name=binfo,proto3,oneof"`
}

func (*ZInfoMsg_Dinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Ainfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Niinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Vinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Cinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Binfo) isZInfoMsg_InfoContent() {}

var File_info_info_proto protoreflect.FileDescriptor

var file_info_info_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x76, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x44, 0x65,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x5a, 0x6d, 0x65, 0x74, 0x49, 0x50,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a,
	0x0b, 0x5a, 0x6d, 0x65, 0x74, 0x56, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x22, 0xca, 0x02, 0x0a,
	0x09, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x68, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x4f, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x53, 0x12, 0x32, 0x0a, 0x0d, 0x69, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x49, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x49, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2d, 0x0a, 0x0b, 0x49, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x73,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x69, 0x6f, 0x73,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x6f, 0x4c,
	0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x50,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x22, 0x66, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x4e, 0x53, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x4e, 0x53, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x4e, 0x53, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x44, 0x4e, 0x53, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e,
	0x53, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x4e, 0x53, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xd6, 0x01, 0x0a, 0x07, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x57, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x5a, 0x53, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x76, 0x64, 0x65, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x67, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x75, 0x0a, 0x09, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x72,
	0x72, 0x22, 0x7b, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x0f, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xed, 0x02,
	0x0a, 0x15, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x50, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x17, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a,
	0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x08, 0x0a, 0x0b, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70,
	0x75, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6e, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x52, 0x03,
	0x64, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06,
	0x73, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x53, 0x57, 0x52, 0x06, 0x73, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x48, 0x53, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x48, 0x77,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x48, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x48, 0x53, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x48, 0x53, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x62,
	0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xab, 0x05, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x4d, 0x67, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4d, 0x67, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x68, 0x63,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x68, 0x63,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x68, 0x63,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x68, 0x63,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x22, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x3d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x49, 0x6f, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x55, 0x49, 0x44,
	0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x70, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x70,
	0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x4c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x8c, 0x04, 0x0a, 0x0a, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76,
	0x53, 0x57, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x5a, 0x53, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x77, 0x45, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x73, 0x77, 0x45, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x73,
	0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x03, 0x0a, 0x08, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x57, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x10, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x45, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x45, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x73,
	0x22, 0x5e, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x4e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4e,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x73, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x10, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x45,
	0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0x3d, 0x0a, 0x09, 0x52, 0x6c, 0x6f,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x05, 0x52,
	0x6c, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x6c, 0x6f,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x52, 0x6c, 0x6f, 0x63, 0x73, 0x22, 0x59, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x49, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x52, 0x6c, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x74, 0x72, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x49,
	0x74, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x74, 0x72, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x45, 0x74, 0x72, 0x4e, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x27,
	0x0a, 0x09, 0x44, 0x65, 0x63, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x44, 0x65, 0x63, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x44, 0x65,
	0x63, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xbc, 0x06, 0x0a, 0x14, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x57,
	0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x74, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x2e, 0x0a, 0x12,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3c,
	0x0a, 0x0d, 0x69, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x5a, 0x6d, 0x65, 0x74, 0x49, 0x50, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69,
	0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x76, 0x69, 0x66, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x5a, 0x6d, 0x65, 0x74, 0x56, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x76, 0x69,
	0x66, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x76, 0x34, 0x45, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x45, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x10,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x70, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x59, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0b,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x22, 0x36,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x5a, 0x53,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2f, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22,
	0x2f, 0x0a, 0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x22, 0x83, 0x03, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a,
	0x05, 0x7a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x7a, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x05,
	0x61, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x05, 0x61, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x06, 0x6e, 0x69, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x69, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x75, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x75, 0x67, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x2a, 0x78, 0x0a,
	0x0a, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x5a,
	0x69, 0x4e, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x69, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x69, 0x41, 0x70, 0x70, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x5a, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x69, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x42, 0x6c, 0x6f,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x09, 0x2a, 0x86, 0x02, 0x0a, 0x08, 0x5a, 0x53, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x41, 0x4c, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x52, 0x47, 0x49, 0x4e, 0x47,
	0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0f,
	0x2a, 0x4e, 0x0a, 0x16, 0x48, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x43,
	0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x43, 0x5f, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x4f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xb6,
	0x01, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x73, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x06, 0x2a, 0x8f, 0x01, 0x0a, 0x0d, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x56, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x50, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x50,
	0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56,
	0x50, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x50, 0x4e, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x50, 0x4e, 0x5f, 0x52,
	0x45, 0x4b, 0x45, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x50, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x42, 0x39, 0x0a, 0x13, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d,
	0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_info_proto_rawDescOnce sync.Once
	file_info_info_proto_rawDescData = file_info_info_proto_rawDesc
)

func file_info_info_proto_rawDescGZIP() []byte {
	file_info_info_proto_rawDescOnce.Do(func() {
		file_info_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_info_proto_rawDescData)
	})
	return file_info_info_proto_rawDescData
}

var file_info_info_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_info_info_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_info_info_proto_goTypes = []interface{}{
	(DepMetricItemType)(0),          // 0: DepMetricItemType
	(ZInfoTypes)(0),                 // 1: ZInfoTypes
	(ZSwState)(0),                   // 2: ZSwState
	(HwSecurityModuleStatus)(0),     // 3: HwSecurityModuleStatus
	(DataSecAtRestStatus)(0),        // 4: DataSecAtRestStatus
	(BaseOsStatus)(0),               // 5: BaseOsStatus
	(BaseOsSubStatus)(0),            // 6: BaseOsSubStatus
	(ZInfoVpnState)(0),              // 7: ZInfoVpnState
	(*DeprecatedMetricItem)(nil),    // 8: deprecatedMetricItem
	(*ZmetIPAssignmentEntry)(nil),   // 9: ZmetIPAssignmentEntry
	(*ZmetVifInfo)(nil),             // 10: ZmetVifInfo
	(*ZioBundle)(nil),               // 11: ZioBundle
	(*IoAddresses)(nil),             // 12: IoAddresses
	(*ZInfoManufacturer)(nil),       // 13: ZInfoManufacturer
	(*ZInfoNetwork)(nil),            // 14: ZInfoNetwork
	(*GeoLoc)(nil),                  // 15: GeoLoc
	(*ZInfoDNS)(nil),                // 16: ZInfoDNS
	(*ZInfoSW)(nil),                 // 17: ZInfoSW
	(*ErrorInfo)(nil),               // 18: ErrorInfo
	(*VaultInfo)(nil),               // 19: VaultInfo
	(*DataSecAtRest)(nil),           // 20: DataSecAtRest
	(*ZInfoConfigItem)(nil),         // 21: ZInfoConfigItem
	(*ZInfoConfigItemStatus)(nil),   // 22: ZInfoConfigItemStatus
	(*ZInfoAppInstance)(nil),        // 23: ZInfoAppInstance
	(*ZInfoDevice)(nil),             // 24: ZInfoDevice
	(*SystemAdapterInfo)(nil),       // 25: SystemAdapterInfo
	(*DevicePortStatus)(nil),        // 26: DevicePortStatus
	(*DevicePort)(nil),              // 27: DevicePort
	(*ProxyStatus)(nil),             // 28: ProxyStatus
	(*ProxyEntry)(nil),              // 29: ProxyEntry
	(*ZInfoDevSW)(nil),              // 30: ZInfoDevSW
	(*ZInfoStorage)(nil),            // 31: ZInfoStorage
	(*ZInfoApp)(nil),                // 32: ZInfoApp
	(*ZInfoVpnLinkInfo)(nil),        // 33: ZInfoVpnLinkInfo
	(*ZInfoVpnLink)(nil),            // 34: ZInfoVpnLink
	(*ZInfoVpnEndPoint)(nil),        // 35: ZInfoVpnEndPoint
	(*ZInfoVpnConn)(nil),            // 36: ZInfoVpnConn
	(*ZInfoVpn)(nil),                // 37: ZInfoVpn
	(*RlocState)(nil),               // 38: RlocState
	(*MapCacheEntry)(nil),           // 39: MapCacheEntry
	(*DatabaseMap)(nil),             // 40: DatabaseMap
	(*DecapKey)(nil),                // 41: DecapKey
	(*ZInfoLisp)(nil),               // 42: ZInfoLisp
	(*ZInfoNetworkInstance)(nil),    // 43: ZInfoNetworkInstance
	(*UsageInfo)(nil),               // 44: UsageInfo
	(*VolumeResources)(nil),         // 45: VolumeResources
	(*ZInfoVolume)(nil),             // 46: ZInfoVolume
	(*ContentResources)(nil),        // 47: ContentResources
	(*ZInfoContentTree)(nil),        // 48: ZInfoContentTree
	(*ZInfoBlob)(nil),               // 49: ZInfoBlob
	(*ZInfoBlobList)(nil),           // 50: ZInfoBlobList
	(*ZInfoMsg)(nil),                // 51: ZInfoMsg
	nil,                             // 52: ZInfoConfigItemStatus.ConfigItemsEntry
	nil,                             // 53: ZInfoConfigItemStatus.UnknownConfigItemsEntry
	(evecommon.PhyIoType)(0),        // 54: org.lfedge.eve.common.PhyIoType
	(evecommon.PhyIoMemberUsage)(0), // 55: org.lfedge.eve.common.PhyIoMemberUsage
	(*timestamp.Timestamp)(nil),     // 56: google.protobuf.Timestamp
}
var file_info_info_proto_depIdxs = []int32{
	0,  // 0: deprecatedMetricItem.type:type_name -> DepMetricItemType
	54, // 1: ZioBundle.type:type_name -> org.lfedge.eve.common.PhyIoType
	12, // 2: ZioBundle.ioAddressList:type_name -> IoAddresses
	55, // 3: ZioBundle.usage:type_name -> org.lfedge.eve.common.PhyIoMemberUsage
	18, // 4: ZioBundle.err:type_name -> ErrorInfo
	16, // 5: ZInfoNetwork.dns:type_name -> ZInfoDNS
	15, // 6: ZInfoNetwork.location:type_name -> GeoLoc
	18, // 7: ZInfoNetwork.networkErr:type_name -> ErrorInfo
	28, // 8: ZInfoNetwork.proxy:type_name -> ProxyStatus
	2,  // 9: ZInfoSW.state:type_name -> ZSwState
	56, // 10: ErrorInfo.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 11: VaultInfo.status:type_name -> DataSecAtRestStatus
	18, // 12: VaultInfo.vaultErr:type_name -> ErrorInfo
	4,  // 13: DataSecAtRest.status:type_name -> DataSecAtRestStatus
	19, // 14: DataSecAtRest.vaultList:type_name -> VaultInfo
	52, // 15: ZInfoConfigItemStatus.configItems:type_name -> ZInfoConfigItemStatus.ConfigItemsEntry
	53, // 16: ZInfoConfigItemStatus.unknownConfigItems:type_name -> ZInfoConfigItemStatus.UnknownConfigItemsEntry
	13, // 17: ZInfoDevice.minfo:type_name -> ZInfoManufacturer
	14, // 18: ZInfoDevice.network:type_name -> ZInfoNetwork
	11, // 19: ZInfoDevice.assignableAdapters:type_name -> ZioBundle
	16, // 20: ZInfoDevice.dns:type_name -> ZInfoDNS
	31, // 21: ZInfoDevice.storageList:type_name -> ZInfoStorage
	56, // 22: ZInfoDevice.bootTime:type_name -> google.protobuf.Timestamp
	30, // 23: ZInfoDevice.swList:type_name -> ZInfoDevSW
	8,  // 24: ZInfoDevice.metricItems:type_name -> deprecatedMetricItem
	56, // 25: ZInfoDevice.lastRebootTime:type_name -> google.protobuf.Timestamp
	25, // 26: ZInfoDevice.systemAdapter:type_name -> SystemAdapterInfo
	3,  // 27: ZInfoDevice.HSMStatus:type_name -> HwSecurityModuleStatus
	20, // 28: ZInfoDevice.dataSecAtRestInfo:type_name -> DataSecAtRest
	22, // 29: ZInfoDevice.configItemStatus:type_name -> ZInfoConfigItemStatus
	23, // 30: ZInfoDevice.appInstances:type_name -> ZInfoAppInstance
	26, // 31: SystemAdapterInfo.status:type_name -> DevicePortStatus
	56, // 32: DevicePortStatus.timePriority:type_name -> google.protobuf.Timestamp
	56, // 33: DevicePortStatus.lastFailed:type_name -> google.protobuf.Timestamp
	56, // 34: DevicePortStatus.lastSucceeded:type_name -> google.protobuf.Timestamp
	27, // 35: DevicePortStatus.ports:type_name -> DevicePort
	28, // 36: DevicePort.proxy:type_name -> ProxyStatus
	16, // 37: DevicePort.dns:type_name -> ZInfoDNS
	15, // 38: DevicePort.location:type_name -> GeoLoc
	18, // 39: DevicePort.err:type_name -> ErrorInfo
	55, // 40: DevicePort.usage:type_name -> org.lfedge.eve.common.PhyIoMemberUsage
	29, // 41: ProxyStatus.proxies:type_name -> ProxyEntry
	2,  // 42: ZInfoDevSW.status:type_name -> ZSwState
	18, // 43: ZInfoDevSW.swErr:type_name -> ErrorInfo
	5,  // 44: ZInfoDevSW.userStatus:type_name -> BaseOsStatus
	6,  // 45: ZInfoDevSW.subStatus:type_name -> BaseOsSubStatus
	17, // 46: ZInfoApp.softwareList:type_name -> ZInfoSW
	56, // 47: ZInfoApp.bootTime:type_name -> google.protobuf.Timestamp
	11, // 48: ZInfoApp.assignedAdapters:type_name -> ZioBundle
	18, // 49: ZInfoApp.appErr:type_name -> ErrorInfo
	2,  // 50: ZInfoApp.state:type_name -> ZSwState
	14, // 51: ZInfoApp.network:type_name -> ZInfoNetwork
	7,  // 52: ZInfoVpnLink.state:type_name -> ZInfoVpnState
	33, // 53: ZInfoVpnLink.lInfo:type_name -> ZInfoVpnLinkInfo
	33, // 54: ZInfoVpnLink.rInfo:type_name -> ZInfoVpnLinkInfo
	7,  // 55: ZInfoVpnConn.state:type_name -> ZInfoVpnState
	35, // 56: ZInfoVpnConn.lInfo:type_name -> ZInfoVpnEndPoint
	35, // 57: ZInfoVpnConn.rInfo:type_name -> ZInfoVpnEndPoint
	34, // 58: ZInfoVpnConn.links:type_name -> ZInfoVpnLink
	36, // 59: ZInfoVpn.conn:type_name -> ZInfoVpnConn
	38, // 60: MapCacheEntry.Rlocs:type_name -> RlocState
	39, // 61: DatabaseMap.MapCacheEntries:type_name -> MapCacheEntry
	40, // 62: ZInfoLisp.DatabaseMaps:type_name -> DatabaseMap
	41, // 63: ZInfoLisp.DecapKeys:type_name -> DecapKey
	56, // 64: ZInfoNetworkInstance.upTimeStamp:type_name -> google.protobuf.Timestamp
	17, // 65: ZInfoNetworkInstance.softwareList:type_name -> ZInfoSW
	9,  // 66: ZInfoNetworkInstance.ipAssignments:type_name -> ZmetIPAssignmentEntry
	10, // 67: ZInfoNetworkInstance.vifs:type_name -> ZmetVifInfo
	11, // 68: ZInfoNetworkInstance.assignedAdapters:type_name -> ZioBundle
	37, // 69: ZInfoNetworkInstance.vinfo:type_name -> ZInfoVpn
	42, // 70: ZInfoNetworkInstance.linfo:type_name -> ZInfoLisp
	18, // 71: ZInfoNetworkInstance.networkErr:type_name -> ErrorInfo
	56, // 72: UsageInfo.createTime:type_name -> google.protobuf.Timestamp
	56, // 73: UsageInfo.lastRefcountChangeTime:type_name -> google.protobuf.Timestamp
	44, // 74: ZInfoVolume.usage:type_name -> UsageInfo
	45, // 75: ZInfoVolume.resources:type_name -> VolumeResources
	2,  // 76: ZInfoVolume.state:type_name -> ZSwState
	18, // 77: ZInfoVolume.volumeErr:type_name -> ErrorInfo
	47, // 78: ZInfoContentTree.resources:type_name -> ContentResources
	44, // 79: ZInfoContentTree.usage:type_name -> UsageInfo
	2,  // 80: ZInfoContentTree.state:type_name -> ZSwState
	18, // 81: ZInfoContentTree.err:type_name -> ErrorInfo
	47, // 82: ZInfoBlob.resources:type_name -> ContentResources
	44, // 83: ZInfoBlob.usage:type_name -> UsageInfo
	2,  // 84: ZInfoBlob.state:type_name -> ZSwState
	18, // 85: ZInfoBlob.err:type_name -> ErrorInfo
	49, // 86: ZInfoBlobList.blob:type_name -> ZInfoBlob
	1,  // 87: ZInfoMsg.ztype:type_name -> ZInfoTypes
	24, // 88: ZInfoMsg.dinfo:type_name -> ZInfoDevice
	32, // 89: ZInfoMsg.ainfo:type_name -> ZInfoApp
	43, // 90: ZInfoMsg.niinfo:type_name -> ZInfoNetworkInstance
	46, // 91: ZInfoMsg.vinfo:type_name -> ZInfoVolume
	48, // 92: ZInfoMsg.cinfo:type_name -> ZInfoContentTree
	50, // 93: ZInfoMsg.binfo:type_name -> ZInfoBlobList
	56, // 94: ZInfoMsg.atTimeStamp:type_name -> google.protobuf.Timestamp
	21, // 95: ZInfoConfigItemStatus.ConfigItemsEntry.value:type_name -> ZInfoConfigItem
	21, // 96: ZInfoConfigItemStatus.UnknownConfigItemsEntry.value:type_name -> ZInfoConfigItem
	97, // [97:97] is the sub-list for method output_type
	97, // [97:97] is the sub-list for method input_type
	97, // [97:97] is the sub-list for extension type_name
	97, // [97:97] is the sub-list for extension extendee
	0,  // [0:97] is the sub-list for field type_name
}

func init() { file_info_info_proto_init() }
func file_info_info_proto_init() {
	if File_info_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedMetricItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmetIPAssignmentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmetVifInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZioBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IoAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoManufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSecAtRest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoConfigItemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoAppInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAdapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDevSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnEndPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlocState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCacheEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoLisp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoNetworkInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoContentTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoBlobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_info_info_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DeprecatedMetricItem_BoolValue)(nil),
		(*DeprecatedMetricItem_Uint32Value)(nil),
		(*DeprecatedMetricItem_Uint64Value)(nil),
		(*DeprecatedMetricItem_FloatValue)(nil),
		(*DeprecatedMetricItem_StringValue)(nil),
	}
	file_info_info_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*ZInfoNetworkInstance_Vinfo)(nil),
		(*ZInfoNetworkInstance_Linfo)(nil),
	}
	file_info_info_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*ZInfoMsg_Dinfo)(nil),
		(*ZInfoMsg_Ainfo)(nil),
		(*ZInfoMsg_Niinfo)(nil),
		(*ZInfoMsg_Vinfo)(nil),
		(*ZInfoMsg_Cinfo)(nil),
		(*ZInfoMsg_Binfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_info_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_info_proto_goTypes,
		DependencyIndexes: file_info_info_proto_depIdxs,
		EnumInfos:         file_info_info_proto_enumTypes,
		MessageInfos:      file_info_info_proto_msgTypes,
	}.Build()
	File_info_info_proto = out.File
	file_info_info_proto_rawDesc = nil
	file_info_info_proto_goTypes = nil
	file_info_info_proto_depIdxs = nil
}
