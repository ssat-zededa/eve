// Copyright(c) 2020 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

import "certs/certs.proto";

package org.lfedge.eve.attest;
option go_package  = "github.com/lf-edge/eve/api/go/attest";
option java_package = "org.lfedge.eve.attest";

// This is the request payload for POST /api/v2/edgeDevice/id/<uuid>/attest
// The message is assumed to be protected by signing envelope
message ZAttestReq {
  ZAttestReqType reqType = 1;  //type of the request
  ZAttestQuote quote = 2;      //attestation quote msg
  repeated org.lfedge.eve.certs.ZCert certs = 3;    //X509 certs in .PEM format, signed by device certificate
  AttestStorageKeys storage_keys = 4;    //secrets to be ESCROW'ed with Controller, like keys for the volume storage vaults
}

// This is the response payload for POST /api/v2/edgeDevice/id/<uuid>/attest
// The message is assumed to be protected by signing envelope
message ZAttestResponse {
  ZAttestRespType respType = 1;    //type of the response
  ZAttestNonceResp nonce = 2;      //nonce from Controller
  ZAttestQuoteResp quoteResp = 3;  //attest quote response from Controller
  AttestStorageKeysResp  storage_keys_resp = 4;   //attest storage_keys response from Controller
}

enum ZAttestReqType {
  ATTEST_REQ_NONE = 0;
  ATTEST_REQ_CERT = 1;   //EVE X.509 certificates
  ATTEST_REQ_NONCE = 2;  //nonce request to Controller
  ATTEST_REQ_QUOTE = 3;  //quote msg
  Z_ATTEST_REQ_TYPE_STORE_KEYS = 4; //to store device keys in Controller
}

enum ZAttestRespType {
  ATTEST_RESP_NONE = 0;
  ATTEST_RESP_CERT = 1;       //response to cert msg
  ATTEST_RESP_NONCE = 2;      //response to quote request
  ATTEST_RESP_QUOTE_RESP = 3; //response to quote msg
  Z_ATTEST_RESP_TYPE_STORE_KEYS = 4; //response to Z_ATTEST_REQ_TYPE_STORE_KEYS
}

message ZAttestNonceResp {
  bytes nonce = 1;      //nonce to use in quote generation
}

//Hash algo used in digests, and PCR Extend operations
enum TpmHashAlgo {
  TPM_HASH_ALGO_INVALID = 0;
  TPM_HASH_ALGO_SHA1 = 1;
  TPM_HASH_ALGO_SHA256 = 2;
  TPM_HASH_ALGO_SHA512 = 3;
}

//A hash algo, and corresponding digest derived using that algo
message TpmEventDigest {
   TpmHashAlgo hash_algo = 1;
   bytes digest = 2;
}

//Taken from
//5.2 Crypto Agile Log Entry Format, from https://trustedcomputinggroup.org/wp-content/uploads/EFI-Protocol-Specification-rev13-160330final.pdf
message TpmEventLogEntry {
   uint32 index = 1;             // Sequential index of event in the log
   uint32 pcr_index = 2;         // PCR index to which this event was measured
   uint32 event_type = 3;        // The type of this event
   TpmEventDigest digest = 4;    // The digest corresponding to this event
   bytes  event_data_binary = 5; // The raw event data bytes
   string event_data_string = 6; // Textual representation of the event data
}

enum AttestGPSInput {
   ATTEST_GPS_INPUT_INVALID = 0;
   ATTEST_GPS_INPUT_PRESENT = 1; //GPS Co-ordinates are available
   ATTEST_GPS_INPUT_ABSENT  = 2; //GPS Co-ordineates are not available/reliable
}

message AttestGPSCoordinates {
   AttestGPSInput gps_input = 1; // Are the co-ordinates populated ?
   double latitude = 2;          // Latitude of the device geo-location
   double longitude = 3;         // Longitude of the device geo-location
}

enum AttestVersionType {
   ATTEST_VERSION_TYPE_INVALID = 0;
   ATTEST_VERSION_TYPE_EVE = 1;      // BaseOS version
   ATTEST_VERSION_TYPE_FIRMWARE = 2; // Firmware version (e.g. UEFI)
}

//examples
//ATTEST_VERSION_TYPE_EVE, "5.6.1-amd64"
//ATTEST_VERSION_TYPE_FIRMWARE, "American Megatrends Inc.-5.12"
message AttestVersionInfo {
   AttestVersionType version_type = 1; // One of VersionType
   string version = 2;                 // Version string of the corresponding package
}

//Holds one single PCR value from TPM, from a particular hash bank
message TpmPCRValue {
   uint32 index = 1;          //PCR index
   TpmHashAlgo hash_algo = 2; //SHA1/SHA256/SHA384/SHA256
   bytes value = 3;           //value in PCR
}

//attestData is taken from
//TPMS_ATTEST Table 2:123) in https://trustedcomputinggroup.org/wp-content/uploads/TPM-Rev-2.0-Part-2-Structures-01.38.pdf
message ZAttestQuote {
  bytes attestData = 1;                     // Nonce is included in attestData, see comment above
  bytes signature = 2;                      // Signature to verify attestData
  repeated TpmPCRValue pcr_values = 3;      // Current values of TPM PCRs 0-15
  repeated TpmEventLogEntry event_log = 4;  // TPM Event log
  repeated AttestVersionInfo versions = 5;  // Versions of various software packages, as defined by VersionType
  AttestGPSCoordinates gps_info = 6;        // Geo-Coordinates of the device
}

enum ZAttestResponseCode {
  Z_ATTEST_RESPONSE_CODE_INVALID = 0;
  Z_ATTEST_RESPONSE_CODE_SUCCESS = 1;         //Attestation successful
  Z_ATTEST_RESPONSE_CODE_NONCE_MISMATCH = 2;  //Attestation failed due to nonce mismatch
  Z_ATTEST_RESPONSE_CODE_NO_CERT_FOUND = 3;   //There was no attestation certificate in Controller to validate attestation quote
  Z_ATTEST_RESPONSE_CODE_QUOTE_FAILED = 4;    //Attestation failed due to quote mismatch
}

enum AttestVolumeKeyType {
  ATTEST_VOLUME_KEY_TYPE_INVALID = 0;
  ATTEST_VOLUME_KEY_TYPE_VSK = 1;     //Volume storage key, for /persist/vault
}

message AttestVolumeKey {
  AttestVolumeKeyType key_type = 1;
  bytes key = 2;
}

message ZAttestQuoteResp {
  ZAttestResponseCode response = 1;  // Result of quote validation
  bytes integrity_token = 2;         // Valid if response is ATTEST_RESPONSE_SUCCESS, contains integrity token for device to
                                     // Cache and present in the next config request
  repeated AttestVolumeKey keys = 3; // Valid if response is ATTEST_RESPONSE_SUCCESS, contains keys of type KeyType to unlock
                                     // volume vault(s)
}

//Data to ESCROW against software updates
message AttestStorageKeys {
  bytes integrity_token = 1;         // integrity_token provided by controller in the last attestation cycle
  repeated AttestVolumeKey keys = 2; // Encrypted keys for volume vault(s)
}

enum AttestStorageKeysResponseCode {
  ATTEST_STORAGE_KEYS_RESPONSE_CODE_INVALID = 0;
  ATTEST_STORAGE_KEYS_RESPONSE_CODE_SUCCESS = 1;         // key(s) successfully stored
  ATTEST_STORAGE_KEYS_RESPONSE_CODE_ITOKEN_MISMATCH = 2; // integrity_token was not valid, try after successful attestation
}

message AttestStorageKeysResp {
  AttestStorageKeysResponseCode response = 1;    //Result of processing Z_ATTEST_REQ_TYPE_STORE_KEYS in Controller
}

message AttestVolumeKeyData {
  bytes encrypted_key = 1; //key in encrypted format
  bytes digest_sha256 = 2; //SHA 256 digest of the key
}

