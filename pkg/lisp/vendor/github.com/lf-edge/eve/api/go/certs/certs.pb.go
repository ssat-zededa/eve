// Code generated by protoc-gen-go. DO NOT EDIT.
// source: certs.proto

package certs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//This is same as hashAlgorithm in auth/auth.proto
//Keep these two in sync
//XXX: import auth/auth.proto and avoid this duplication
type CertHashAlgorithm int32

const (
	CertHashAlgorithm_HASH_NONE           CertHashAlgorithm = 0
	CertHashAlgorithm_HASH_SHA256_16bytes CertHashAlgorithm = 1
	CertHashAlgorithm_HASH_SHA256_32bytes CertHashAlgorithm = 2
)

var CertHashAlgorithm_name = map[int32]string{
	0: "HASH_NONE",
	1: "HASH_SHA256_16bytes",
	2: "HASH_SHA256_32bytes",
}

var CertHashAlgorithm_value = map[string]int32{
	"HASH_NONE":           0,
	"HASH_SHA256_16bytes": 1,
	"HASH_SHA256_32bytes": 2,
}

func (x CertHashAlgorithm) String() string {
	return proto.EnumName(CertHashAlgorithm_name, int32(x))
}

func (CertHashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78c43cca93027bbd, []int{0}
}

type ZCertType int32

const (
	ZCertType_CERT_TYPE_CONTROLLER_NONE          ZCertType = 0
	ZCertType_CERT_TYPE_CONTROLLER_SIGNING       ZCertType = 1
	ZCertType_CERT_TYPE_CONTROLLER_INTERMEDIATE  ZCertType = 2
	ZCertType_CERT_TYPE_CONTROLLER_ECDH_EXCHANGE ZCertType = 3
)

var ZCertType_name = map[int32]string{
	0: "CERT_TYPE_CONTROLLER_NONE",
	1: "CERT_TYPE_CONTROLLER_SIGNING",
	2: "CERT_TYPE_CONTROLLER_INTERMEDIATE",
	3: "CERT_TYPE_CONTROLLER_ECDH_EXCHANGE",
}

var ZCertType_value = map[string]int32{
	"CERT_TYPE_CONTROLLER_NONE":          0,
	"CERT_TYPE_CONTROLLER_SIGNING":       1,
	"CERT_TYPE_CONTROLLER_INTERMEDIATE":  2,
	"CERT_TYPE_CONTROLLER_ECDH_EXCHANGE": 3,
}

func (x ZCertType) String() string {
	return proto.EnumName(ZCertType_name, int32(x))
}

func (ZCertType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78c43cca93027bbd, []int{1}
}

//Â This is the response payload for GET /api/v1/edgeDevice/certs
// or /api/v2/edgeDevice/certs
// ZControllerCert carries a set of X.509 certificate and their properties
// from Controller to EVE.
type ZControllerCert struct {
	Certs                []*ZCert `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZControllerCert) Reset()         { *m = ZControllerCert{} }
func (m *ZControllerCert) String() string { return proto.CompactTextString(m) }
func (*ZControllerCert) ProtoMessage()    {}
func (*ZControllerCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_78c43cca93027bbd, []int{0}
}

func (m *ZControllerCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZControllerCert.Unmarshal(m, b)
}
func (m *ZControllerCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZControllerCert.Marshal(b, m, deterministic)
}
func (m *ZControllerCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZControllerCert.Merge(m, src)
}
func (m *ZControllerCert) XXX_Size() int {
	return xxx_messageInfo_ZControllerCert.Size(m)
}
func (m *ZControllerCert) XXX_DiscardUnknown() {
	xxx_messageInfo_ZControllerCert.DiscardUnknown(m)
}

var xxx_messageInfo_ZControllerCert proto.InternalMessageInfo

func (m *ZControllerCert) GetCerts() []*ZCert {
	if m != nil {
		return m.Certs
	}
	return nil
}

type ZCert struct {
	HashAlgo             CertHashAlgorithm `protobuf:"varint,1,opt,name=hashAlgo,proto3,enum=CertHashAlgorithm" json:"hashAlgo,omitempty"`
	CertHash             []byte            `protobuf:"bytes,2,opt,name=certHash,proto3" json:"certHash,omitempty"`
	Type                 ZCertType         `protobuf:"varint,3,opt,name=type,proto3,enum=ZCertType" json:"type,omitempty"`
	Cert                 []byte            `protobuf:"bytes,4,opt,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ZCert) Reset()         { *m = ZCert{} }
func (m *ZCert) String() string { return proto.CompactTextString(m) }
func (*ZCert) ProtoMessage()    {}
func (*ZCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_78c43cca93027bbd, []int{1}
}

func (m *ZCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZCert.Unmarshal(m, b)
}
func (m *ZCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZCert.Marshal(b, m, deterministic)
}
func (m *ZCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZCert.Merge(m, src)
}
func (m *ZCert) XXX_Size() int {
	return xxx_messageInfo_ZCert.Size(m)
}
func (m *ZCert) XXX_DiscardUnknown() {
	xxx_messageInfo_ZCert.DiscardUnknown(m)
}

var xxx_messageInfo_ZCert proto.InternalMessageInfo

func (m *ZCert) GetHashAlgo() CertHashAlgorithm {
	if m != nil {
		return m.HashAlgo
	}
	return CertHashAlgorithm_HASH_NONE
}

func (m *ZCert) GetCertHash() []byte {
	if m != nil {
		return m.CertHash
	}
	return nil
}

func (m *ZCert) GetType() ZCertType {
	if m != nil {
		return m.Type
	}
	return ZCertType_CERT_TYPE_CONTROLLER_NONE
}

func (m *ZCert) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func init() {
	proto.RegisterEnum("CertHashAlgorithm", CertHashAlgorithm_name, CertHashAlgorithm_value)
	proto.RegisterEnum("ZCertType", ZCertType_name, ZCertType_value)
	proto.RegisterType((*ZControllerCert)(nil), "ZControllerCert")
	proto.RegisterType((*ZCert)(nil), "ZCert")
}

func init() {
	proto.RegisterFile("certs.proto", fileDescriptor_78c43cca93027bbd)
}

var fileDescriptor_78c43cca93027bbd = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0xaf, 0xd2, 0x40,
	0x14, 0x86, 0x1d, 0xbe, 0x02, 0x07, 0x3f, 0xea, 0xb8, 0xb0, 0x1a, 0xd4, 0x8a, 0xd1, 0x10, 0x12,
	0xa7, 0xb1, 0x44, 0xf6, 0xb5, 0x8c, 0xb4, 0x09, 0x16, 0x33, 0x74, 0xa1, 0x6c, 0x1a, 0x68, 0xc7,
	0xb6, 0x49, 0x71, 0x9a, 0x76, 0x20, 0xc1, 0x3f, 0xe0, 0x8f, 0xb8, 0x7f, 0xf6, 0x86, 0xe9, 0x85,
	0xc5, 0xbd, 0xec, 0xe6, 0x3c, 0xef, 0x33, 0xe7, 0x5d, 0x1c, 0xe8, 0x47, 0xbc, 0x94, 0x15, 0x29,
	0x4a, 0x21, 0xc5, 0xd0, 0x84, 0x67, 0x6b, 0x47, 0xfc, 0x95, 0xa5, 0xc8, 0x73, 0x5e, 0x3a, 0xbc,
	0x94, 0x78, 0x00, 0x6d, 0x65, 0xe8, 0xc8, 0x68, 0x8e, 0xfa, 0x56, 0x87, 0xac, 0x4f, 0x98, 0xd5,
	0x70, 0xf8, 0x1f, 0x41, 0x5b, 0x01, 0x4c, 0xa0, 0x9b, 0x6e, 0xaa, 0xd4, 0xce, 0x13, 0xa1, 0x23,
	0x03, 0x8d, 0x9e, 0x5a, 0x98, 0x9c, 0x1c, 0xf7, 0x0e, 0x96, 0x99, 0x4c, 0x77, 0xec, 0xe2, 0xe0,
	0xd7, 0xd0, 0x3d, 0xc7, 0x7a, 0xc3, 0x40, 0xa3, 0xc7, 0xec, 0x32, 0xe3, 0xb7, 0xd0, 0x92, 0xc7,
	0x82, 0xeb, 0x4d, 0xb5, 0x07, 0xea, 0xca, 0xe0, 0x58, 0x70, 0xa6, 0x38, 0xc6, 0xd0, 0x3a, 0xb9,
	0x7a, 0x4b, 0xfd, 0x53, 0xef, 0x71, 0x00, 0xcf, 0x1f, 0xd4, 0xe1, 0x27, 0xd0, 0x73, 0xed, 0x95,
	0x1b, 0xfa, 0x4b, 0x9f, 0x6a, 0x8f, 0xf0, 0x4b, 0x78, 0xa1, 0xc6, 0x95, 0x6b, 0x5b, 0x5f, 0xa7,
	0xe1, 0x97, 0xe9, 0xf6, 0x28, 0x79, 0xa5, 0xa1, 0xfb, 0xc1, 0xc4, 0xaa, 0x83, 0xc6, 0xf8, 0x06,
	0x41, 0xef, 0xd2, 0x8e, 0xdf, 0xc0, 0x2b, 0x87, 0xb2, 0x20, 0x0c, 0x7e, 0xff, 0xa4, 0xa1, 0xb3,
	0xf4, 0x03, 0xb6, 0x5c, 0x2c, 0x28, 0x3b, 0xaf, 0x37, 0x60, 0x70, 0x35, 0x5e, 0x79, 0x73, 0xdf,
	0xf3, 0xe7, 0x1a, 0xc2, 0x1f, 0xe1, 0xfd, 0x55, 0xc3, 0xf3, 0x03, 0xca, 0x7e, 0xd0, 0x99, 0x67,
	0x07, 0x54, 0x6b, 0xe0, 0x4f, 0x30, 0xbc, 0xaa, 0x51, 0x67, 0xe6, 0x86, 0xf4, 0x97, 0xe3, 0xda,
	0xfe, 0x9c, 0x6a, 0xcd, 0x6f, 0xdf, 0xe1, 0x5d, 0x24, 0x76, 0xe4, 0x1f, 0x8f, 0x79, 0xbc, 0x21,
	0x51, 0x2e, 0xf6, 0x31, 0xd9, 0x57, 0xbc, 0x3c, 0x64, 0x11, 0xaf, 0x2f, 0xba, 0xfe, 0x90, 0x64,
	0x32, 0xdd, 0x6f, 0x49, 0x24, 0x76, 0x66, 0xfe, 0xe7, 0x33, 0x8f, 0x13, 0x6e, 0xf2, 0x03, 0x37,
	0x37, 0x45, 0x66, 0x26, 0xc2, 0x54, 0x57, 0xdc, 0x76, 0x94, 0x3b, 0xb9, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x37, 0x18, 0x18, 0x0c, 0x02, 0x00, 0x00,
}
