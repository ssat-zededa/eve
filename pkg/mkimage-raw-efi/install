#!/bin/sh
# shellcheck shell=dash
#
# This script is an entry point for a standalone installer.
# It is expected to probe for the destination installtion
# media and arrange for source files to be in /parts. Some
# of these files will be supplied from outside of the container
# in /bits, some will be constructed on the fly depending
# on settings that were passed via kernel command line:
#   eve_install_disk
#   eve_pause_before_install
#   eve_pause_after_install
#   eve_install_skip_config
#   eve_install_skip_persist
#   eve_install_skip_rootfs
#
[ -n "$DEBUG" ] && set -x

pause() {
   echo "Pausing before $1. Entering shell. Type 'exit' to proceed to $1"
   sh
}

bail() {
   if mount_part INVENTORY "$(root_dev)" -t vfat -o iocharset=iso8859-1; then
      collect_black_box /run/INVENTORY 2>/dev/null
   fi
   echo "$*"
   exit 1
}

trunc() {
  rm "$1"
  touch "$1"
}

root_dev() {
   local MAJOR
   local MINOR
   local DEV=$(readlink -f /dev/root 2>/dev/null)
   if [ -z "$DEV" ] ; then
      MAJOR=$(( $(stat -c '%d' /hostfs ) / 256))
      MINOR=$(( $(stat -c '%d' /hostfs ) - $MAJOR * 256 ))
   else
      MAJOR=$(( 0x$(stat -c '%t' $DEV) + 0 ))
      MINOR=$(( 0x$(stat -c '%T' $DEV) + 0 ))
   fi
   DEV_MM="$MAJOR:$MINOR"
   echo $(grep -l '^'$DEV_MM'$' /sys/block/*/dev /sys/block/*/*/dev 2>/dev/null | cut -f4 -d/)
}

# find_part LABEL BLOCK_DEV
find_part() {
   PARTS=$(lsblk -anl -o "NAME,PARTLABEL" 2>/dev/null | sed -ne "/$1"'$/s#'"$1##p")
   for p in $PARTS ; do
      [ -f "/sys/block/$2/$p/dev" ] && echo "$p" && exit 0
   done
}

# mount_part PART_NAME DISK [mount opts]
mount_part() {
   local PART="$1"
   local DISK="$2"
   local ID
   shift 2

   ID="$(find_part "$PART" "$DISK")"
   [ -z "$ID" ] && return 1

   mkdir -p "/run/$PART"
   mount "$@" "/dev/$ID" "/run/$PART"
}

#collect_tpm_info FILE_TO_DEPOSIT_TPM_INFO
collect_tpm_info() {
   # Link /proc/self/fd from /dev/fd
   ln -s /proc/self/fd /dev/fd
   PILLAR=/mnt/containers/services/pillar/lower
   "$PILLAR"/opt/zededa/bin/tpmmgr saveTpmInfo "$1"
}

# collect_black_box FOLDER_TO_PUT_BLACK_BOX
collect_black_box() {
   lsblk > "$1/lsblk.txt"
   dmesg > "$1/dmesg.txt"
   tar -C /proc -cjf "$1/procfs.tar.bz2" cpuinfo meminfo
   tar -C /sys -cjf "$1/sysfs.tar.bz2" .
   tar -C /run/CONFIG -cjf "$1/config.tar.bz2" .
   tar -C /run/P3 -cjf "$1/persist.tar.bz2" status rsyslog log config checkpoint certs agentdebug
   collect_tpm_info "$1"/tpminfo.txt
}

# measure of last resort: we nuke all partition tables
# so that we can get to a blank state. NOTE that this
# may damage installer image itself, but we don't really
# care since that is trivial to re-create
if grep -q eve_nuke_all_disks /proc/cmdline; then
   echo -n "Nuking partition tables on:"
   for i in $(lsblk -anlb -o "TYPE,NAME,SIZE" | grep "^disk" | awk '$3 { print $2;}'); do
      echo -n " $i"
      dd if=/dev/zero of="/dev/$i" bs=512 count=34 >/dev/null 2>&1
   done
   sync; sleep 5; sync
   echo " done!"
   poweroff -f
fi

# if we are running without a real root filesystem - we have to fake it here
if [ ! -e /dev/root ]; then
   # we are running off of an initrd or initramfs
   # relying on init setting up mount points for us under /media
   [ -d /media/boot ] || bail "FATAL: can't find installation artifacts"

   ln -s /media/boot /bits
   ln -s "/dev/$(basename "$(readlink /media/boot)")" /dev/root

   # FIXME: we need to run one thing from the install image to seed
   # the random generator for sgdisk invocatin via make-raw. We also
   # use this opportunity to make sure that USB keyboard is functional
   # for any kind of debugging we may need to do. This needs to go away
   # soon as part of the overall restructuring of
   # /install vs. make-raw vs. /init
   mkdir -p /mnt || :
   mount -o ro /bits/rootfs.img /mnt &&
      /mnt/containers/onboot/*rngd/rootfs/sbin/rngd -1
   mount --bind /mnt/lib/modules /lib/modules &&
      modprobe usbhid && modprobe usbkbd
fi

# lets see if we're told on which disk to install...
INSTALL_DEV=`cat /proc/cmdline | tr ' ' '\012' | sed -ne '/^eve_install_disk=/s#^.*=##p'`

# ...if not we will try to guess, and...
if [ -z "$INSTALL_DEV" ] ; then
   # now lets see what sources of installation material are there
   FREE_DISKS=$(lsblk -anlb -o "TYPE,NAME,SIZE" | grep "^disk" | awk '$3 { print $2;}' | grep -v $(root_dev))

   # if there's more than one free disk, install on the first one but warn about all of them
   echo $FREE_DISKS | awk '{ if (NF > 1) { printf("WARNING: found multiple free disks %s, installing on the first one\n", $0); } }'
   INSTALL_DEV=$(set ${FREE_DISKS:-""} ; echo $1)
fi

# ...if we didn't find a single free disk - bail
[ -z "$INSTALL_DEV" ] && bail "FATAL: didn't find a single free disk"

# now lets figure out whether we have installation material
mkdir /parts || :
CONFIG_PART=$(find_part CONFIG "$(root_dev)")
if [ -n "$CONFIG_PART" ] ; then
   ln -s /dev/$CONFIG_PART /parts/config.img
fi

for i in persist.img config.img rootfs.img EFI ; do
   SOURCE="/bits/$i"
   [ -e "$SOURCE" ] || SOURCE=/dev/null
   [ -L /parts/$i ] || ln -s "$SOURCE" /parts/$i
done
# finally lets see if we were given any overrides
grep -q eve_install_skip_rootfs /proc/cmdline && trunc /parts/rootfs.img
grep -q eve_install_skip_config /proc/cmdline && trunc /parts/config.img
grep -q eve_install_skip_config /proc/cmdline && trunc /parts/persist.img

# we may be asked to pause before install procedure
grep -q eve_pause_before_install /proc/cmdline && pause "formatting the /dev/$INSTALL_DEV"

# do the install (unless we're only here to collect the black box)
grep -q eve_blackbox /proc/cmdline || /make-raw "/dev/$INSTALL_DEV" || bail "Installation failed. Entering shell..."

# now the disk is ready - mount partitions
mount_part P3 "$INSTALL_DEV" 2>/dev/null
if mount_part CONFIG "$INSTALL_DEV" -t vfat -o iocharset=iso8859-1; then
   # uuidgen | sed -e 's#^.*-##'
   grep -q eve_blackbox /proc/cmdline || [ -f /run/CONFIG/soft_serial ] || uuidgen > /run/CONFIG/soft_serial
fi

# finally collect information about the node (including the blackbox if found)
if mount_part INVENTORY "$(root_dev)" -t vfat -o iocharset=iso8859-1; then
   REPORT="/run/INVENTORY/$(cat /run/CONFIG/soft_serial 2>/dev/null)"
   mkdir -p "$REPORT"

   # first lets look at hardware model
   PILLAR=/mnt/containers/services/pillar/lower
   for i in dev proc sys ; do mount --bind /$i $PILLAR/$i ; done
   chroot "$PILLAR" /usr/sbin/dmidecode > "$REPORT/hardwaremodel.txt"

   # then we can collect our black box
   grep -q eve_blackbox /proc/cmdline && collect_black_box "$REPORT" 2>/dev/null
fi

# we also maybe asked to pause after
grep -q eve_pause_after_install /proc/cmdline && pause "before shutting the node down"

# lets hope this is enough to flush the caches
sync; sleep 5; sync
for p in CONFIG INVENTORY P3; do
   umount "/run/$p" 2>/dev/null
done

# we need a copy of these in tmpfs so that a block device with rootfs can be yanked
cp /sbin/poweroff /bin/sleep /
echo "NOTICE: Device will now power off. Remove the USB stick and power it back on to complete the installation." >/dev/console
/sleep 5

/poweroff -f
