// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: config/mesh.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MapServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameOrIp   string `protobuf:"bytes,1,opt,name=NameOrIp,proto3" json:"NameOrIp,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
}

func (x *MapServer) Reset() {
	*x = MapServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_mesh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapServer) ProtoMessage() {}

func (x *MapServer) ProtoReflect() protoreflect.Message {
	mi := &file_config_mesh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapServer.ProtoReflect.Descriptor instead.
func (*MapServer) Descriptor() ([]byte, []int) {
	return file_config_mesh_proto_rawDescGZIP(), []int{0}
}

func (x *MapServer) GetNameOrIp() string {
	if x != nil {
		return x.NameOrIp
	}
	return ""
}

func (x *MapServer) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

type DeviceLispDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LispMapServers []*MapServer `protobuf:"bytes,1,rep,name=LispMapServers,proto3" json:"LispMapServers,omitempty"`
	LispInstance   uint32       `protobuf:"varint,2,opt,name=LispInstance,proto3" json:"LispInstance,omitempty"`
	EID            string       `protobuf:"bytes,4,opt,name=EID,proto3" json:"EID,omitempty"`
	EIDHashLen     uint32       `protobuf:"varint,5,opt,name=EIDHashLen,proto3" json:"EIDHashLen,omitempty"`
	ZedServers     []*ZedServer `protobuf:"bytes,6,rep,name=ZedServers,proto3" json:"ZedServers,omitempty"` // Deprecate in favor of dns
	// deprecated = 6;
	EidAllocationPrefix    []byte                `protobuf:"bytes,8,opt,name=EidAllocationPrefix,proto3" json:"EidAllocationPrefix,omitempty"`
	EidAllocationPrefixLen uint32                `protobuf:"varint,9,opt,name=EidAllocationPrefixLen,proto3" json:"EidAllocationPrefixLen,omitempty"`
	ClientAddr             string                `protobuf:"bytes,10,opt,name=ClientAddr,proto3" json:"ClientAddr,omitempty"`
	Dns                    []*ZnetStaticDNSEntry `protobuf:"bytes,11,rep,name=dns,proto3" json:"dns,omitempty"`                    // Add code in handlelookupparam.go
	Experimental           bool                  `protobuf:"varint,20,opt,name=Experimental,proto3" json:"Experimental,omitempty"` // true: lispers.net dataplane. Default: go dataplane
}

func (x *DeviceLispDetails) Reset() {
	*x = DeviceLispDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_mesh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLispDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLispDetails) ProtoMessage() {}

func (x *DeviceLispDetails) ProtoReflect() protoreflect.Message {
	mi := &file_config_mesh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLispDetails.ProtoReflect.Descriptor instead.
func (*DeviceLispDetails) Descriptor() ([]byte, []int) {
	return file_config_mesh_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceLispDetails) GetLispMapServers() []*MapServer {
	if x != nil {
		return x.LispMapServers
	}
	return nil
}

func (x *DeviceLispDetails) GetLispInstance() uint32 {
	if x != nil {
		return x.LispInstance
	}
	return 0
}

func (x *DeviceLispDetails) GetEID() string {
	if x != nil {
		return x.EID
	}
	return ""
}

func (x *DeviceLispDetails) GetEIDHashLen() uint32 {
	if x != nil {
		return x.EIDHashLen
	}
	return 0
}

func (x *DeviceLispDetails) GetZedServers() []*ZedServer {
	if x != nil {
		return x.ZedServers
	}
	return nil
}

func (x *DeviceLispDetails) GetEidAllocationPrefix() []byte {
	if x != nil {
		return x.EidAllocationPrefix
	}
	return nil
}

func (x *DeviceLispDetails) GetEidAllocationPrefixLen() uint32 {
	if x != nil {
		return x.EidAllocationPrefixLen
	}
	return 0
}

func (x *DeviceLispDetails) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *DeviceLispDetails) GetDns() []*ZnetStaticDNSEntry {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *DeviceLispDetails) GetExperimental() bool {
	if x != nil {
		return x.Experimental
	}
	return false
}

var File_config_mesh_proto protoreflect.FileDescriptor

var file_config_mesh_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x65, 0x74, 0x63,
	0x6d, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x70, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e, 0x4c, 0x69, 0x73,
	0x70, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x49, 0x44, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x49, 0x44, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x5a, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x5a, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x0a, 0x5a, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x45, 0x69, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x45, 0x69, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x36, 0x0a, 0x16, 0x45, 0x69, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x45, 0x69, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x5a, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x42, 0x3d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x24, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f,
	0x65, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_mesh_proto_rawDescOnce sync.Once
	file_config_mesh_proto_rawDescData = file_config_mesh_proto_rawDesc
)

func file_config_mesh_proto_rawDescGZIP() []byte {
	file_config_mesh_proto_rawDescOnce.Do(func() {
		file_config_mesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_mesh_proto_rawDescData)
	})
	return file_config_mesh_proto_rawDescData
}

var file_config_mesh_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_config_mesh_proto_goTypes = []interface{}{
	(*MapServer)(nil),          // 0: MapServer
	(*DeviceLispDetails)(nil),  // 1: DeviceLispDetails
	(*ZedServer)(nil),          // 2: ZedServer
	(*ZnetStaticDNSEntry)(nil), // 3: ZnetStaticDNSEntry
}
var file_config_mesh_proto_depIdxs = []int32{
	0, // 0: DeviceLispDetails.LispMapServers:type_name -> MapServer
	2, // 1: DeviceLispDetails.ZedServers:type_name -> ZedServer
	3, // 2: DeviceLispDetails.dns:type_name -> ZnetStaticDNSEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_config_mesh_proto_init() }
func file_config_mesh_proto_init() {
	if File_config_mesh_proto != nil {
		return
	}
	file_config_netcmn_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_mesh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_mesh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceLispDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_mesh_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_mesh_proto_goTypes,
		DependencyIndexes: file_config_mesh_proto_depIdxs,
		MessageInfos:      file_config_mesh_proto_msgTypes,
	}.Build()
	File_config_mesh_proto = out.File
	file_config_mesh_proto_rawDesc = nil
	file_config_mesh_proto_goTypes = nil
	file_config_mesh_proto_depIdxs = nil
}
