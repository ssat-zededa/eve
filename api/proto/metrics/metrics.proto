// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package org.lfedge.eve.metrics;
option go_package  = "github.com/lf-edge/eve/api/go/metrics";
option java_package = "org.lfedge.eve.metrics";

// Metrics from devices and applications

enum ZmetricTypes {
  ZmNop = 0;
  ZmDevice = 1;
  ZmApp = 3;
}

message memoryMetric {
  uint32 usedMem = 2;            //in MBytes
  uint32 availMem = 3;           //in MBytes
  double usedPercentage = 4;
  double availPercentage = 5;
}

message networkMetric {
  // iName - Set to SystemAdapter.Name which is the Logicallabel in phyio
  string iName = 1;	// name from config; displayName for network instance
  // alias - Set to SystemAdapter.alias
  string alias = 20;

  uint64 txBytes = 2;	// in bytes
  uint64 rxBytes = 3;	// in bytes
  uint64 txDrops = 4;
  uint64 rxDrops = 5;
  // deprecated = 6;
  // deprecated = 7;
  uint64 txPkts = 8;
  uint64 rxPkts = 9;
  uint64 txErrors = 10;
  uint64 rxErrors = 11;
  uint64 txAclDrops = 12;
  uint64 rxAclDrops = 13;
  uint64 txAclRateLimitDrops = 14;
  uint64 rxAclRateLimitDrops = 15;

  // localName - Set to IfName of the Adapter
  string localName = 16; // local vif name e.g., nbu*
}

// Failures and successes for commuication to zedcloud
// for each management port
message zedcloudMetric {
  string ifName = 1;          // interface name for management port
  uint64 failures = 2;
  uint64 success = 3;
  google.protobuf.Timestamp lastFailure = 4;
  google.protobuf.Timestamp lastSuccess = 5;
  repeated urlcloudMetric urlMetrics = 6;
  uint64 authVerifyFailure = 7; // networking success, authen verify fail count for V2 API
}

// Information for each API URL
message urlcloudMetric {
  string url = 1;
  int64 tryMsgCount = 2;        // Things we might have tried to send
  int64 tryByteCount = 3;       // or it failed before we could send them.
  int64 sentMsgCount = 4;
  int64 sentByteCount = 5;
  int64 recvMsgCount = 6;
  int64 recvByteCount = 7;
  int64 total_time_spent = 8; // Total time spent servicing requests that succeeded
}

// Failures and successes for the object decryption
message CipherMetric {
  string agent_name = 1;
  uint64 failure_count = 2;
  uint64 success_count = 3;
  google.protobuf.Timestamp last_failure = 4;
  google.protobuf.Timestamp last_success = 5;
  repeated TypeCounter tc = 6;
}

// Various error codes
// Note that CIPHER_ERROR_NO_DATA isn't really an error; means that there
// was no encrypted nor cleartext data.
// Must match CipherError in pkg/pillar/types
enum CipherError {
  CIPHER_ERROR_INVALID = 0;
  CIPHER_ERROR_NOT_READY = 1;          // Not yet received ECDH controller cert
  CIPHER_ERROR_DECRYPT_FAILED = 2;     // ECDH decrypt failed
  CIPHER_ERROR_UNMARSHAL_FAILED = 3;   // Failed protobuf decode post decryption
  CIPHER_ERROR_CLEARTEXT_FALLBACK = 4; // Failure then using cleartext
  CIPHER_ERROR_MISSING_FALLBACK = 5;   // Failed and no cleartext to fall back to
  CIPHER_ERROR_NO_CIPHER = 6;          // Only cleartext received
  CIPHER_ERROR_NO_DATA = 7;            // No data to encrypt/decrypt
}

// Counters for each of the different CipherError codes
message TypeCounter {
  CipherError error_code = 1;
  uint64 count = 2;
}

message appCpuMetric {
  // deprecated = 2;
  // deprecated = 3;
  google.protobuf.Timestamp upTime = 4;
  uint64 total = 5;                   // cpu total in secs. In docker stats, it's the container user usage
  uint64 systemTotal = 6;             // docker host system cpu total in secs. inc user, system and idle
}

message deviceMetric {
  // deprecated = 1;
  memoryMetric memory = 2;
  repeated networkMetric network = 3;
  repeated zedcloudMetric zedcloud = 4;
  // deprecated = 5;
  repeated diskMetric disk = 6;
  appCpuMetric cpuMetric = 7;
  repeated MetricItem metricItems = 8;
  uint64 runtimeStorageOverheadMB = 9;     // In MB
  uint64 appRunTimeStorageMB = 10;         // In MB
  memoryMetric systemServicesMemoryMB = 11;  // In MB
  logMetric log = 12;
  repeated CipherMetric cipher = 13;  // Object decryption
}

message appContainerMetric {
  string appContainerName = 1; // the unique key for the container in a VM or IoT Edge
  string status = 2;           // Status string e.g. Uptime 3 hours
  uint32 PIDs = 3;             // Number of PIDs inside the container
  appCpuMetric cpu = 4;        // container cpu usage
  memoryMetric memory = 5;     // container memory usage, will fill 'usedMem', 'availMem' initially
  networkMetric network = 6;   // container network usage, will fill 'txBytes', 'rxBytes' initially
  diskMetric disk = 7;         // container Block IO, will fill 'readBytes', 'writeBytes' initially
}

enum MetricItemType {
  MetricItemOther = 0;		// E.g., a string like an ESSID
  MetricItemGauge = 1;		// Goes up and down over time
  MetricItemCounter = 2;	// Monotonically increasing (until reboot)
  MetricItemState = 3;		// Toggles on and off; count transitions
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
message MetricItem {
  string key = 1;               // E.g., "lte-signal-strength"
  MetricItemType type = 2;
  oneof metricItemValue {
    bool boolValue = 3;
    uint32 uint32Value = 4;     // If timer this is in seconds
    uint64 uint64Value = 5;
    float floatValue = 6;
    string stringValue = 7; // Use with care
  }
}

// For each partition; counts since boot
message diskMetric {
  string disk = 1;		// E.g., "mmcblk0p2"
  string mountPath = 2;		// E.g., "/config"
  uint64 readBytes = 3;		// In MB
  uint64 writeBytes = 4;	// In MB
  uint64 readCount = 5;		// Number of ops
  uint64 writeCount = 6;	// Number of ops
  uint64 total = 7;		// in MBytes; if we know the mountpath
  uint64 used = 8;		// in MBytes; if we know the mountpath
  uint64 free = 9;		// in MBytes; if we know the mountpath
}

message appDiskMetric {
  string disk = 1;		// E.g., "mmcblk0p2"
  uint64 provisioned = 2;	// in MBytes
  uint64 used = 3;		// in MBytes
  string diskType = 4;          // Type of disk, e.g., QCOW2, RAW etc.
  bool dirty = 5;               // Dirty flag
}

message appMetric {
  string AppID  = 1;
  string appVersion = 10;
  string AppName = 2;
  appCpuMetric cpu = 3;
  memoryMetric memory = 4;
  repeated networkMetric network = 5;
  repeated appDiskMetric disk = 6;
  repeated appContainerMetric container = 7;
}

// We track device and app logs separately with these counters.
// An event is counted as a log input that can be sent onwards (to cloud) or
// dropped for a few reason.
// Thus:
// totalAppLogInput = numAppEventsSent + numAppEventErrors + num4xxResponses
// totalDeviceLogInput = numDeviceEventsSent + numDeviceEventErrors
message logMetric {
  // Sent events count also includes events that the device tried to send but got deferred.
  // Because deferred logs will eventually reach cloud after network is restored.
  uint64 numDeviceEventsSent = 1;
  uint64 numDeviceBundlesSent = 2;
  uint64 numAppEventsSent = 3;
  uint64 numAppBundlesSent = 4;
  // num4xxResponses: This counter is akin to event errors/drops.
  //
  // 4xx response for a device event bundle does not make sense, unless
  // there is a programming error in EVE code that sends device event bundles to cloud.
  // But, app instances can disappear from cloud and any futher logs sent by EVE to cloud
  // will result in a 4xx response back.
  // Any time an app log bundle gets rejected with 4xx response from cloud, num4xxResponses
  // should be incremented by the number of events present in that rejected bundle.
  uint64 num4xxResponses = 5;
  google.protobuf.Timestamp lastDeviceBundleSendTime = 6;
  google.protobuf.Timestamp lastAppBundleSendTime = 7;

  bool isLogProcessingDeferred = 8;
  uint64 numTimesDeferred = 9;
  google.protobuf.Timestamp lastLogDeferTime = 10;

  uint64 totalDeviceLogInput = 13;
  uint64 totalAppLogInput = 14;

  // eg:- Size of individual event is larger than the max proto buf size limit.
  uint64 numDeviceEventErrors = 15;
  uint64 numAppEventErrors = 16;

  uint64 numDeviceBundleProtoBytesSent = 17;
  uint64 numAppBundleProtoBytesSent = 18;

  // Split of totalDeviceLogInput per source string
  map <string, uint64> input_sources = 19;
}

// Lisp stats
message PktStat {
  uint64 Packets = 1;
  uint64 Bytes = 2;
}

// Vpn Stats
message ZMetricConn {
  PktStat InPkts = 1;
  PktStat OutPkts = 2;
  PktStat ErrPkts = 3;
  PktStat CarierErrPkts = 4;
}

message ZMetricVpn {
  ZMetricConn ConnStat = 1;
  ZMetricConn IkeStat = 2;
  ZMetricConn NatTStat = 3;
  ZMetricConn EspStat = 4;
}

// For other services with no specific metrics
message ZMetricNone {
}

// flow stats
message ZMetricFlowLink {
  oneof Link {
    string subNet = 1; // IpSec: Subnet
    // deprecated = 2; string eid = 2
  }
  string spiId = 3;    // IpSec: SpiId
}

message ZMetricFlowEndPoint {
  oneof Endpoint {
    string ipAddr = 1; // IpSec: Endpoint Ip Address
    // deprecated = 2; string rloc = 2
  }
  repeated ZMetricFlowLink link = 5;
  PktStat stats = 10;  // traffic
}

message ZMetricFlow {
  string id = 1;      // IpSec Conn-Id
  string name = 2;    // IpSec Tun-Name
  uint32 type = 3;    // IpSec-Vpn
  // deprecated  = 4; uint64 iid  = 4
  uint64 estTime = 5; // in seconds
  ZMetricFlowEndPoint lEndPoint = 10;
  repeated ZMetricFlowEndPoint rEndPoint = 11;
}

message NetworkStats {
  uint64 totalPackets = 1;
  uint64 errors = 2;
  uint64 drops = 3;
  uint64 totalBytes = 4;
}

message ZMetricNetworkStats {
  NetworkStats rx = 1;
  NetworkStats tx = 2;
}

message ZProbeNIMetrics {         // per NI probing stats
  string currentIntf = 1;         // current picked uplink interface
  string remoteEndpoint = 2;      // remote URL or IP address for probing
  uint32 pingIntv = 3;            // local ping interval in seconds
  uint32 remotePingIntv = 4;      // remote probe interval in seconds
  uint32 uplinkCnt = 5;           // total number of uplink intf in consideration
  message ZProbeIntfMetric {      // level 2
    string intfName = 11;            // uplink interface name, e.g. eth1, wlan0
    string gatewayNexhtop = 12;      // intf nexthop IP address
    bool   gatewayUP = 13;           // local gateway status UP or not
    bool   remoteHostUP = 14;        // remote url/IP status UP or not
    uint32 nexthopUpCount = 15;      // local ping success count
    uint32 nexthopDownCount = 16;    // local ping failure count
    uint32 remoteUpCount = 17;       // remote probing success count
    uint32 remoteDownCount = 18;     // remote probing failure count
    uint32 remoteProbeLatency = 19;  // remote host probe latency in msec
  }
  repeated ZProbeIntfMetric intfMetric = 10; // per uplink intf probing stats
}

message ZMetricNetworkInstance {
  string networkID = 2;		// UUID
  string networkVersion = 3;

  uint32 instType = 5;		// ZNetworkInstType
  string displayname = 6;	// From NetworkInstance config
  bool activated = 7;		// Forwarding enabled

  repeated networkMetric network = 10;	// Aggregate counters for bridge
  ZProbeNIMetrics probeMetric = 12;     // NI uplink probing stats
  oneof InstanceContent {
    ZMetricVpn  vpnm = 20;
    // deprecated = 21; ZMetricLisp lispm = 21
    ZMetricNone nonem = 22;
  }
  repeated ZMetricFlow flowStats = 30;
  // deprecated = 31; ZMetricLispGlobal lispGlobalStats = 31

  ZMetricNetworkStats networkStats = 40; // Network bridge interface statistics
}

message ZMetricVolume {
  string uuid = 1;
  string displayName = 2;
  uint64 readBytes = 3;
  uint64 writeBytes = 4;
  uint64 readCount = 5;
  uint64 writeCount = 6;
  uint64 totalBytes = 7;
  uint64 usedBytes = 8;
  uint64 freeBytes = 9;
}

// This is the request payload for POST /api/v1/edgeDevice/metrics
// ZMetricMsg carries periodic metrics; typically one message is sent for
// all of the objects on a device (the device itself plus all of the app instances
// and all of the network instances). As such there is normally no need to
// retransmit these messages if there is some network failure; the next periodic
// message will include the cumulative numbers.
// The message is assumed to be protected by a TLS session bound to the
// device certificate.
message ZMetricMsg {
  string devID = 1;
  // deprecated = 2;
  google.protobuf.Timestamp atTimeStamp = 3;

  oneof MetricContent {
    deviceMetric dm = 4;
  }
  repeated appMetric am = 5;
  // deprecated = 6;
  repeated ZMetricNetworkInstance nm = 7;

  repeated ZMetricVolume vm = 8;
}
