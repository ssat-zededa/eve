---
name: PRs
on:
  pull_request_target:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Test
        run: |
          make test
      - name: Report test results as Annotations
        if: ${{ always() }}
        uses: guyarb/golang-test-annoations@v0.1
        with:
          test-results: dist/amd64/results.json
      - name: Store raw test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: 'test-report'
          path: ${{ github.workspace }}/dist

  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Build packages
        env:
          PR_ID: ${{ github.event.pull_request.number  }}
        run: |
          make pkgs
          COMMIT_ID=$(git describe --abbrev=8 --always)
          echo "VERSION=0.0.0-pr$PR_ID-$COMMIT_ID" >> $GITHUB_ENV
          echo "TAG=evebuild/danger:pr$PR_ID" >> $GITHUB_ENV
      - name: Build EVE
        run: |
          make ROOTFS_VERSION="$VERSION" eve
      - name: Build EVE for KVM
        run: |
          rm -rf dist
          make ROOTFS_VERSION="$VERSION" HV=kvm eve
      - name: Export docker container
        run: |
          for i in xen kvm; do
             docker tag "lfedge/eve:$VERSION-$i" "$TAG-$i"
             IMGS="$IMGS $TAG-$i"
          done
          docker save $IMGS > eve.tar
      - name: Upload EVE
        uses: actions/upload-artifact@v2
        with:
          name: eve
          path: eve.tar

  publish:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download EVE
        uses: actions/download-artifact@v2
        with:
          name: eve
      - name: Publish EVE
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" |\
             docker login -u evebuild --password-stdin
          for i in `docker load < eve.tar | sed -e 's#^Loaded image:##'`; do
             docker push "$i"
          done

  cleanup:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Wait for publish
        run: |
          # Ideally we would find an API to call and make sure that 'publish'
          # completed. NOTE that we don't care whether publish succeedeed or
          # failed -- just completed. Waiting for 60 seconds is the next best
          # thing since it works most of the time and on a very rare occasion
          # that 'publish' doesn't complete fetching the artifact in 60 seconds
          # we can always re-publish later.
          sleep 60
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: eve
          failOnError: false

# If all else fails, you may find solace here
#  https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions
#  https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
#
#  echo "::error file=${file},line=${linenum},col=${column}::${plugin}:${text}"
#  echo "::error file=${file},line=${linenum}::${plugin}:${text}"
#
#  dump:
#      runs-on: ubuntu-latest
#      steps:
#        - name: Dump GitHub context
#          env:
#            GITHUB_CONTEXT: ${{ toJson(github) }}
#          run: |
#            echo "$GITHUB_CONTEXT"
#            echo ${{ github.event.pull_request.title }}
