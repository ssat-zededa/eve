diff --git a/cmd/fscrypt/commands.go b/cmd/fscrypt/commands.go
index a3bfef2..f75143e 100644
--- a/cmd/fscrypt/commands.go
+++ b/cmd/fscrypt/commands.go
@@ -718,7 +718,7 @@ var changePassphrase = cli.Command{
 	Description: `This command takes a specified passphrase protector and
 		changes the corresponding passphrase. Note that this does not
 		create or destroy any protectors.`,
-	Flags:  []cli.Flag{protectorFlag},
+	Flags:  []cli.Flag{protectorFlag, sourceFlag, keyFileFlag, oldKeyFileFlag},
 	Action: changePassphraseAction,
 }
 
diff --git a/cmd/fscrypt/flags.go b/cmd/fscrypt/flags.go
index 16a75dc..52f892f 100644
--- a/cmd/fscrypt/flags.go
+++ b/cmd/fscrypt/flags.go
@@ -116,7 +116,7 @@ var (
 	// TODO(joerichey) add presubmit rule to enforce this
 	allFlags = []prettyFlag{helpFlag, versionFlag, verboseFlag, quietFlag,
 		forceFlag, legacyFlag, skipUnlockFlag, timeTargetFlag,
-		sourceFlag, nameFlag, keyFileFlag, protectorFlag,
+		sourceFlag, nameFlag, keyFileFlag, oldKeyFileFlag, protectorFlag,
 		unlockWithFlag, policyFlag}
 	// universalFlags contains flags that should be on every command
 	universalFlags = []cli.Flag{verboseFlag, quietFlag, helpFlag}
@@ -207,6 +207,14 @@ var (
 			formatted as raw binary and should be exactly 32 bytes
 			long.`,
 	}
+	oldKeyFileFlag = &stringFlag{
+		Name:    "old-key",
+		ArgName: "FILE",
+		Usage: `Use the contents of FILE as the wrapping key when
+			creating or unlocking raw_key protectors. FILE should be
+			formatted as raw binary and should be exactly 32 bytes
+			long.`,
+	}
 	userFlag = &stringFlag{
 		Name:    "user",
 		ArgName: "USERNAME",
diff --git a/cmd/fscrypt/keys.go b/cmd/fscrypt/keys.go
index 872ca2a..8c04411 100644
--- a/cmd/fscrypt/keys.go
+++ b/cmd/fscrypt/keys.go
@@ -174,13 +174,9 @@ func makeKeyFunc(supportRetry, shouldConfirm bool, prefix string) actions.KeyFun
 			return key, nil
 
 		case metadata.SourceType_raw_key:
-			// Only use prefixes with passphrase protectors.
-			if prefix != "" {
-				return nil, ErrNotPassphrase
-			}
 			prompt := fmt.Sprintf("Enter key file for protector %q: ", info.Name())
 			// Raw keys use a file containing the key data.
-			file, err := promptForKeyFile(prompt)
+			file, err := promptForKeyFile(prompt, (prefix == "old "))
 			if err != nil {
 				return nil, err
 			}
diff --git a/cmd/fscrypt/prompt.go b/cmd/fscrypt/prompt.go
index b854fb9..e6cc645 100644
--- a/cmd/fscrypt/prompt.go
+++ b/cmd/fscrypt/prompt.go
@@ -216,10 +216,16 @@ func promptForSource(ctx *actions.Context) error {
 
 // promptForKeyFile returns an open file that should be used to create or unlock
 // a raw_key protector. Be sure to close the file when done.
-func promptForKeyFile(prompt string) (*os.File, error) {
+func promptForKeyFile(prompt string, old bool) (*os.File, error) {
 	// If specified on the command line, we only try no open it once.
-	if keyFileFlag.Value != "" {
-		return os.Open(keyFileFlag.Value)
+	if old {
+		if (oldKeyFileFlag.Value != "") {
+			return os.Open(oldKeyFileFlag.Value)
+		}
+	} else {
+		if keyFileFlag.Value != "" {
+			return os.Open(keyFileFlag.Value)
+		}
 	}
 	if quietFlag.Value {
 		return nil, ErrSpecifyKeyFile
