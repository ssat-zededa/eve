// Copyright(c) 2020 Zededa, Inc.
// All rights reserved.

syntax = "proto3";

import "evecommon/evecommon.proto";

package org.lfedge.eve.certs;
option go_package  = "github.com/lf-edge/eve/api/go/certs";
option java_package = "org.lfedge.eve.certs";

//Â This is the response payload for GET /api/v1/edgeDevice/certs
// or /api/v2/edgeDevice/certs
// ZControllerCert carries a set of X.509 certificate and their properties
// from Controller to EVE.
message ZControllerCert {
  repeated ZCert certs = 1;  //list of certificates sent by controller
}

enum ZCertMetaDataType {
  Z_CERT_META_DATA_TYPE_INVALID = 0;
  Z_CERT_META_DATA_TYPE_TPM2_PUBLIC = 1; //TPM2_PUBLIC blob from TPM2.0
}

message ZCertMetaData {
  ZCertMetaDataType type = 1;  //meta-data type
  bytes meta_data = 2;         //blob for the meta data
}

// ZCert is used for both controller certificates and edge-node certificates
message ZCert {
  org.lfedge.eve.common.HashAlgorithm hashAlgo = 1; //hash method used to arrive at certHash
  bytes certHash = 2;             //truncated hash of the cert, according to hashing scheme in hashAlgo
  ZCertType type = 3;             //what kind of certificate(to identify the target use case)
  bytes cert = 4;                 //X509 cert in .PEM format
  ZCertAttr attributes = 5;       //properties of this certificate
  repeated ZCertMetaData meta_data_items = 6; //Any meta-data associated with this certificate
}

message ZCertAttr {
  bool is_mutable = 1;            //set to false for immutable certificates
  bool is_tpm = 2;  		  //generated by a TPM
}

enum ZCertType {
  CERT_TYPE_CONTROLLER_NONE = 0;

  // controller generated certificates
  CERT_TYPE_CONTROLLER_SIGNING = 1;        //set for the leaf certificate used by controller to sign payload envelopes
  CERT_TYPE_CONTROLLER_INTERMEDIATE = 2;   //set for intermediate certs used to validate the certificates
  CERT_TYPE_CONTROLLER_ECDH_EXCHANGE = 3;  //set for certificate used by controller to share any symmetric key using ECDH

  // device generated certificates
  CERT_TYPE_DEVICE_ONBOARDING = 10;         //for identifying the device
  CERT_TYPE_DEVICE_RESTRICTED_SIGNING = 11; //node for attestation
  CERT_TYPE_DEVICE_ENDORSEMENT_RSA = 12;    //endorsement key certificate with RSASSA signing algorithm
  CERT_TYPE_DEVICE_ECDH_EXCHANGE = 13;      //to share symmetric key using ECDH
}
